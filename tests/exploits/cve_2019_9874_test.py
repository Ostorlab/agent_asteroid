"""Unit tests for CVE-2019-9874"""

import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2019_9874


def testCVE20199874_whenTargetIsSitecore_accepts(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for Sitecore Anti-CSRF exploit, case when target is Sitecore."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4443)
    exploit_instance = cve_2019_9874.SitecoreAntiCSRFDeserializationExploit()
    requests_mock.get(
        "https://127.0.0.1:4443",
        text="<title>Welcome to Sitecore</title>",
    )
    
    accept = exploit_instance.accept(target)
    
    assert accept is True


def testCVE20199874_whenTargetIsNotSitecore_rejects(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for Sitecore Anti-CSRF exploit, case when target is not Sitecore."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4443)
    exploit_instance = cve_2019_9874.SitecoreAntiCSRFDeserializationExploit()

    requests_mock.get(
        "https://127.0.0.1:4443",
        text="<title>Generic CMS</title>",
    )

    accept = exploit_instance.accept(target)
    assert accept is False


def testCVE20199874_whenDeserializationErrorOccurs_reportsVulnerability(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for Sitecore Anti-CSRF exploit, case when deserialization error indicates vulnerability."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4443)
    exploit_instance = cve_2019_9874.SitecoreAntiCSRFDeserializationExploit()

    requests_mock.post(
        "https://127.0.0.1:4443/sitecore/shell/Applications/Security/CreateNewUser/CreateNewUser.aspx",
        status_code=500,
        text="PotentialCsrfException: The CSRF cookie value did not match the CSRF parameter value.",
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) > 0
    assert (
        vulnerabilities[0].entry.title
        == "Sitecore Anti-CSRF Unauthenticated Deserialization"
    )
    assert vulnerabilities[0].risk_rating.name == "CRITICAL"
    assert vulnerabilities[0].vulnerability_location is not None
    assert vulnerabilities[0].dna is not None


def testCVE20199874_whenDeserializationErrorDoesNotOccur_reportsNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for Sitecore Anti-CSRF exploit, case when no deserialization error happens."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4443)
    exploit_instance = cve_2019_9874.SitecoreAntiCSRFDeserializationExploit()

    requests_mock.post(
        "https://127.0.0.1:4443/sitecore/shell/Applications/Security/CreateNewUser/CreateNewUser.aspx",
        status_code=200,
        text="OK",
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE20199874_whenRequestExceptionOccurs_doesNotRaise(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for Sitecore Anti-CSRF exploit, ensuring request exceptions are handled gracefully."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4443)
    exploit_instance = cve_2019_9874.SitecoreAntiCSRFDeserializationExploit()

    requests_mock.post(
        "https://127.0.0.1:4443/sitecore/shell/Applications/Security/CreateNewUser/CreateNewUser.aspx",
        exc=requests_exceptions.RequestException,
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
