"""Unit tests for Agent Asteroid: CVE-2024-42450"""

from unittest import mock

from pytest_mock import plugin
import requests_mock as req_mock
import psycopg

from agent import definitions
from agent.exploits import cve_2024_42450


def testCVE202442450_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-42450 unit test: case when target is vulnerable."""

    mock_check_db_connection = mocker.patch(
        "agent.exploits.cve_2024_42450._check_db_connection", return_value=True
    )
    requests_mock.get(
        "http://localhost:80/versa/login",
        text="""<title>Versa Director Login</title> <p>2022 Versa Networks | All Rights Reserved</p> """,
        status_code=200,
    )

    exploit_instance = cve_2024_42450.CVE202442450Exploit()

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == cve_2024_42450.VULNERABILITY_TITLE
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-42450, Versa Director Database exposure"
    )
    mock_check_db_connection.assert_called_once_with(
        "localhost", "vnms", "vnms", "Versa@123"
    )


def testCVE202442450_whenSafe_reportNothing(
    mocker: plugin.MockerFixture,
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-42450 unit test: case when target is not vulnerable."""

    mock_check_db_connection = mocker.patch(
        "agent.exploits.cve_2024_42450._check_db_connection", return_value=False
    )
    requests_mock.get(
        "http://localhost:80/versa/login",
        text="""<title>Versa Director Login</title> <p>2022 Versa Networks | All Rights Reserved</p> """,
        status_code=200,
    )

    exploit_instance = cve_2024_42450.CVE202442450Exploit()

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
    mock_check_db_connection.assert_called_once_with(
        "localhost", "vnms", "vnms", "Versa@123"
    )


def testCVE202442450_whenDBError_handleGracefully(
    mocker: plugin.MockerFixture, requests_mock: req_mock.mocker.Mocker, caplog
) -> None:
    """CVE-2024-42450 unit test: case when database connection fails gracefully."""

    mock_check_db_connection = mocker.patch(
        "psycopg.connect",
        side_effect=psycopg.OperationalError("Database connection error"),
    )
    requests_mock.get(
        "http://localhost:80/versa/login",
        text="""<title>Versa Director Login</title> <p>2022 Versa Networks | All Rights Reserved</p> """,
        status_code=200,
    )

    exploit_instance = cve_2024_42450.CVE202442450Exploit()

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
    assert mock_check_db_connection.call_args_list[0][1] == {
        "connect_timeout": 90,
        "dbname": "vnms",
        "host": "localhost",
        "password": "Versa@123",
        "user": "vnms",
    }
