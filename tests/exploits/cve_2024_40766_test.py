"""Unit tests for Agent Asteroid: CVE-2024-40766"""

from unittest import mock

from pytest_mock import plugin
from pysnmp import error as pysnmp_errors

from agent import definitions
from agent.exploits import cve_2024_40766


def testCVE202440766_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-40766 unit test: case when target is vulnerable."""

    vulnerable_version = "6.5.4.14-109n"
    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        f"SonicOS Enhanced {vulnerable_version}"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_40766.CVE202440766Exploit()

    target = definitions.Target("udp", "192.168.1.1", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == cve_2024_40766.VULNERABILITY_TITLE
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.technical_detail == (
        f"SonicWall device at udp://192.168.1.1:161/ is running a vulnerable version: {vulnerable_version}. "
        "Immediate action is required."
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202440766_whenSafe_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-40766 unit test: case when target is not vulnerable."""

    safe_version = "7.0.2-5050"
    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        f"SonicOS Enhanced {safe_version}"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_40766.CVE202440766Exploit()

    target = definitions.Target("udp", "192.168.1.1", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202440766_whenVersionNotFound_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-40766 unit test: case when version cannot be determined."""

    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        "Unexpected response"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_40766.CVE202440766Exploit()

    target = definitions.Target("udp", "192.168.1.1", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202440766_whenSNMPError_handleGracefully(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-40766 unit test: case when SNMP returns an error."""

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (True, False, False, [])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)
    mock_logging = mocker.patch("logging.error")

    exploit_instance = cve_2024_40766.CVE202440766Exploit()

    target = definitions.Target("udp", "192.168.1.1", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
    mock_logging.assert_called_with("error_indication: %s", True)


def testCVE202440766_whenPySnmpErrorRaise_handleGracefully(
    mocker: plugin.MockerFixture,
) -> None:
    """Ensure CVE-2024-40766 exploit handles PySnmpError raised by hlapi.getCmd."""
    mocker.patch("pysnmp.hlapi.getCmd", side_effect=pysnmp_errors.PySnmpError)
    exploit_instance = cve_2024_40766.CVE202440766Exploit()
    target = definitions.Target("udp", "192.168.1.1", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
