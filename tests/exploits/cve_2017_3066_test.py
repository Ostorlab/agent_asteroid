"""Unit tests for CVE-2017-3066"""
import logging

import requests.exceptions as requests_exceptions
import requests_mock as req_mock
from agent.exploits import cve_2017_3066
from agent import definitions


def testCVE20173066Accept_whenHasColdFusionTitle_returnTrue(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2017-3066, case when target is safe."""
    text = """<html>
            <head>
                <title>ColdFusion Administrator Login</title>
            </head>
            </html> """
    target = definitions.Target(scheme="http", host="172.19.0.2", port=8500)
    exploit_instance = cve_2017_3066.CVE20173066Exploit()

    requests_mock.get(
        "http://172.19.0.2:8500/CFIDE/administrator/index.cfm",
        text=text,
    )

    accept = exploit_instance.accept(target)

    assert accept is True


def testCVE20173066_whenVulnerable_reportVulnerability(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2017-3066, case when target is vulnerable."""
    # Mock the admin page check
    admin_text = """<html>
            <head>
                <title>ColdFusion Administrator Login</title>
            </head>
            </html>"""
    requests_mock.get(
        "http://172.19.0.2:8500/CFIDE/administrator/index.cfm",
        text=admin_text,
    )
    # Mock the AMF endpoint response with vulnerability indicator
    amf_response = b"\x00\x03\x00\x01\x00\x12AppendToGatewayUrl\x01\xff\xff\xff\xff\x02\x004;jsessionid=CBB07C7D7E6051F1DCF344D3437ED111.cfusion\x00\x01\x00\t/onStatus\x00\x00\xff\xff\xff\xff\x11\nC\x01\tcode\x13rootCause\x0fdetails\x0fmessage\x06#Server.Processing\x01\x01\x06\x81\x19There was an unhandled failure on the server. java.lang.NullPointerException"
    requests_mock.post(
        "http://172.19.0.2:8500/flex2gateway/amf",
        content=amf_response,
    )

    target = definitions.Target(scheme="http", host="172.19.0.2", port=8500)
    exploit_instance = cve_2017_3066.CVE20173066Exploit()

    vulnerabilities = exploit_instance.check(target)
    logging.debug(f"Vulnerabilities list: {vulnerabilities}")
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Java deserialization vulnerability in the Apache BlazeDS library in Adobe ColdFusion"
    )
    assert (
        "172.19.0.2:8500/ is vulnerable to CVE-2017-3066"
        in vulnerability.technical_detail
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20173066_whenNotVulnerable_noFindingsReported(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2017-3066, case when target is not vulnerable."""
    # Mock the admin page check
    admin_text = """<html>
            <head>
                <title>ColdFusion Administrator Login</title>
            </head>
            </html>"""
    requests_mock.get(
        "http://172.19.0.2:8500/CFIDE/administrator/index.cfm",
        text=admin_text,
    )

    # Mock the AMF endpoint response with secure indicator
    amf_response = b"\x00\x03\x00\x00\x00\x01\x00\t/onStatus\x00\x00\x00\x00\x00\x01\x11\n\x81SIflex.messaging.messages.ErrorMessage\x0fheaders\x11clientId\x17destination\x13messageId\x17faultDetail\tbody\x15timeToLive\x13faultCode\x17faultString\x13rootCause\x1bcorrelationId\x13timestamp\x19extendedData\n\x03\x01\x01\x01\x06I1E08E48B-D109-774C-F8CA-8C0A5224D9DA\x01\x01\x05\x00\x00\x00\x00\x00\x00\x00\x00\x06/Client.Message.Encoding\x06\x81\x03Creation validation for class 'sun.rmi.server.UnicastRef' failed.\x01\x01\x05By_b\xf0\xf6\x10\x00\x01"
    requests_mock.post(
        "http://172.19.0.2:8500/flex2gateway/amf",
        content=amf_response,
    )

    target = definitions.Target(scheme="http", host="172.19.0.2", port=8500)
    exploit_instance = cve_2017_3066.CVE20173066Exploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE20173066_whenRequestFails_returnsEmptyList(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2017-3066, case when request fails."""
    # Mock the admin page check
    admin_text = """<html>
            <head>
                <title>ColdFusion Administrator Login</title>
            </head>
            </html>"""
    requests_mock.get(
        "http://172.19.0.2:8500/CFIDE/administrator/index.cfm",
        text=admin_text,
    )

    # Mock the AMF endpoint to raise an exception
    requests_mock.post(
        "http://172.19.0.2:8500/flex2gateway/amf",
        exc=requests_exceptions.RequestException,
    )

    target = definitions.Target(scheme="http", host="172.19.0.2", port=8500)
    exploit_instance = cve_2017_3066.CVE20173066Exploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE20173066_whenTriageFails_returnsEmptyList(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2017-3066, case when triage fails."""
    # Mock the admin page check
    admin_text = """<html>
            <head>
                <title>ColdFusion Administrator Login</title>
            </head>
            </html>"""
    requests_mock.get(
        "http://172.19.0.2:8500/CFIDE/administrator/index.cfm",
        text=admin_text,
    )

    # Mock the AMF endpoint response without triage indicator
    amf_response = b"\x00\x03\x00\x00\x00\x01\x00\t/onStatus\x00\x00\x00\x00\x00\x01\x11\n\x81SIflex.messaging.messages.ErrorMessage\x0fheaders\x11clientId\x17destination\x13messageId\x17faultDetail\tbody\x15timeToLive\x13faultCode\x17faultString\x13rootCause\x1bcorrelationId\x13timestamp\x19extendedData\n\x03\x01\x01\x01\x06I1E08E48B-D109-774C-F8CA-8C0A5224D9DA\x01\x01\x05\x00\x00\x00\x00\x00\x00\x00\x00\x06/Client.Message.Encoding\x06\x81\x03Some other error message\x01\x01\x05By_b\xf0\xf6\x10\x00\x01"
    requests_mock.post(
        "http://172.19.0.2:8500/flex2gateway/amf",
        content=amf_response,
    )

    target = definitions.Target(scheme="http", host="172.19.0.2", port=8500)
    exploit_instance = cve_2017_3066.CVE20173066Exploit()
    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
