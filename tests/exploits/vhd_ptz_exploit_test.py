"""Unit tests for Agent Asteroid: VHD PTZ Camera Vulnerabilities"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import vhd_ptz_exploit


def testVHDPTZ_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is vulnerable (firmware 6.3.32)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        text='devname="ptzoptics" devtype="VX630A" versioninfo="SOC v6.3.32 - ARM 6.3.51THI" serial_num="r1j04260027" device_model="F53.HI"',
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/param.cgi?post_network_other_conf",
        text='{"Response":{"Result":"Success"}}"',
        status_code=200,
    )

    exploit_instance = vhd_ptz_exploit.VHDPTZExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "ValueHD PTZ Camera Authentication Bypass and Command Injection"
    )


def testVHDPTZ_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is safe (firmware 6.3.40)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        text='devname="ptzoptics" devtype="VX630A" versioninfo="SOC v6.3.40 - ARM 6.3.51THI" serial_num="r1j04260027" device_model="F53.HI"',
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/param.cgi?post_network_other_conf",
        text="Couldn't connect to server\"",
        status_code=200,
    )

    exploit_instance = vhd_ptz_exploit.VHDPTZExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testVHDPTZ_whenAuthRequired_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when authentication is required (not vulnerable)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        status_code=401,
    )
    exploit_instance = vhd_ptz_exploit.VHDPTZExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False


def testVHDPTZ_whenOlderVersion_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target has much older version (2.0.39)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        text='devname="ptzoptics" devtype="VX630A" versioninfo="SOC v2.0.39 - ARM 6.0.30SHIS" serial_num="r1j04260027" device_model="F53.HI"',
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/param.cgi?post_network_other_conf",
        text='{"Response":{"Result":"Success"}}"',
        status_code=200,
    )

    exploit_instance = vhd_ptz_exploit.VHDPTZExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
