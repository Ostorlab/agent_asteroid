"""Unit tests for Agent Asteroid: CVE-2024-55956"""

import requests_mock as req_mock
from ostorlab.agent.mixins import agent_report_vulnerability_mixin as vuln_mixin

from agent import definitions
from agent.exploits import cve_2024_55956

def testCVE202455956_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-55956 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text="Cleo VLTrader/5.8.0.22 (Build 12345)",
        status_code=200,
    )
    exploit_instance = cve_2024_55956.CVE202455956Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Cleo Harmony, VLTrader, and LexiCom - Arbitrary Command Execution via Autorun Directory"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-55956, Cleo Harmony, VLTrader, and LexiCom -"
        " Arbitrary Command Execution via Autorun Directory"
    )
    assert vulnerability.risk_rating == vuln_mixin.RiskRating.CRITICAL


def testCVE202455956_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-55956 unit test: case when target is safe."""
    requests_mock.get(
        "http://localhost:80/",
        text="Cleo VLTrader/5.8.0.24 (Build 12345)",
        status_code=200,
    )
    exploit_instance = cve_2024_55956.CVE202455956Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202455956_whenTargetNotCleoProduct_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-55956 unit test: case when target is not a Cleo product."""
    requests_mock.get(
        "http://localhost:80/",
        text="Not Found",
        status_code=404,
    )
    exploit_instance = cve_2024_55956.CVE202455956Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
