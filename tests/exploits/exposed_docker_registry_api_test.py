"""Unit tests for Agent Asteroid: Exposed Docker Registry API Vulnerability"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import exposed_docker_resgistry_api


def testExposedDockerRegistryAPIExploit_whenExposed_reportImages(
    requests_mock: req_mock.Mocker,
) -> None:
    """Exposed Docker Registry API Vulnerability unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/v2/_catalog",
        json={"repositories": ["hadoop-datanode", "hadoop-historyserver"]},
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/v2/hadoop-datanode/tags/list",
        json={"name": "hadoop-datanode", "tags": ["latest", "v1.0"]},
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/v2/hadoop-historyserver/tags/list",
        json={"name": "hadoop-historyserver", "tags": ["latest", "v2.0"]},
        status_code=200,
    )
    exploit_instance = exposed_docker_resgistry_api.ExposedDockerRegistryAPIExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Exposed Docker Registry API Vulnerability"
    assert vulnerability.technical_detail == (
        "http://localhost:80/v2/_catalog is vulnerable to Exposed Docker Registry API Vulnerability. "
        "Exposed repositories and tags: {'hadoop-datanode': ['latest', 'v1.0'], 'hadoop-historyserver': ['latest', "
        "'v2.0']}"
    )


def testExposedDockerRegistryAPIExploit_whenSafe_reportNoImages(
    requests_mock: req_mock.Mocker,
) -> None:
    """Exposed Docker Registry API Vulnerability unit test: case when target is safe."""
    requests_mock.get(
        "http://localhost:80/v2/_catalog",
        status_code=404,
    )
    exploit_instance = exposed_docker_resgistry_api.ExposedDockerRegistryAPIExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testExposedDockerRegistryAPIExploit_whenRequestException_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """Exposed Docker Registry API Vulnerability unit test: case when a request exception occurs."""
    requests_mock.get(
        "http://localhost:80/v2/_catalog",
        exc=requests.exceptions.RequestException,
    )
    exploit_instance = exposed_docker_resgistry_api.ExposedDockerRegistryAPIExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
