"""Unit tests for Agent Asteroid: CVE-2024-31461"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_31461


SECURE_HTML = """<html data-theme="dark" style="color-scheme: dark;">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>Sign In</title>
  <meta name="next-head-count" content="3">
  <meta property="og:site_name" content="Plane | Simple, extensible, open-source project management tool.">
  <meta property="og:title" content="Plane | Simple, extensible, open-source project management tool.">
  <style type="text/css">
    .EmojiPickerReact button.epr-emoji {
      align-items: center;
      border-radius: 8px;
      box-sizing: border-box;
      display: flex;
      height: var(--epr-emoji-fullsize);
      justify-content: center;
      max-height: var(--epr-emoji-fullsize);
      max-width: var(--epr-emoji-fullsize);
      overflow: hidden;
      position: relative;
      width: var(--epr-emoji-fullsize)
    }
  </style>
</head>
</html>
"""

INSECURE_HTML = """
<html data-theme="dark" style="color-scheme: dark;">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width">
  <title>Plane | Simple, extensible, open-source project management tool.</title>
  <meta property="og:site_name" content="Plane | Simple, extensible, open-source project management tool.">
  <meta property="og:title" content="Plane | Simple, extensible, open-source project management tool.">
  <meta property="og:url" content="https://app.plane.so/">
</head>

<body>
  <div id="__next">
    <script>!function () { try { var d = document.documentElement, n = 'data-theme', s = 'setAttribute'; var e = localStorage.getItem('theme'); if ('system' === e || (!e && true)) { var t = '(prefers-color-scheme: dark)', m = window.matchMedia(t); if (m.media !== t || m.matches) { d.style.colorScheme = 'dark'; d[s](n, 'dark') } else { d.style.colorScheme = 'light'; d[s](n, 'light') } } else if (e) { d[s](n, e || '') } if (e === 'light' || e === 'dark') d.style.colorScheme = e } catch (e) { } }()</script>
    <div class="pointer-events-none fixed top-5 right-5 z-50 h-full w-80 space-y-5 overflow-hidden"></div>
    <div class="pointer-events-none fixed top-5 right-5 z-50 h-full w-80 space-y-5 overflow-hidden"></div>
    <div class="h-screen w-full overflow-hidden bg-custom-background-100">
      <div
        class="hidden sm:block sm:fixed border-r-[0.5px] border-custom-border-200 h-screen w-[0.5px] top-0 left-20 lg:left-32">
      </div>
      <div
        class="fixed grid place-items-center bg-custom-background-100 sm:py-5 top-11 sm:top-12 left-7 sm:left-16 lg:left-28">
        <div class="grid place-items-center bg-custom-background-100">
          <div class="h-[30px] w-[30px]"><span
              style="box-sizing: border-box; display: inline-block; overflow: hidden; width: initial; height: initial; background: none; opacity: 1; border: 0px; margin: 0px; padding: 0px; position: relative; max-width: 100%;"><span
                style="box-sizing: border-box; display: block; width: initial; height: initial; background: none; opacity: 1; border: 0px; margin: 0px; padding: 0px; max-width: 100%;"><img
                  alt="" aria-hidden="true"
                  src="data:image/svg+xml,%3csvg%20xmlns=%27http://www.w3.org/2000/svg%27%20version=%271.1%27%20width=%27276%27%20height=%27276%27/%3e"
                  style="display: block; max-width: 100%; width: initial; height: initial; background: none; opacity: 1; border: 0px; margin: 0px; padding: 0px;"></span><img
                alt="Plane Logo"
                src="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fblue-without-text.17aa0249.png&amp;w=640&amp;q=75"
                decoding="async" data-nimg="intrinsic"
                style="position: absolute; inset: 0px; box-sizing: border-box; padding: 0px; border: none; margin: auto; display: block; width: 0px; height: 0px; min-width: 100%; max-width: 100%; min-height: 100%; max-height: 100%;"
                srcset="/_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fblue-without-text.17aa0249.png&amp;w=384&amp;q=75 1x, /_next/image?url=%2F_next%2Fstatic%2Fmedia%2Fblue-without-text.17aa0249.png&amp;w=640&amp;q=75 2x"></span>
          </div>
        </div>
      </div>
</body>

</html>
"""


def testCVE202431461_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-31461 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text=INSECURE_HTML,
        status_code=200,
    )
    exploit_instance = cve_2024_31461.CVE202431461Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "SSRF flaw in Plane Project Management Software"
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-31461, SSRF flaw in Plane Project "
        "Management Software"
    )


def testCVE202431461_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-31461 unit test: case when target is safe."""
    exploit_instance = cve_2024_31461.CVE202431461Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text=SECURE_HTML,
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
