"""Unit tests for Agent Asteroid: CVE-2024-31461"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_31461


def testCVE202431461_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
    insecure_html_example_cve_2024_31461: str,
) -> None:
    """CVE-2024-31461 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text=insecure_html_example_cve_2024_31461,
        status_code=200,
    )
    exploit_instance = cve_2024_31461.CVE202431461Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "SSRF flaw in Plane Project Management Software"
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-31461, SSRF flaw in Plane Project "
        "Management Software"
    )


def testCVE202431461_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
    secure_html_example_cve_2024_31461: str,
) -> None:
    """CVE-2024-31461 unit test: case when target is safe."""
    exploit_instance = cve_2024_31461.CVE202431461Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text=secure_html_example_cve_2024_31461,
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
