"""Unit tests for Agent Asteroid: CVE-2024-23334"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_23334


def testCVE202423334_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-23334 unit test: case when target is vulnerable."""
    exploit_instance = cve_2024_23334.CVE202423334Exploit()
    requests_mock.get(
        re.compile("http://localhost:8000/"),
        text="404 not found",
        status_code=404,
        headers={"Server": "Python/3.10 aiohttp/3.9.0"},
    )
    requests_mock.get(
        "http://localhost:8000/static/../../../../../../etc/hosts",
        text="127.0.0.1	localhost",
        status_code=200,
        headers={"Server": "Python/3.10 aiohttp/3.9.0"},
    )
    target = definitions.Target("http", "localhost", 8000)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "AIOHTTP Path Traversal"
    assert (
        vulnerability.technical_detail
        == "http://localhost:8000/ is vulnerable to CVE-2024-23334, AIOHTTP Path Traversal"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202423334_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-23334 unit test: case when target is safe."""
    exploit_instance = cve_2024_23334.CVE202423334Exploit()
    requests_mock.get(
        re.compile("http://localhost:8000/"),
        text="404 not found",
        status_code=404,
        headers={"Server": "Python/3.10 aiohttp/3.9.0"},
    )
    target = definitions.Target("http", "localhost", 8000)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
