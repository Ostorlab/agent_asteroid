"""Unit tests for VHD PTZ Camera Authentication Bypass: CVE-2024-8956"""

import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2024_8956


def testVHDPTZAuthBypass_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is vulnerable (firmware 6.3.32)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        text='devname="ptzoptics" devtype="VX630A" versioninfo="SOC v6.3.32 - ARM 6.3.51THI" serial_num="r1j04260027" device_model="F53.HI"',
        status_code=200,
    )

    exploit_instance = cve_2024_8956.VHDPTZAuthBypassExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)
    vulnerability = vulnerabilities[0]

    assert len(vulnerabilities) == 1

    assert vulnerability.entry.title == "ValueHD PTZ Camera Authentication Bypass"
    assert vulnerability.entry.references == {
        "nvd.nist.gov": "https://nvd.nist.gov/vuln/detail/CVE-2024-8956"
    }
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testVHDPTZAuthBypass_whenGetSystemConfIsAccessible_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is safe (firmware 6.3.40) but Get System Conf Is Accessible."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_device_conf",
        text='devname="ptzoptics" devtype="VX630A" versioninfo="SOC v6.3.40 - ARM 6.3.51THI" serial_num="r1j04260027" device_model="F53.HI"',
        status_code=200,
    )

    exploit_instance = cve_2024_8956.VHDPTZAuthBypassExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 1


def testVHDPTZAuthBypass_whenAuthRequired_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when authentication is required (not vulnerable)."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi",
        status_code=401,
    )
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_system_conf",
        status_code=401,
    )
    exploit_instance = cve_2024_8956.VHDPTZAuthBypassExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testVHDPTZAuthBypass_requestException_handlingErrorLogged(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: handle RequestException in auth bypass detection."""
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi",
        exc=requests_exceptions.RequestException("Simulated connection error"),
    )
    requests_mock.get(
        "http://localhost:80/cgi-bin/param.cgi?get_system_conf",
        exc=requests_exceptions.RequestException("Simulated connection error"),
    )

    exploit_instance = cve_2024_8956.VHDPTZAuthBypassExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
