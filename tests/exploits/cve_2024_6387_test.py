from unittest import mock
from unittest.mock import patch
from agent import definitions
from agent.exploits import cve_2024_6387


def create_target(scheme: str, domain: str, port: int) -> definitions.Target:
    """Helper function to create a Target instance.

    Args:
        scheme: The URL scheme.
        domain: The domain or IP address.
        port: The port number.

    Returns:
        A Target instance.
    """
    return definitions.Target(scheme, domain, port)


@patch("agent.exploits.cve_2024_6387._get_ssh_banner")
def test_open_ssh_exploit_when_vulnerable_report_finding(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit against a known vulnerable target."""
    exploit_instance = cve_2024_6387.OpenSSHExploit()

    # Mock the banner for a vulnerable version
    mock_get_banner.return_value = "SSH-2.0-OpenSSH_8.5p1"

    target = create_target("ssh", "dummy_vulnerable_ip", 22)

    accept = exploit_instance.accept(target)
    assert (
        accept is True
    ), f"Expected vulnerability detection for IP address {target.origin}, but accept returned False"


@patch("agent.exploits.cve_2024_6387._get_ssh_banner")
def test_open_ssh_exploit_when_safe_report_nothing(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit against a known safe target."""
    exploit_instance = cve_2024_6387.OpenSSHExploit()

    # Mock the banner for a safe version
    mock_get_banner.return_value = "SSH-2.0-OpenSSH_7.6p1"

    target = create_target("ssh", "dummy_safe_ip", 2220)

    accept = exploit_instance.accept(target)
    assert accept is False, (
        f"Expected no vulnerability detection for IP address {target.origin}, but accept returned "
        f"True"
    )

    vulnerabilities = exploit_instance.check(target)
    assert (
        len(vulnerabilities) == 0
    ), f"Expected no vulnerabilities for IP address {target.origin}, but found {len(vulnerabilities)}"
