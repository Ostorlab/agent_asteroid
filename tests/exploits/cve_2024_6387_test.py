import re
import logging

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_6387

logger = logging.getLogger(__name__)


def create_target(scheme: str, domain: str, port: int) -> definitions.Target:
    """Helper function to create a Target instance.

    Args:
        scheme: The URL scheme.
        domain: The domain or IP address.
        port: The port number.

    Returns:
        A Target instance.
    """
    return definitions.Target(scheme, domain, port)


def testOpenSSHExploit_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Tests the exploit against a known vulnerable target."""
    exploit_instance = cve_2024_6387.OpenSSHExploit()

    vulnerable_domains = ["129.114.63.103"]

    for domain in vulnerable_domains:
        # Mocking the HTTP response from the SSH server
        requests_mock.get(
            re.compile(f"{domain}"),
            text="<html><title>OpenSSH</title></html>",
            status_code=200,
            headers={"Server": "SSH-2.0-OpenSSH_8.5p1"},
        )

        target = create_target("ssh", domain, 22)

        accept = exploit_instance.accept(target)
        assert (
            accept is True
        ), f"Expected vulnerability detection for IP address {domain}, but accept returned False"


def testOpenSSHExploit_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Tests the exploit against a known safe target."""
    exploit_instance = cve_2024_6387.OpenSSHExploit()

    safe_domains = ["66.248.197.249"]

    for domain in safe_domains:
        requests_mock.get(
            re.compile(f"{domain}"),
            text="<html><title>OpenSSH</title></html>",
            status_code=200,
            headers={"Server": "SSH-2.0-OpenSSH_7.6p1"},
        )

        target = create_target("ssh", domain, 2220)

        accept = exploit_instance.accept(target)
        assert (
            accept is False
        ), f"Expected no vulnerability detection for domain {domain}, but accept returned True"

        vulnerabilities = exploit_instance.check(target)
        assert (
            len(vulnerabilities) == 0
        ), f"Expected no vulnerabilities for domain {domain}, but found {len(vulnerabilities)}"
