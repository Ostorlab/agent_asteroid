"""Unit tests for Agent Asteroid: CVE-2023-43770"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_43770


def testCVE202343770_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-43770 unit test: case when target is vulnerable."""
    exploit_instance = cve_2023_43770.CVE202343770Exploit()
    requests_mock.get(
        re.compile("https://localhost:443/"),
        text='<html><head><meta HTTP-EQUIV="REFRESH" content="0; url=/mail/"></head></html>',
        status_code=200,
    )
    requests_mock.get(
        re.compile("https://localhost:443/mail/"),
        text="""rcmail.set_env({"task":"login","standard_windows":false,"locale":"en_US","devel_mode":null,
        "rcversion":10406,"cookie_domain":"","cookie_path":"/","cookie_secure":true,"dark_mode_support":true,
        "skin":"elastic","blankpage":"skins/elastic/watermark.html","refresh_interval":60,"session_lifetime":600,
        "action":"","comm_path":"/mail/?_task=login","compose_extwin":false,"date_format":"yy-mm-dd",
        "date_format_localized":"YYYY-MM-DD","request_token":"abcd"});""",
        status_code=200,
    )
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Roundcube Webmail Persistent Cross-Site Scripting (XSS) Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "https://localhost:443/ is vulnerable to CVE-2023-43770, Roundcube "
        "Webmail Persistent Cross-Site Scripting (XSS) Vulnerability"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202343770_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-43770 unit test: case when target is safe."""
    exploit_instance = cve_2023_43770.CVE202343770Exploit()
    requests_mock.get(
        re.compile("https://localhost:443/"),
        text='<html><head><meta HTTP-EQUIV="REFRESH" content="0; url=/mail/"></head></html>',
        status_code=200,
    )
    requests_mock.get(
        re.compile("https://localhost:443/mail/"),
        text="""rcmail.set_env({"task":"login","standard_windows":false,"locale":"en_US","devel_mode":null,
            "rcversion":10605,"cookie_domain":"","cookie_path":"/","cookie_secure":true,"dark_mode_support":true,
            "skin":"elastic","blankpage":"skins/elastic/watermark.html","refresh_interval":60,"session_lifetime":600,
            "action":"","comm_path":"/mail/?_task=login","compose_extwin":false,"date_format":"yy-mm-dd",
            "date_format_localized":"YYYY-MM-DD","request_token":"abcd"});""",
        status_code=200,
    )
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
