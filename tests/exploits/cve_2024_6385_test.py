"""Unit tests for Agent Asteroid: CVE-2024-6385"""

import requests_mock as req_mock


from agent import definitions
from agent.exploits import cve_2024_6385


def testCVE20246385_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit report finding when version is vulnerable."""
    target = definitions.Target("https", "localhost", 8080)
    requests_mock.get(
        target.url + "users/sign_in",
        status_code=200,
        text="<title>Sign in · GitLab</title>"
        '<link rel="preload" href="'
        '/assets/application-deeef002fddf6f74357454676107b4ec50cf51f70394f2368f404683f1884132.css"'
        ' as="style" type="text/css">',
    )

    exploit_instance = cve_2024_6385.CVE20242879Exploit()
    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]

    assert vulnerability.entry.title == "GitLab Authentication Bypass Vulnerability."
    assert (
        vulnerability.technical_detail
        == "https://localhost:8080/ is vulnerable to CVE-2024-6385, GitLab Authentication Bypass Vulnerability."
    )
    assert vulnerability.risk_rating.name == "POTENTIALLY"
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20246385_whenNotVulnerable_reportNoFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit don't report finding."""
    target = definitions.Target("https", "localhost", 8080)
    requests_mock.get(
        target.url + "users/sign_in",
        status_code=200,
        text="<title>Sign in · GitLab</title>"
        '<link rel="preload" href="'
        '/assets/application-deeef002fKKIO6f74357454676107b4ec50cf51f70394f2368f404683f1884132.css"'
        ' as="style" type="text/css">',
    )

    exploit_instance = cve_2024_6385.CVE20242879Exploit()
    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
