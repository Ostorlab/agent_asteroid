import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_6386


def testCVE20246386_whenVersionUpTo4612_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-6386 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/sitepress-multilingual-cms/readme.txt",
        text="""=== SitePress Multilingual CMS ===\nStable tag: 4.6.12\n""",
        status_code=200,
    )
    exploit_instance = cve_2024_6386.CVE20246386Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "WPML Multilingual CMS Authenticated Contributor+ Remote Code Execution (RCE) via Twig Server-Side Template Injection (SSTI)"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-6386, "
        "WPML Multilingual CMS Authenticated Contributor+ Remote Code Execution (RCE) via Twig Server-Side Template Injection (SSTI)"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20246386_whenVersionBetween401And4612_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-6386 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/sitepress-multilingual-cms/readme.txt",
        text="""=== SitePress Multilingual CMS ===\nStable tag: 4.1.0\n""",
        status_code=200,
    )
    exploit_instance = cve_2024_6386.CVE20246386Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "WPML Multilingual CMS Authenticated Contributor+ Remote Code Execution (RCE) via Twig Server-Side Template Injection (SSTI)"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-6386, "
        "WPML Multilingual CMS Authenticated Contributor+ Remote Code Execution (RCE) via Twig Server-Side Template Injection (SSTI)"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20246386_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-6386 unit test: case when target is safe."""
    exploit_instance = cve_2024_6386.CVE20246386Exploit()
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/sitepress-multilingual-cms/readme.txt",
        text="""=== SitePress Multilingual CMS ===\nStable tag: 4.6.13\n""",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
