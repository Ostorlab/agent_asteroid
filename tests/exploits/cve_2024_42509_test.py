"""Unit tests for Agent Asteroid: CVE-2024-42509"""

from unittest import mock

from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2024_42509


def testCVE202442509_whenVulnerable_reportFinding(mocker: plugin.MockerFixture) -> None:
    """CVE-2024-42509 unit test: case when target is vulnerable."""

    vulnerable_version = "8.10.0.13"
    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        f"ArubaOS (MODEL: AP-325), Version {vulnerable_version}"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_42509.CVE202442509Exploit()

    target = definitions.Target("udp", "192.168.1.2", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == cve_2024_42509.VULNERABILITY_TITLE
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.technical_detail == (
        f"HPE Aruba Networking Access Points device at udp://192.168.1.2:161/ is running a vulnerable version: {vulnerable_version}. "
        "Immediate action is required."
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202442509_whenSafe_reportNothing(mocker: plugin.MockerFixture) -> None:
    """CVE-2024-42509 unit test: case when target is not vulnerable."""

    safe_version = "10.4.1.5"
    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        f"ArubaOS (MODEL: AP-325), Version {safe_version}"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_42509.CVE202442509Exploit()

    target = definitions.Target("udp", "192.168.1.2", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202442509_whenVersionNotFound_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-42509 unit test: case when version cannot be determined."""

    mock_var_bind = mock.MagicMock()
    mock_var_bind.__getitem__.return_value.prettyPrint.return_value = (
        "Unexpected response"
    )

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (False, False, False, [mock_var_bind])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)

    exploit_instance = cve_2024_42509.CVE202442509Exploit()

    target = definitions.Target("udp", "192.168.1.2", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202442509_whenSNMPError_handleGracefully(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-42509 unit test: case when SNMP returns an error."""

    mock_iterator = mock.MagicMock()
    mock_iterator.__next__.return_value = (True, False, False, [])
    mocker.patch("pysnmp.hlapi.getCmd", return_value=mock_iterator)
    mock_logging = mocker.patch("logging.error")

    exploit_instance = cve_2024_42509.CVE202442509Exploit()

    target = definitions.Target("udp", "192.168.1.2", 161)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
    mock_logging.assert_called_with("SNMP error_indication: %s", True)
