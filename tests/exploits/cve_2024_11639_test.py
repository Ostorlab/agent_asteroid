"""Unit tests for Agent Asteroid: CVE-2024-11639"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_11639


def testCVE202411639_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11639 unit test: case when target is vulnerable."""
    vulnerable_date = "Fri, 03 Dec 2021 19:45:52 GMT"
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Ivanti(R) Cloud Services Appliance</title>",
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/allowed/ivanti-logo.png",
        headers={"Last-Modified": vulnerable_date},
        content=b"PNG",
        status_code=200,
    )
    exploit_instance = cve_2024_11639.CVE202411639Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title == "Authentication Bypass in Ivanti CSA Admin Console"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-11639, "
        "Authentication Bypass in Ivanti CSA Admin Console"
    )


def testCVE202411639_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11639 unit test: case when target is safe."""
    safe_date = "Fri, 11 Dec 2024 19:45:52 GMT"
    requests_mock.get(
        "http://localhost:80/allowed/ivanti-logo.png",
        headers={"Last-Modified": safe_date},
        content=b"PNG",
        status_code=200,
    )
    exploit_instance = cve_2024_11639.CVE202411639Exploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202411639_whenInvalidIfModifiedSinceFormat_doesNotCrash(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11639 unit test: case when Last-Modified header has invalid format."""
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Ivanti(R) Cloud Services Appliance</title>",
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/allowed/ivanti-logo.png",
        headers={"Last-Modified": "Invalid Date Format"},
        content=b"PNG",
        status_code=200,
    )
    exploit_instance = cve_2024_11639.CVE202411639Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202411639_whenRequestException_doesNotCrash(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11639 unit test: case when a request exception occurs."""
    requests_mock.get(
        "http://localhost:80/allowed/ivanti-logo.png",
        exc=requests.RequestException("Connection error"),
    )
    exploit_instance = cve_2024_11639.CVE202411639Exploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202411639_whenNotIvantiCSA_doesNotAccept(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11639 unit test: case when target is not Ivanti CSA."""
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Not Ivanti CSA</title>",
        status_code=200,
    )
    exploit_instance = cve_2024_11639.CVE202411639Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False
