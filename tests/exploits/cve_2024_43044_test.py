"""Unit tests for Agent Asteroid: CVE_2024_43044"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_43044


def testCVE202443044_whenVulnerableLTS_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_43044 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        headers={"X-Jenkins": "2.440.2"},
        text="""
        <head resURL="/static/f523dc0b" data-rooturl="" 
        data-resurl="/static/f523dc0b" data-imagesurl="/static/f523dc0b/images">
        <title>Sign in [Jenkins]</title>
        <meta name="ROBOTS" content="NOFOLLOW">
        """,
        status_code=200,
    )
    exploit_instance = cve_2024_43044.CVE202443044Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "JENKINS ARBITRARY FILE READ TO RCE"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-43044, "
        "JENKINS ARBITRARY FILE READ TO RCE"
    )


def testCVE202443044_whenVulnerableNonLTS_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_43044 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        headers={"X-Jenkins": "2.470"},
        text="""
        <head resURL="/static/f523dc0b" data-rooturl="" 
        data-resurl="/static/f523dc0b" data-imagesurl="/static/f523dc0b/images">
        <title>Sign in [Jenkins]</title>
        <meta name="ROBOTS" content="NOFOLLOW">
        """,
        status_code=200,
    )
    exploit_instance = cve_2024_43044.CVE202443044Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "JENKINS ARBITRARY FILE READ TO RCE"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-43044, "
        "JENKINS ARBITRARY FILE READ TO RCE"
    )


def testCVE202443044_whenSafeLTS_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_43044 unit test: case when target is safe."""
    exploit_instance = cve_2024_43044.CVE202443044Exploit()
    requests_mock.get(
        "http://localhost:80/",
        headers={"X-Jenkins": "2.462.1"},
        text="""
        <head resURL="/static/f523dc0b" data-rooturl="" 
        data-resurl="/static/f523dc0b" data-imagesurl="/static/f523dc0b/images">
        <title>Sign in [Jenkins]</title>
        <meta name="ROBOTS" content="NOFOLLOW">
        """,
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202443044_whenSafeNonLTS_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_43044 unit test: case when target is safe."""
    exploit_instance = cve_2024_43044.CVE202443044Exploit()
    requests_mock.get(
        "http://localhost:80/",
        headers={"X-Jenkins": "2.471"},
        text="""
        <head resURL="/static/f523dc0b" data-rooturl="" 
        data-resurl="/static/f523dc0b" data-imagesurl="/static/f523dc0b/images">
        <title>Sign in [Jenkins]</title>
        <meta name="ROBOTS" content="NOFOLLOW">
        """,
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202443044_whenNoHeader_doesNotCrash(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_43044 unit test: case when target is safe."""
    exploit_instance = cve_2024_43044.CVE202443044Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text="""
        <head resURL="/static/f523dc0b" data-rooturl="" 
        data-resurl="/static/f523dc0b" data-imagesurl="/static/f523dc0b/images">
        <title>Sign in [Jenkins]</title>
        <meta name="ROBOTS" content="NOFOLLOW">
        """,
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
