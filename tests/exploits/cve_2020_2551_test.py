"""Unit tests for CVE-2020-2551"""

from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2020_2551


def testCVE20202551_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for CVE-2020-2551, case when target is vulnerable."""

    def side_effect(*args):  # type: ignore[no-untyped-def]
        if args[0] == 1024:
            return (
                b"GIOP\x01\x02\x00\x04\x00\x00\x03\xd4\x00\x00\x00\x02\x00\x00\x00\x02\x00\x00\x00"
                b"3IDL:weblogic/corba/cos/naming/NamingContextAny:1.0\x00\x00\x00\x00\x00\x01\x00"
                b"\x00\x00\x00\x00\x00\x03\x88\x00\x01\x02\x00\x00\x00\x00\x0e192.168.16.98\x00"
                b"\x00a\x00\x00\x00t\x00BEA\x08\x01\x03\x00\x00\x00\x00\x06PDAIS\x00\x00\x00\x00"
                b"\x00\x00\x00\x00\x00\x003IDL:weblogic/corba/cos/naming/NamingContextAny:1"
            )
        elif args[0] == 2048:
            raise TimeoutError

    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2020_2551.CVE20202551Exploit()
    mocker.patch("socket.socket.connect")
    mocker.patch("socket.socket.sendall")
    mocker.patch("socket.socket.recv", side_effect=side_effect)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert accept is True
    assert vulnerability.entry.title == "Unauthenticated RCE In Oracle WebLogic"
    assert vulnerability.risk_rating.name == "CRITICAL"
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:80/ is vulnerable to CVE-2020-2551, Unauthenticated RCE "
        "In Oracle WebLogic"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20202551_whenSafe_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for CVE-2020-2551, case when target is safe."""

    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2020_2551.CVE20202551Exploit()
    mocker.patch("socket.socket.connect")
    mocker.patch("socket.socket.sendall")
    mocker.patch("socket.socket.recv", return_value=b"AA==")

    accept = exploit_instance.accept(target)

    assert accept is False
