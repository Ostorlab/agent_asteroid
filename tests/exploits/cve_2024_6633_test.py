"""Unit tests for Agent Asteroid: CVE-2024-6633"""

import socket
from unittest import mock
import jaydebeapi  # type: ignore

from agent import definitions
from agent.exploits import cve_2024_6633


def testAccept_whenPortIsOpen_reportTrue() -> None:
    """Test the accept method when the target port is open."""
    with mock.patch("agent.exploits.cve_2024_6633._is_port_open", return_value=True):
        exploit_instance = cve_2024_6633.CVE20246633Exploit()
        target = definitions.Target("tcp", "192.168.1.1", 4406)
        assert exploit_instance.accept(target) is True


def testAccept_whenPortIsClosed_reportFalse() -> None:
    """Test the accept method when the target port is closed."""
    with mock.patch("agent.exploits.cve_2024_6633._is_port_open", return_value=False):
        exploit_instance = cve_2024_6633.CVE20246633Exploit()
        target = definitions.Target("tcp", "192.168.1.1", 4406)
        assert exploit_instance.accept(target) is False


def testCheck_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_6633._detect_vulnerability", return_value=True
    ):
        exploit_instance = cve_2024_6633.CVE20246633Exploit()
        target = definitions.Target("tcp", "192.168.1.1", 4406)
        vulnerabilities = exploit_instance.check(target)
        assert len(vulnerabilities) == 1
        assert (
            vulnerabilities[0].entry.title
            == "Default Credentials in Fortra FileCatalyst Workflow HSQLDB"
        )


def testCheck_whenNotVulnerable_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_6633._detect_vulnerability", return_value=False
    ):
        exploit_instance = cve_2024_6633.CVE20246633Exploit()
        target = definitions.Target("tcp", "192.168.1.1", 4406)
        vulnerabilities = exploit_instance.check(target)
        assert len(vulnerabilities) == 0


@mock.patch("agent.exploits.cve_2024_6633.socket.socket")
def testIsPortOpen_whenPortIsOpen_reportTrue(mock_socket: mock.MagicMock) -> None:
    """Test _is_port_open when the port is open."""
    mock_socket_instance = mock_socket.return_value
    mock_socket_instance.connect_ex.return_value = 0  # Simulate port being open

    result = cve_2024_6633._is_port_open("192.168.1.1", 4406)

    assert (
        result is True
    ), f"Expected True, but got {result}. The port should be reported as open."


@mock.patch("agent.exploits.cve_2024_6633.socket.socket")
def testIsPortOpen_whenPortIsClosed_reportFalse(mock_socket: mock.MagicMock) -> None:
    """Test _is_port_open when the port is closed."""
    mock_socket_instance = mock_socket.return_value
    mock_socket_instance.connect_ex.return_value = 1  # Simulate port being closed

    result = cve_2024_6633._is_port_open("192.168.1.1", 4406)

    assert (
        result is False
    ), f"Expected False, but got {result}. The port should be reported as closed."


@mock.patch("agent.exploits.cve_2024_6633.jaydebeapi.connect")
def testAttemptDbConnection_whenSuccessful_reportTrue(
    mock_connect: mock.MagicMock,
) -> None:
    """Test _attempt_db_connection when the connection is successful."""
    mock_conn = mock.MagicMock()
    mock_connect.return_value = mock_conn

    result = cve_2024_6633._attempt_db_connection("192.168.1.1", 9001)

    assert result is True
    mock_conn.close.assert_called_once()


@mock.patch("agent.exploits.cve_2024_6633.jaydebeapi.connect")
@mock.patch("agent.exploits.cve_2024_6633.logger")
def testAttemptDbConnection_whenConnectionFails_reportFalse(
    mock_logger: mock.MagicMock,
    mock_connect: mock.MagicMock,
) -> None:
    """Test _attempt_db_connection when the connection fails due to DatabaseError."""
    mock_connect.side_effect = jaydebeapi.DatabaseError("Test DB error")

    result = cve_2024_6633._attempt_db_connection("192.168.1.1", 9001)

    assert result is False, "Expected False when connection fails"
    mock_logger.error.assert_called_once_with(
        "Database error occurred while connecting: %s", mock.ANY
    )
    error_message = mock_logger.error.call_args[0][1]
    assert "Test DB error" in str(
        error_message
    ), "Error message should contain the specific database error"


@mock.patch("agent.exploits.cve_2024_6633.jaydebeapi.connect")
@mock.patch("agent.exploits.cve_2024_6633.logger")
def testAttemptDbConnection_whenJavaExceptionOccurs_reportFalse(
    mock_logger: mock.MagicMock,
    mock_connect: mock.MagicMock,
) -> None:
    """Test _attempt_db_connection when a Java exception occurs."""
    mock_connect.side_effect = jaydebeapi.DatabaseError(
        "java.sql.SQLTransientConnectionException"
    )

    result = cve_2024_6633._attempt_db_connection("192.168.1.1", 9001)

    assert result is False, "Expected False when a Java exception occurs"
    mock_logger.error.assert_called_once_with(
        "Database error occurred while connecting: %s", mock.ANY
    )
    error_message = mock_logger.error.call_args[0][1]
    assert "java.sql.SQLTransientConnectionException" in str(
        error_message
    ), "Error message should contain the specific Java exception"


@mock.patch("agent.exploits.cve_2024_6633.socket.socket")
def testIsPortOpen_whenSocketErrorOccurs_reportFalse(
    mock_socket: mock.MagicMock,
) -> None:
    """Test _is_port_open when a socket.error occurs."""
    mock_socket_instance = mock_socket.return_value
    mock_socket_instance.connect_ex.side_effect = socket.error("Test socket error")

    result = cve_2024_6633._is_port_open("192.168.1.1", 4406)

    assert (
        result is False
    ), f"Expected False, but got {result}. The function should return False when a socket.error occurs."


def testDetectVulnerability_whenPortOpenAndVulnerable_reportTrue() -> None:
    """Test _detect_vulnerability when the port is open and the target is vulnerable."""
    with mock.patch(
        "agent.exploits.cve_2024_6633._is_port_open", return_value=True
    ), mock.patch(
        "agent.exploits.cve_2024_6633._attempt_db_connection", return_value=True
    ):
        result = cve_2024_6633._detect_vulnerability("192.168.1.1")

        assert (
            result is True
        ), f"Expected True, but got {result}. The function should return True when the target is vulnerable."


def testDetectVulnerability_whenPortOpenButNotVulnerable_reportFalse() -> None:
    """Test _detect_vulnerability when the port is open but the target is not vulnerable."""
    with mock.patch(
        "agent.exploits.cve_2024_6633._is_port_open", return_value=True
    ), mock.patch(
        "agent.exploits.cve_2024_6633._attempt_db_connection", return_value=False
    ):
        result = cve_2024_6633._detect_vulnerability("192.168.1.1")

        assert (
            result is False
        ), f"Expected False, but got {result}. The function should return False when the target is not vulnerable."


def testDetectVulnerability_whenPortClosed_reportFalse() -> None:
    """Test _detect_vulnerability when the port is closed."""
    with mock.patch("agent.exploits.cve_2024_6633._is_port_open", return_value=False):
        result = cve_2024_6633._detect_vulnerability("192.168.1.1")

        assert (
            result is False
        ), f"Expected False, but got {result}. The function should return False when the port is closed."
