import re
import requests_mock as req_mock
import platform

from agent import definitions
from agent.exploits import cve_2022_24816


def testGeoServerWPSExploit_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """GeoServer WPS RCE unit test: case when target is vulnerable."""
    exploit_instance = cve_2022_24816.GeoServerWPSExploit()

    requests_mock.get(
        re.compile("http://localhost:8085/geoserver"),
        status_code=200,
        headers={"Server": "GeoServer"},
    )

    malicious_response = f"test_command_execution\n"
    requests_mock.post(
        "http://localhost:8085/geoserver/wms",
        text=malicious_response,
        status_code=200,
    )

    target = definitions.Target("http", "localhost", 8085, "/geoserver")

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "GeoServer WPS Remote Code Execution"
    assert (
        vulnerability.technical_detail
        == "http://localhost:8085/geoserver is vulnerable to CVE-2022-24816, GeoServer WPS Remote Code Execution"
    )


def testGeoServerWPSExploit_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """GeoServer WPS RCE unit test: case when target is safe."""
    exploit_instance = cve_2022_24816.GeoServerWPSExploit()

    requests_mock.get(
        re.compile("http://localhost:8085/geoserver"),
        status_code=404,
        headers={"Server": "Apache/2.4.41"},
    )

    requests_mock.post(
        "http://localhost:8085/geoserver/wms",
        status_code=200,
        text="",
    )

    target = definitions.Target("http", "localhost", 8085, "/geoserver")

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
