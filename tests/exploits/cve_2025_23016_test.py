"""Unit tests for CVE-2025-23016"""

import socket
from unittest import mock

from agent import definitions
from agent.exploits import cve_2025_23016


def testAccept_whenFastcgiServiceDetected_shouldReturnTrue(
    mock_socket: mock.MagicMock,
) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.recv.return_value = b"\x01\x03\x00\x01\x00\x08\x00\x00"
    assert exp.accept(target) is True


def testAccept_whenSocketTimeout_shouldReturnFalse(mock_socket: mock.MagicMock) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.recv.side_effect = socket.timeout()
    assert exp.accept(target) is False


def testAccept_whenConnectionError_shouldReturnFalse(
    mock_socket: mock.MagicMock,
) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.connect.side_effect = ConnectionRefusedError()
    assert exp.accept(target) is False


def testCheck_whenExploitationSucceeds_shouldReportVulnerability(
    mock_socket: mock.MagicMock,
) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.recv.side_effect = [
        b"Some data",
        b"Some other data",
        cve_2025_23016.VERIFICATION_CONTENT.encode(),
        b"",
    ]
    vulns = exp.check(target)
    assert len(vulns) == 1


def testCheck_whenExploitationFails_shouldReportNothing(
    mock_socket: mock.MagicMock,
) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.recv.return_value = b"No match here"
    vulns = exp.check(target)
    assert len(vulns) == 0


def test_check_when_socket_error_should_report_nothing(
    mock_socket: mock.MagicMock,
) -> None:
    target = definitions.Target(scheme="http", host="127.0.0.1", port=9000)
    exp = cve_2025_23016.FastCGIIntegerOverflowExploit()
    mock_socket.connect.side_effect = socket.error("Connection error")
    vulns = exp.check(target)
    assert len(vulns) == 0


def test_encode_param_when_small_values_should_encode_correctly() -> None:
    result = cve_2025_23016.encode_param(b"test", b"value")
    assert len(result) == 11  # 1+1+4+5
    assert result[0] == 4
    assert result[1] == 5


def test_encode_param_when_large_values_should_encode_correctly() -> None:
    name = b"x" * 200
    value = b"y" * 300
    result = cve_2025_23016.encode_param(name, value)
    assert len(result) == 508
    assert result[0] & 0x80 != 0
    assert result[4] & 0x80 != 0
