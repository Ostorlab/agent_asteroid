"""Unit tests for GoAnywhereDeserializationExploit: CVE-2025-10035"""

from unittest import mock
from agent.exploits import cve_2025_10035
from agent import definitions


def testCheck_WhenVulnerableVersion_ShouldReportVulnerability() -> None:
    """Test check method with a vulnerable GoAnywhere version."""
    exploit = cve_2025_10035.GoAnywhereDeserializationExploit()
    target = definitions.Target("https", "localhost", 443)
    mock_response = mock.Mock()
    mock_response.text = "GoAnywhere 7.7.0"
    mock_response.status_code = 200

    with (
        mock.patch.object(exploit.session, "get", return_value=mock_response),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_extract_version",
            return_value="7.7.0",
        ),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_is_goanywhere_response",
            return_value=True,
        ),
    ):
        vulns = exploit.check(target)

        assert len(vulns) == 1
        assert "7.7.0" in vulns[0].technical_detail


def testCheckWhen_NotVulnerableVersion_ShouldNotReportVulnerability() -> None:
    """Test check method with a non-vulnerable GoAnywhere version."""
    exploit = cve_2025_10035.GoAnywhereDeserializationExploit()
    target = definitions.Target("https", "localhost", 443)
    mock_response = mock.Mock()
    mock_response.text = "GoAnywhere 7.8.5"
    mock_response.status_code = 200

    with (
        mock.patch.object(exploit.session, "get", return_value=mock_response),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_extract_version",
            return_value="7.8.5",
        ),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_is_goanywhere_response",
            return_value=True,
        ),
    ):
        vulns = exploit.check(target)

        assert len(vulns) == 0


def testCheck_WhenInvalidVersion_ShouldNotReportVulnerability() -> None:
    """Test check method with an invalid version string."""
    exploit = cve_2025_10035.GoAnywhereDeserializationExploit()
    target = definitions.Target("https", "localhost", 443)
    mock_response = mock.Mock()
    mock_response.text = "GoAnywhere not.a.version"
    mock_response.status_code = 200

    with (
        mock.patch.object(exploit.session, "get", return_value=mock_response),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_extract_version",
            return_value="not.a.version",
        ),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_is_goanywhere_response",
            return_value=True,
        ),
    ):
        vulns = exploit.check(target)

        assert len(vulns) == 0


def testCheck_WhenNotGoAnywhereResponse_ShouldNotReportVulnerability() -> None:
    """Test check method with a response that is not GoAnywhere."""
    exploit = cve_2025_10035.GoAnywhereDeserializationExploit()
    target = definitions.Target("https", "localhost", 443)
    mock_response = mock.Mock()
    mock_response.text = "Some other product"
    mock_response.status_code = 200

    with (
        mock.patch.object(exploit.session, "get", return_value=mock_response),
        mock.patch.object(
            cve_2025_10035.GoAnywhereDeserializationExploit,
            "_is_goanywhere_response",
            return_value=False,
        ),
    ):
        vulns = exploit.check(target)

        assert len(vulns) == 0
