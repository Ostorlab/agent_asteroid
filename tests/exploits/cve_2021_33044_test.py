"""Unit tests for Agent Asteroid: CVE-2021-33044"""

import requests_mock as req_mock
from agent import definitions
from agent.exploits import cve_2021_33044


def testCVE202133044_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit report finding when target is vulnerable."""
    target = definitions.Target("http", "localhost", 8080)

    # Ensure that the URL in the mock matches what is requested in accept method.
    requests_mock.get(
        target.url,
        status_code=200,
        text="""<html><head><script type="text/javascript" 
        src="jsBase/lib/jquery.js?version=@WebVersion@"></script></head></html>""",
    )
    requests_mock.post(
        target.url + "RPC2_Login",
        status_code=200,
        json={
            "id": 1,
            "params": {"keepAliveInterval": 60},
            "result": True,
            "session": 546584646,
        },
    )

    exploit_instance = cve_2021_33044.CVE202133044Exploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0


def testCVE202133044_whenNotVulnerable_reportNoFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit does not report finding when target is not vulnerable."""
    target = definitions.Target("https", "localhost", 8080)

    requests_mock.get(
        target.url,
        status_code=200,
        json="""<html><head><title>Test</title></head></html>""",
    )

    requests_mock.post(
        target.url + "RPC2_Login",
        status_code=200,
        json={"id": 1, "result": False},
    )

    exploit_instance = cve_2021_33044.CVE202133044Exploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202133044_whenResponseNone_reportsNoFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit does not report finding when response is None."""
    target = definitions.Target("https", "localhost", 8080)

    requests_mock.get(
        target.url,
        status_code=200,
        text="""<html><head><script type="text/javascript" 
        src="jsBase/lib/jquery.js?version=@WebVersion@"></script></head></html>""",
    )
    requests_mock.post(
        target.url + "RPC2_Login",
        status_code=200,
        json=None,
    )

    exploit_instance = cve_2021_33044.CVE202133044Exploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202133044_whenInvalidJson_reportsNoFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit does not report finding when the response is invalid JSON."""
    target = definitions.Target("http", "localhost", 8080)

    requests_mock.get(
        target.url,
        status_code=200,
        text="""<html><head><script type="text/javascript" 
        src="jsBase/lib/jquery.js?version=@WebVersion@"></script></head></html>""",
    )
    requests_mock.post(
        target.url + "RPC2_Login",
        status_code=200,
        text="Not a JSON response",
    )

    exploit_instance = cve_2021_33044.CVE202133044Exploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
