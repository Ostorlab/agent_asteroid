"""Unit tests for Agent Asteriod: CVE-2014_0780."""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2014_0780

DEPTH = 10


def testCVE20140780_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that the exploit reports findings when the application is vulnerable."""
    exploit_instance = cve_2014_0780.CVE20140780Exploit()
    url = "http://8.8.8.8:80"
    levels = "../" * DEPTH
    requests_mock.get(
        url + f"/{levels}boot.ini",
        status_code=200,
        content=b"Sending file",
    )
    requests_mock.get(
        url + f"/{levels}etc/passwd",
        status_code=200,
        content=b"Sending file",
    )
    target = definitions.Target("http", "8.8.8.8", 80)

    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Indusoft Web Studio Directory Traversal."
    assert (
        vulnerability.technical_detail
        == "http://8.8.8.8:80 is vulnerable to CVE-2014_0780, "
        "Indusoft Web Studio Directory Traversal."
    )


def testCVE20140780_whenNotVulnerable_noFindingsReported(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that there is no findings when the application is not vulnerable."""
    exploit_instance = cve_2014_0780.CVE20140780Exploit()
    requests_mock.get(
        f"http://8.8.8.8:80/{'../' * DEPTH}boot.ini",
        status_code=200,
        content=b"",
    )
    requests_mock.get(
        f"http://8.8.8.8:80/{'../' * DEPTH}etc/passwd",
        status_code=200,
        content=b"",
    )

    target = definitions.Target("http", "8.8.8.8", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
