from unittest import mock
from agent.exploits import cve_2024_47575
from agent import definitions
import typing


MockSendmsgSideEffect = typing.Callable[[mock.MagicMock, bytes], bytes]


@mock.patch("agent.exploits.cve_2024_47575._create_ssl_sock")
@mock.patch("agent.exploits.cve_2024_47575._sendmsg")
def testCVE202447575_whenVulnerable_reportFinding(
    mock_sendmsg: mock.MagicMock, mock_create_ssl_sock: mock.MagicMock
) -> None:
    """CVE-2024-47575 unit test: case when target is vulnerable."""

    mock_ssl_socket = mock.MagicMock()
    mock_create_ssl_sock.return_value = mock_ssl_socket

    def mock_sendmsg_side_effect(sock: mock.MagicMock, request: bytes) -> bytes:
        if b"get ip" in request:
            return b"0\r\nrequest=ip\r\nip=169.254.0.20\r\nmgmtid=1624783840\r\nregister_status=0\r\nmgmtport=443\r\ncur_tun_serial= \r\nkeepalive_interval=120\r\nchan_window_sz=32768\r\nsock_timeout=360\r\n\r\n\x00"
        elif b"get auth" in request:
            return b"0\r\nrequest=auth\r\nserialno=FMG-VM0A14000310\r\nuser=\r\npasswd=\r\nmgmtport=443\r\nkeepalive_interval=120\r\nchan_window_sz=32768\r\nsock_timeout=360\r\nmgmtid=1624783840\r\n\r\n\x00"
        elif b"get file_exchange" in request:
            return b"\naction=ack\r\nremoteid=178\r\nlocalid=27189\r\nchan_window_sz=32768\r\ndeflate=gzip\r\n\r\n\x00"
        return b""

    mock_sendmsg.side_effect = mock_sendmsg_side_effect

    exploit_instance = cve_2024_47575.CVE202447575Exploit()
    target = definitions.Target("http", "localhost", 80)
    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Missing Authentication for critical function in FortiManager"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-47575, "
        "Missing Authentication for critical function in FortiManager"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


@mock.patch("agent.exploits.cve_2024_47575._create_ssl_sock")
@mock.patch("agent.exploits.cve_2024_47575._sendmsg")
def testCVE202447575_whenSafe_reportNothing(
    mock_sendmsg: mock.MagicMock, mock_create_ssl_sock: mock.MagicMock
) -> None:
    """CVE-2024-47575 unit test: case when target is safe."""

    mock_ssl_socket = mock.MagicMock()
    mock_create_ssl_sock.return_value = mock_ssl_socket

    def mock_sendmsg_side_effect(sock: mock.MagicMock, request: bytes) -> bytes:
        if b"get ip" in request:
            return b"0\r\nrequest=ip\r\nip=169.254.0.20\r\nmgmtid=1624783840\r\nregister_status=0\r\nmgmtport=443\r\ncur_tun_serial= \r\nkeepalive_interval=120\r\nchan_window_sz=32768\r\nsock_timeout=360\r\n\r\n\x00"
        elif b"get auth" in request:
            return b"0\r\nrequest=auth\r\nserialno=FMG-VM0A14000310\r\nuser=\r\npasswd=\r\nmgmtport=443\r\nkeepalive_interval=120\r\nchan_window_sz=32768\r\nsock_timeout=360\r\nmgmtid=1624783840\r\n\r\n\x00"
        elif b"get file_exchange" in request:
            return b"\naction=error\r\nlocalid=0\r\nchan_window_sz=32768\r\ndeflate=gzip\r\n\r\n\x00"
        return b""

    mock_sendmsg.side_effect = mock_sendmsg_side_effect

    exploit_instance = cve_2024_47575.CVE202447575Exploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
