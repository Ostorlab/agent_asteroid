"""Unit tests for Agent Asteroid: CVE-2024-28986"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_28986


def create_mock_response(version: str) -> str:
    """Create a mock HTML response with the given version."""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <link rel="StyleSheet" href="/helpdesk/css/sharedStyles.css?v={version}" type="text/css" media="all"/>
        <link rel="StyleSheet" href="/helpdesk/css/clientStyles.css?v={version}" type="text/css" media="all"/>
        <script language="javascript" type="text/javascript" src="/helpdesk/js/xsrf/xsrf-interceptor.js?v={version}"></script>
        <link rel="StyleSheet" href="/helpdesk/css/clientInterface.css?v={version}" type="text/css" media="all"/>
    </head>
    <body>
        <!-- Page content -->
    </body>
    </html>
    """


def testCVE202428986_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-28986 unit test: case when target is vulnerable."""
    vulnerable_version = "12_8_3_0-HF1"
    mock_response = create_mock_response(vulnerable_version)
    requests_mock.get(
        "http://localhost:80/helpdesk/WebObjects/Helpdesk.woa",
        text=mock_response,
        status_code=200,
    )

    exploit_instance = cve_2024_28986.CVE202428986Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "SolarWinds Web Help Desk 12.8.3 - Java Deserialization RCE"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-28986, SolarWinds Web Help Desk 12.8.3 - Java Deserialization RCE"
    )


def testCVE202428986_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-28986 unit test: case when target is safe."""
    safe_version = "12_8_3_0-HF2"
    mock_response = create_mock_response(safe_version)
    requests_mock.get(
        "http://localhost:80/helpdesk/WebObjects/Helpdesk.woa",
        text=mock_response,
        status_code=200,
    )

    exploit_instance = cve_2024_28986.CVE202428986Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202428986_whenConnectionError_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-28986 unit test: case when a connection error occurs."""
    requests_mock.get(
        "http://localhost:80/helpdesk/WebObjects/Helpdesk.woa",
        exc=requests.exceptions.ConnectionError,
    )

    exploit_instance = cve_2024_28986.CVE202428986Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    assert accept is False

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202428986_whenTimeout_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-28986 unit test: case when a timeout occurs."""
    requests_mock.get(
        "http://localhost:80/helpdesk/WebObjects/Helpdesk.woa",
        exc=requests.exceptions.Timeout,
    )

    exploit_instance = cve_2024_28986.CVE202428986Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    assert accept is False

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
