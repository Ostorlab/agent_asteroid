"""Unit tests for Agent Asteroid: CVE-2025-22457"""

from unittest import mock

from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2025_22457


def testAccept_whenHttpsAndVulnerableVersion_shouldReturnTrue() -> None:
    """Test accept method with valid conditions."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    mock_response = mock.Mock()
    mock_response.text = '<PARAM NAME="ProductVersion" VALUE="22.7.2.4">'
    mock_response.status_code = 200
    mock_response.raise_for_status = mock.Mock()

    mock_session = mock.Mock()
    mock_session.get.return_value = mock_response

    with mock.patch.object(exploit, "session", mock_session):
        assert exploit.accept(target) is True


def testAccept_whenHttp_shouldReturnFalse() -> None:
    """Test accept method with HTTP target."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("http", "localhost", 80)

    assert exploit.accept(target) is False


def testCheck_whenTargetIsVulnerable_shouldReportVulnerability() -> None:
    """Test check method with vulnerable target."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    # Mock version check
    mock_version_response = mock.Mock()
    mock_version_response.text = '<PARAM NAME="ProductVersion" VALUE="22.7.2.4">'
    mock_version_response.status_code = 200
    mock_version_response.raise_for_status = mock.Mock()

    # Mock crash check
    mock_post_response = mock.Mock()
    mock_post_response.side_effect = requests_exceptions.ConnectionError()
    mock_get_response = mock.Mock()
    mock_get_response.status_code = 200

    with mock.patch.object(exploit, "session") as mock_session:
        mock_session.get.return_value = mock_version_response
        mock_session.post.side_effect = mock_post_response
        mock_session.get.side_effect = [mock_version_response, mock_get_response]

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 1
        assert vulnerabilities[0].entry.title == cve_2025_22457.VULNERABILITY_TITLE
        assert vulnerabilities[0].entry.risk_rating == cve_2025_22457.RISK_RATING
        assert vulnerabilities[0].vulnerability_location is not None
        assert vulnerabilities[0].dna is not None


def testCheck_whenVersionCheckFails_shouldNotReportVulnerability() -> None:
    """Test check method when version check fails."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    with mock.patch.object(exploit, "session") as mock_session:
        mock_session.get.side_effect = requests_exceptions.RequestException()

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenNoCrash_shouldNotReportVulnerability() -> None:
    """Test check method when target doesn't crash."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    # Mock version check
    mock_version_response = mock.Mock()
    mock_version_response.text = '<PARAM NAME="ProductVersion" VALUE="22.7.2.4">'
    mock_version_response.status_code = 200
    mock_version_response.raise_for_status = mock.Mock()

    # Mock crash check
    mock_post_response = mock.Mock()
    mock_post_response.status_code = 200
    mock_get_response = mock.Mock()
    mock_get_response.status_code = 200

    with mock.patch.object(exploit, "session") as mock_session:
        mock_session.get.return_value = mock_version_response
        mock_session.post.return_value = mock_post_response
        mock_session.get.side_effect = [mock_version_response, mock_get_response]

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenVersionNotVulnerable_shouldNotReportVulnerability() -> None:
    """Test check method when version is not vulnerable."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    mock_response = mock.Mock()
    mock_response.text = '<PARAM NAME="ProductVersion" VALUE="22.8.0.0">'
    mock_response.status_code = 200
    mock_response.raise_for_status = mock.Mock()

    with mock.patch.object(exploit, "session") as mock_session:
        mock_session.get.return_value = mock_response

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0
