"""Unit tests for Agent Asteroid: CVE-2025-22457"""

from unittest import mock

from agent import definitions
from agent.exploits import cve_2025_22457


def testAccept_whenHttpsAndVulnerableVersion_shouldReturnTrue() -> None:
    """Test accept method with valid conditions."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    # We need to mock the two helper functions used by accept()
    with (
        mock.patch(
            "agent.exploits.cve_2025_22457._grab_version_info"
        ) as mock_version_info,
        mock.patch(
            "agent.exploits.cve_2025_22457._is_vulnerable_version"
        ) as mock_is_vulnerable,
    ):
        # Set up the mocks to return values indicating vulnerability
        mock_version_info.return_value = "22.7.2.4"
        mock_is_vulnerable.return_value = True

        # Now the accept method should return True
        assert exploit.accept(target) is True


def testAccept_whenHttp_shouldReturnFalse() -> None:
    """Test accept method with HTTP target."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("http", "localhost", 80)

    # The implementation might be checking the protocol in accept()
    # Let's add a mock to be safe
    with mock.patch(
        "agent.exploits.cve_2025_22457._grab_version_info"
    ) as mock_version_info:
        mock_version_info.return_value = None
        assert exploit.accept(target) is False


def testCheck_whenTargetIsVulnerable_shouldReportVulnerability() -> None:
    """Test check method with vulnerable target."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    # Mock the helper functions used by the check method
    with (
        mock.patch(
            "agent.exploits.cve_2025_22457._grab_version_info"
        ) as mock_version_info,
        mock.patch(
            "agent.exploits.cve_2025_22457._is_vulnerable_version"
        ) as mock_is_vulnerable,
        mock.patch("agent.exploits.cve_2025_22457._check_crash") as mock_check_crash,
    ):
        # Configure the mocks to simulate a vulnerable target
        mock_version_info.return_value = "22.7.2.4"
        mock_is_vulnerable.return_value = True
        mock_check_crash.return_value = True

        # Execute the check method
        vulnerabilities = exploit.check(target)

        # Verify the results
        assert len(vulnerabilities) == 1
        assert vulnerabilities[0].entry.title == cve_2025_22457.VULNERABILITY_TITLE
        assert vulnerabilities[0].entry.risk_rating == cve_2025_22457.RISK_RATING
        assert vulnerabilities[0].vulnerability_location is not None
        assert vulnerabilities[0].dna is not None


def testCheck_whenVersionCheckFails_shouldNotReportVulnerability() -> None:
    """Test check method when version check fails."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    with mock.patch(
        "agent.exploits.cve_2025_22457._grab_version_info"
    ) as mock_version_info:
        mock_version_info.return_value = None

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenNoCrash_shouldNotReportVulnerability() -> None:
    """Test check method when target doesn't crash."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    with (
        mock.patch(
            "agent.exploits.cve_2025_22457._grab_version_info"
        ) as mock_version_info,
        mock.patch(
            "agent.exploits.cve_2025_22457._is_vulnerable_version"
        ) as mock_is_vulnerable,
        mock.patch("agent.exploits.cve_2025_22457._check_crash") as mock_check_crash,
    ):
        # Configure the mocks
        mock_version_info.return_value = "22.7.2.4"
        mock_is_vulnerable.return_value = True
        mock_check_crash.return_value = False

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenVersionNotVulnerable_shouldNotReportVulnerability() -> None:
    """Test check method when version is not vulnerable."""
    exploit = cve_2025_22457.IvantiConnectSecureExploit()
    target = definitions.Target("https", "localhost", 443)

    with (
        mock.patch(
            "agent.exploits.cve_2025_22457._grab_version_info"
        ) as mock_version_info,
        mock.patch(
            "agent.exploits.cve_2025_22457._is_vulnerable_version"
        ) as mock_is_vulnerable,
    ):
        # Configure the mocks
        mock_version_info.return_value = "22.8.0.0"
        mock_is_vulnerable.return_value = False

        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 0
