"""Unit tests for Agent Asteroid: CVE-2024-6745"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_6745


def testCVE20246745_whenVulnerable_reportFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-6745 unit test: case when target is vulnerable."""

    requests_mock.post(
        "http://example.com:80/adminauthenticate.php",
        status_code=200,
        text="<html><head><title>Mh-Ticket</title></head><body>"
        "<form action ='adminauthenticate.php' method='post'>"
        "<input type='text' name='username'>"
        "<input type='password' name='password'>"
        "<input type='submit' value='Login'>"
        "</form></body></html>",
    )

    exploit_instance = cve_2024_6745.SimpleTicketBookingSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(
        target
    ), "The target should be reported as vulnerable."


def testCVE20246745_whenSafe_reportNothing(requests_mock: req_mock.Mocker) -> None:
    """CVE-2024-6745 unit test: case when target is safe."""

    requests_mock.post(
        "http://example.com:80/adminauthenticate.php",
        status_code=200,
        text="<html><head><title>Mh-Ticket</title></head><body>"
        "<center><h1><b>Something went wrong please sign in again<b></h1></center>"
        "<br><br><center><table><tr><td>"
        '<a href="adminindex.php"><button style="background-color:black; border-color:black">'
        '<span style="color:white">Sign In ! &nbsp&nbspAgain</span></button></a>'
        "</td></tr></table></center></body></html>",
    )

    exploit_instance = cve_2024_6745.SimpleTicketBookingSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    assert not exploit_instance.accept(target), "The target should be reported as safe."
