"""Unit tests for Agent Asteroid: CVE-2024-20419"""

import requests_mock as req_mock
from agent import definitions
from agent.exploits import cve_2024_20419


def testCVE202420419_whenVulnerable_reportsFinding(
        requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-20419 unit test: case when the target is vulnerable."""

    # Mock the response for the initial GET request to check reachability
    requests_mock.get(
        "https://example.com:443/",
        text="<title>On-Prem License Workspace</title>",
        status_code=200,
    )
    requests_mock.get(
        "https://example.com:443/backend/settings/oauth_adfs?hostname=polar",
        headers={
            "Set-Cookie": "XSRF-TOKEN=fake_xsrf_token; _lic_engine_session=fake_session_cookie;"
        },
        status_code=200,
    )

    # Mock the response for the POST request to generate the auth token
    requests_mock.post(
        "https://example.com:443/backend/reset_password/generate_code",
        json={"auth_token": "fake_auth_token"},
        status_code=200,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    assert exploit_instance.accept(target) is True
    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
            vulnerability.entry.title
            == "Account Takeover in Cisco Smart Software Manager On-Prem"
    )
    assert (
            vulnerability.technical_detail
            == "https://example.com:443 is vulnerable to CVE-2024-20419: Account Takeover in Cisco Smart Software Manager On-Prem"
    )


def testCVE202420419_whenSafe_reportsNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-20419 unit test: case when the target is safe."""

    # Mock the response for the initial GET request to check reachability
    requests_mock.get(
        "https://example.com:443/backend/settings/oauth_adfs?hostname=polar",
        headers={
            "Set-Cookie": "XSRF-TOKEN=fake_xsrf_token; _lic_engine_session=fake_session_cookie;"
        },
        status_code=200,
    )

    # Mock the response for the POST request to generate the auth token
    requests_mock.post(
        "https://example.com:443/backend/reset_password/generate_code",
        json={
            "error": "unauthorized",
            "error_message": "Unexpected error: Please refresh your page and try login again",
            "status": "unauthorized",
        },
        status_code=200,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202420419_whenCookiesNotReceived_reportsNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-20419 unit test: case when the target is safe."""

    # Mock the response for the initial GET request to check reachability
    requests_mock.get(
        "https://example.com:443/backend/settings/oauth_adfs?hostname=polar",
        headers={"Set-Cookie": "XSRF-TOKEN=fake_xsrf_token;"},
        status_code=200,
    )

    # Mock the response for the POST request to generate the auth token
    requests_mock.post(
        "https://example.com:443/backend/reset_password/generate_code",
        json={
            "error": "unauthorized",
            "error_message": "Unexpected error: Please refresh your page and try login again",
            "status": "unauthorized",
        },
        status_code=200,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCheck_whenEndpointUnreachable_reportsError(
        requests_mock: req_mock.Mocker,
) -> None:
    """Test check method when the endpoint is unreachable."""

    # Mock the response for the GET request to check reachability with a 404 status
    requests_mock.get(
        "https://example.com:443/",
        status_code=404,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    assert exploit_instance.accept(target) is False


def testCheck_authTokenNotPresent_reportsError(
        requests_mock: req_mock.Mocker,
) -> None:
    """Test check method when the auth_token is not present in the response."""

    # Mock the response for the initial GET request to check reachability
    requests_mock.get(
        "https://example.com:443/",
        text="<title>On-Prem License Workspace</title>",
        status_code=200,
    )
    requests_mock.get(
        "https://example.com:443/backend/settings/oauth_adfs?hostname=polar",
        headers={
            "Set-Cookie": "XSRF-TOKEN=fake_xsrf_token; _lic_engine_session=fake_session_cookie;"
        },
        status_code=200,
    )

    # Mock the response for the POST request to generate the auth token without an auth token
    requests_mock.post(
        "https://example.com:443/backend/reset_password/generate_code",
        json={},
        status_code=200,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCheck_whenInvalidJsonResponse_reportsError(
        requests_mock: req_mock.Mocker,
) -> None:
    """Test check method when the JSON response is invalid."""

    # Mock the response for the initial GET request to check reachability
    requests_mock.get(
        "https://example.com:443/",
        text="<title>On-Prem License Workspace</title>",
        status_code=200,
    )
    requests_mock.get(
        "https://example.com:443/backend/settings/oauth_adfs?hostname=polar",
        headers={
            "Set-Cookie": "XSRF-TOKEN=fake_xsrf_token; _lic_engine_session=fake_session_cookie;"
        },
        status_code=200,
    )

    # Mock the response for the POST request to generate the auth token with invalid JSON
    requests_mock.post(
        "https://example.com:443/backend/reset_password/generate_code",
        text="Invalid JSON",
        status_code=200,
    )

    exploit_instance = cve_2024_20419.CVE202420419Exploit()
    target = definitions.Target("https", "example.com", 443)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
