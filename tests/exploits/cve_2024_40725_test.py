"""Unit tests for Agent Asteroid: CVE-2024-40725"""

from unittest import mock

import requests

from agent import definitions
from agent.exploits import cve_2024_40725


def testAccept_whenVersionVulnerable_reportTrue() -> None:
    """Test the accept method with a vulnerable version."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._get_server_version", return_value="2.4.61"
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        assert exploit_instance.accept(target) is True


def testAccept_whenVersionNotVulnerable_reportFalse() -> None:
    """Test the accept method with a non-vulnerable version."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._get_server_version", return_value="2.4.50"
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        assert exploit_instance.accept(target) is False


def testAccept_whenNoVersion_reportFalse() -> None:
    """Test the accept method when no version is returned."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._get_server_version", return_value=None
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        assert exploit_instance.accept(target) is False


def testCVE202440725_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=True):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 1
        assert (
            vulnerabilities[0].entry.title
            == "Source Code Disclosure in Apache HTTP Server"
        )


def testCVE202440725_whenSafe_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=False):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenNoFilenamesFound_reportNothing() -> None:
    """Test the check method when no filenames are available."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=[]):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


def testCheckWhenRequestExceptionReportLoggedErrors() -> None:
    """Test the check method when a request exception occurs."""
    with mock.patch(
        "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch(
        "agent.exploits.cve_2024_40725.requests.get",
        side_effect=requests.RequestException,
    ) as mockRequestsGet, mock.patch(
        "agent.exploits.cve_2024_40725.logger"
    ) as mockLogger:
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        vulnerabilities = exploit_instance.check(target)
        assert not vulnerabilities
        mockLogger.error.assert_called()
        mockRequestsGet.assert_called()


def testGetServerVersion_whenHeaderContainsVersion() -> None:
    """Test _get_server_version with a server header containing version."""
    with mock.patch(
        "agent.exploits.cve_2024_40725.requests.head",
        return_value=mock.Mock(headers={"Server": "Apache/2.4.61"}),
    ):
        version = cve_2024_40725._get_server_version("http://example.com")
        assert version == "2.4.61"


def testGetServerVersion_whenHeaderDoesNotContainVersion() -> None:
    """Test _get_server_version with a server header not containing version."""
    with mock.patch(
        "agent.exploits.cve_2024_40725.requests.head",
        return_value=mock.Mock(headers={"Server": "Apache"}),
    ):
        version = cve_2024_40725._get_server_version("http://example.com")
        assert version is None


def testIsVersionVulnerable_whenValueError() -> None:
    """Test _is_version_vulnerable when ValueError is raised."""
    assert not cve_2024_40725._is_version_vulnerable("invalid_version")


def testReadFilenamesWhenIOException() -> None:
    """Test _read_filenames when an IOError occurs."""
    with mock.patch("builtins.open", side_effect=IOError("File not found")):
        filenames = cve_2024_40725._read_filenames("path/to/filenames.txt")
        assert filenames == []


def testContainsCodeContent_whenError() -> None:
    """Test _contains_code_content when a TypeError or ValueError occurs."""
    with mock.patch("pygments.lexers.guess_lexer", side_effect=TypeError):
        result = cve_2024_40725._contains_code_content("some content")
        assert not result


def testCheckFiles_whenRequestException() -> None:
    """Test _check_files when requests.Get raises an exception."""
    with mock.patch(
        "agent.exploits.cve_2024_40725.requests.get",
        side_effect=requests.RequestException,
    ), mock.patch(
        "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
    ):
        result = cve_2024_40725._check_files("http://example.com", ["index.php"])
        assert not result
