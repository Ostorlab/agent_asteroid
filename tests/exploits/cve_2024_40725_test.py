"""Unit tests for Apache Source Code Disclosure Exploit."""

import requests
import pytest
from unittest import mock
from typing import Generator
from unittest.mock import patch
import requests_mock as req_mock
from pytest_mock import MockerFixture
from pygments.lexers import HtmlLexer, CssLexer, PhpLexer

from agent import definitions
from agent.exploits import cve_2024_40725


@pytest.fixture
def requests_mock() -> Generator[req_mock.Mocker, None, None]:
    with req_mock.Mocker() as mocker:
        yield mocker


def testApacheSourceCodeDisclosureExploit_whenVulnerable_reportFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test: case when target is vulnerable."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.61"}, status_code=200
    )

    requests_mock.get(
        "http://example.com:80/default.php",
        text="<?php echo 'Hello, World!'; ?>",
        status_code=200,
    )

    requests_mock.get(
        "http://example.com:80/index.php",
        text="<?php echo 'Hello, World!'; ?>",
        status_code=200,
    )

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert (
        exploit_instance.accept(target) is True
    ), "The target should be reported as vulnerable."

    vulnerabilities = exploit_instance.check(target)
    assert vulnerabilities, "The target should have vulnerabilities reported."


def testApacheSourceCodeDisclosureExploit_whenSafe_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test: case when target is safe."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.62"}, status_code=200
    )

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert (
        exploit_instance.accept(target) is False
    ), "The target should be reported as safe."


def test_getServerVersion_whenServerVersionRetrieved_reportCorrectVersion(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test for _get_server_version function."""
    requests_mock.head(
        "http://example.com", headers={"Server": "Apache/2.4.60"}, status_code=200
    )
    version = cve_2024_40725._get_server_version("http://example.com")
    assert version == "2.4.60", "The server version should be 2.4.60."


def test_getServerVersion_whenRequestException_logsError(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test for _get_server_version to cover RequestException."""
    requests_mock.head("http://example.com", exc=requests.RequestException)
    with patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        version = cve_2024_40725._get_server_version("http://example.com")
        assert version is None
        mock_logger.error.assert_called_once()


def test_isVersionVulnerable_whenChecked_reportCorrectVulnerabilityStatus() -> None:
    """Unit test for _is_version_vulnerable function."""
    assert cve_2024_40725._is_version_vulnerable("2.4.60") is True
    assert cve_2024_40725._is_version_vulnerable("2.4.59") is False
    assert cve_2024_40725._is_version_vulnerable("2.4.61") is True
    assert cve_2024_40725._is_version_vulnerable(None) is False


def test_readFilenames_whenFilenamesRead_reportCorrectFilenames(
    mocker: MockerFixture,
) -> None:
    """Unit test for _read_filenames function."""
    mocker.patch(
        "builtins.open", mocker.mock_open(read_data="/index.php\n/plugin.js\n")
    )
    filenames = cve_2024_40725._read_filenames("filenames.txt")
    assert filenames == [
        "/index.php",
        "/plugin.js",
    ], "Filenames should be read correctly."


def test_readFilenames_whenIOError_logsError(mocker: MockerFixture) -> None:
    """Unit test for _read_filenames to cover IOError."""
    mocker.patch("builtins.open", side_effect=IOError("File not found"))
    with patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        filenames = cve_2024_40725._read_filenames("filenames.txt")
        assert filenames == []
        mock_logger.error.assert_called_once()


def test_containsCodeContent_whenContentChecked_reportCorrectContentStatus(
    mocker: MockerFixture,
) -> None:
    """Unit test for _contains_code_content function."""

    # Mock guess_lexer to return a PhpLexer instance for PHP content
    mock_php_lexer = mocker.MagicMock()
    mock_php_lexer.__class__ = PhpLexer
    mocker.patch(
        "agent.exploits.cve_2024_40725.guess_lexer", return_value=mock_php_lexer
    )
    assert cve_2024_40725._contains_code_content("<?php echo 'Hello'; ?>") is True

    # Mock guess_lexer to return an HtmlLexer instance for HTML content
    mock_html_lexer = mocker.MagicMock()
    mock_html_lexer.__class__ = HtmlLexer
    mocker.patch(
        "agent.exploits.cve_2024_40725.guess_lexer", return_value=mock_html_lexer
    )
    assert (
        cve_2024_40725._contains_code_content("<html><body>Hello</body></html>")
        is False
    )

    # Mock guess_lexer to return a CssLexer instance for CSS content
    mock_css_lexer = mocker.MagicMock()
    mock_css_lexer.__class__ = CssLexer
    mocker.patch(
        "agent.exploits.cve_2024_40725.guess_lexer", return_value=mock_css_lexer
    )
    assert cve_2024_40725._contains_code_content("body {color: red;}") is False


def test_containsCodeContent_whenTypeError_logsError(mocker: MockerFixture) -> None:
    """Unit test for _contains_code_content to cover TypeError."""
    mocker.patch(
        "agent.exploits.cve_2024_40725.guess_lexer",
        side_effect=TypeError("Invalid content"),
    )
    with patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        result = cve_2024_40725._contains_code_content("<?php echo 'Hello'; ?>")
        assert result is False
        mock_logger.error.assert_called_once()


def test_checkFiles_whenFilesChecked_reportCorrectCheckResults(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test for _check_files function."""
    requests_mock.get(
        "http://example.com/index.php", text="<?php echo 'Hello'; ?>", status_code=200
    )
    result = cve_2024_40725._check_files(
        "http://example.com", ["/index.php", "/form_utils.js"]
    )
    assert result is True, "Source code disclosure should be detected."


def test_checkFiles_whenRequestException_logsError(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test for _check_files to cover RequestException."""
    requests_mock.get("http://example.com/index.php", exc=requests.RequestException)
    with patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        result = cve_2024_40725._check_files("http://example.com", ["/index.php"])
        assert result is False
        mock_logger.error.assert_called_once_with(
            "Request error checking file %s: %s", "/index.php", mock.ANY
        )
