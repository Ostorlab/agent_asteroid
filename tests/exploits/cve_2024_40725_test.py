"""Unit tests for Agent Asteroid: CVE-2024-40725"""

from unittest import mock

import requests

from agent import definitions
from agent.exploits import cve_2024_40725


def testAccept_whenVersionVulnerable_reportTrue() -> None:
    """Test the accept method with a vulnerable version."""
    with mock.patch("agent.exploits.cve_2024_40725._get_server_version", return_value="2.4.61"):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        assert exploit_instance.accept(target) is True


def testAccept_whenVersionNotVulnerable_reportFalse() -> None:
    """Test the accept method with a non-vulnerable version."""
    with mock.patch("agent.exploits.cve_2024_40725._get_server_version", return_value="2.4.50"):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        assert exploit_instance.accept(target) is False


def testAccept_whenNoVersion_reportFalse() -> None:
    """Test the accept method when no version is returned."""
    with mock.patch("agent.exploits.cve_2024_40725._get_server_version", return_value=None):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        assert exploit_instance.accept(target) is False


def testCVE202440725_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]), \
         mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=True):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        vulnerabilities = exploit_instance.check(target)
        assert len(vulnerabilities) == 1
        assert vulnerabilities[0].entry.title == "Source Code Disclosure in Apache HTTP Server"


def testCVE202440725_whenSafe_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]), \
         mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=False):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        vulnerabilities = exploit_instance.check(target)
        assert len(vulnerabilities) == 0


def testCheck_whenNoFilenamesFound_reportNothing() -> None:
    """Test the check method when no filenames are available."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=[]):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)
        vulnerabilities = exploit_instance.check(target)
        assert len(vulnerabilities) == 0


def testCheck_whenRequestException_reportLoggedErrors() -> None:
    """Test the check method when a request exception occurs."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        with mock.patch("agent.exploits.cve_2024_40725.requests.get", side_effect=requests.RequestException):
            with mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
                vulnerabilities = exploit_instance.check(target)
                assert not vulnerabilities
                mock_logger.error.assert_called()
