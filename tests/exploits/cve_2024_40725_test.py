"""Unit tests for Agent Asteroid: CVE-2024-40725"""

from unittest import mock

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_40725


def testAccept_whenVersionVulnerable_reportTrue(requests_mock: req_mock.mocker.Mocker) -> None:
    """Test the accept method with a vulnerable version."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.61"}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is True


def testAccept_whenVersionNotVulnerable_reportFalse(requests_mock: req_mock.mocker.Mocker) -> None:
    """Test the accept method with a non-vulnerable version."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.50"}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testAccept_whenNoVersion_reportFalse(requests_mock: req_mock.mocker.Mocker) -> None:
    """Test the accept method when no version is returned."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": ""}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testCVE202440725_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=True):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 1
        assert (
                vulnerabilities[0].entry.title
                == "Source Code Disclosure in Apache HTTP Server"
        )


def testCVE202440725_whenSafe_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=False):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


def testCheck_whenNoFilenamesFound_reportNothing() -> None:
    """Test the check method when no filenames are available."""
    with mock.patch("agent.exploits.cve_2024_40725._read_filenames", return_value=[]):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


def testCheckWhenRequestException_reportLoggedErrors() -> None:
    """Test the check method when a request exception occurs."""
    with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
    ), mock.patch(
        "agent.exploits.cve_2024_40725.requests.get",
        side_effect=requests.RequestException("Request error"),
    ), mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0
        mock_logger.error.assert_any_call(
            "Request error checking file %s: %s", "index.php", mock.ANY
        )


def testCheckFiles_whenRequestException() -> None:
    """Test the check method when requests.Get raises an exception."""
    with mock.patch(
            "agent.exploits.cve_2024_40725.requests.get",
            side_effect=requests.RequestException("Request error"),
    ), mock.patch(
        "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
    ), mock.patch("agent.exploits.cve_2024_40725.logger") as mockLogger:
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert not vulnerabilities
        mockLogger.error.assert_called()
        assert not any(
            call[0][0] == "Error retrieving file %s: %s" and "index.php" in call[0][1]
            for call in mockLogger.error.call_args_list
        )


def testCheckFiles_whenHTTPError_reportLoggedErrors() -> None:
    """Test the check method when requests.Get raises an HTTPError."""
    with mock.patch(
            "agent.exploits.cve_2024_40725.requests.get",
            side_effect=requests.HTTPError("HTTP error"),
    ), mock.patch(
        "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
    ), mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        with mock.patch(
                "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert not result

            mock_logger.error.assert_any_call(
                "HTTP error checking file %s: %s", "index.php", mock.ANY
            )


def testCheckFiles_whenConnectionError() -> None:
    """Test the check method when requests.Get raises a ConnectionError."""
    with mock.patch(
            "agent.exploits.cve_2024_40725.requests.get",
            side_effect=requests.ConnectionError("Connection error"),
    ), mock.patch(
        "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
    ), mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        with mock.patch(
                "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert not result

            mock_logger.error.assert_any_call(
                "Connection error checking file %s: %s", "index.php", mock.ANY
            )


def testCheckFiles_whenTimeout() -> None:
    """Test the check method when requests.Get raises a Timeout."""
    with mock.patch(
            "agent.exploits.cve_2024_40725.requests.get",
            side_effect=requests.Timeout("Timeout error"),
    ), mock.patch(
        "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
    ), mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
        with mock.patch(
                "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert not result

            mock_logger.error.assert_any_call(
                "Timeout error checking file %s: %s", "index.php", mock.ANY
            )


# def testCheckContent_whenTypeError_logsError() -> None:
#     """Unit test for check_content to cover TypeError."""
#     mock.patch(
#         "agent.exploits.cve_2024_40725.guess_lexer",
#         side_effect=TypeError("Invalid content"),
#     )
#     with mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger:
#         exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
#         result = exploit_instance.check_content("<?php echo 'Hello'; ?>")
#         assert result is False
#         mock_logger.error.assert_called_once_with(
#             "Error determining code content: %s", "Invalid content"
#         )
