"""Unit tests for Apache Source Code Disclosure Exploit."""

import requests_mock as req_mock
import pytest
from typing import Generator

from agent import definitions
from agent.exploits import cve_2024_40725


@pytest.fixture
def requests_mock() -> Generator[req_mock.Mocker, None, None]:
    with req_mock.Mocker() as mocker:
        yield mocker


def testApacheSourceCodeDisclosureExploit_whenVulnerable_reportFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test: case when target is vulnerable."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.61"}, status_code=200
    )

    requests_mock.get(
        "http://example.com:80/default.php",
        text="<?php echo 'Hello, World!'; ?>",
        status_code=200,
    )

    requests_mock.get(
        "http://example.com:80/index.php",
        text="<?php echo 'Hello, World!'; ?>",
        status_code=200,
    )

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert (
        exploit_instance.accept(target) is True
    ), "The target should be reported as vulnerable."

    vulnerabilities = exploit_instance.check(target)
    assert vulnerabilities, "The target should have vulnerabilities reported."


def testApacheSourceCodeDisclosureExploit_whenSafe_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """Unit test: case when target is safe."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.62"}, status_code=200
    )

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert (
        exploit_instance.accept(target) is False
    ), "The target should be reported as safe."
