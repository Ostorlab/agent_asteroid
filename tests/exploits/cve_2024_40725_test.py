"""Unit tests for Agent Asteroid: CVE-2024-40725"""

from unittest import mock

import pytest
import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_40725


def testAccept_whenVersionVulnerable_reportTrue(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the accept method with a vulnerable version."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.61"}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is True


def testAccept_whenVersionNotVulnerable_reportFalse(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the accept method with a non-vulnerable version."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "Apache/2.4.50"}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testAccept_whenNoVersion_reportFalse(requests_mock: req_mock.mocker.Mocker) -> None:
    """Test the accept method when no version is returned."""
    requests_mock.head(
        "http://example.com:80", headers={"Server": "dummy"}, status_code=200
    )
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testAccept_whenRequestException_reportFalse(
    caplog: pytest.LogCaptureFixture,
) -> None:
    """Test the accept method when requests.Head raises a RequestException."""
    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "examplfrhe.com", 80)

    result = exploit_instance.accept(target)

    assert result is False
    assert "Error retrieving server version" in caplog.messages[0]


def testCVE202440725_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with (
        mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ),
        mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=True),
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 1
        assert (
            vulnerabilities[0].entry.title
            == "Source Code Disclosure in Apache HTTP Server"
        )
        assert vulnerabilities[0].vulnerability_location is not None
        assert vulnerabilities[0].dna is not None


def testCVE202440725_whenSafe_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with (
        mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ),
        mock.patch("agent.exploits.cve_2024_40725._check_files", return_value=False),
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


def testCVE202440725_whenNoFilenamesFound_reportNothing(
    mocker: mock.Mock, caplog: pytest.LogCaptureFixture
) -> None:
    """Test check method when an IOError occurs reading filenames."""
    mocker.patch("agent.definitions.HttpSession")
    mocker.patch("builtins.open", side_effect=IOError("File not found"))

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "example.com", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
    assert "Error reading file list: File not found" in caplog.text


def testCVE202440725_whenRequestException_reportLoggedErrors() -> None:
    """Test the check method when a request exception occurs."""
    with (
        mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ),
        mock.patch(
            "agent.definitions.HttpSession.get",
            side_effect=requests.RequestException("Request error"),
        ),
        mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger,
    ):
        exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0
        mock_logger.error.assert_any_call(
            "Request error checking file %s: %s", "index.php", mock.ANY
        )


def testCVE202440725_whenHTTPError_reportLoggedErrors() -> None:
    """Test the check method when requests.Get raises an HTTPError."""
    with (
        mock.patch(
            "agent.definitions.HttpSession.get",
            side_effect=requests.exceptions.HTTPError(
                "HTTP error", response=requests.models.Response()
            ),
        ),
        mock.patch(
            "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
        ),
        mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger,
    ):
        with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert not result

            mock_logger.error.assert_any_call(
                "HTTP error checking file %s: %s", "index.php", mock.ANY
            )


def testCVE202440725_whenConnectionError_reportLoggedErrors() -> None:
    """Test the check method when requests.Get raises a ConnectionError."""
    with (
        mock.patch(
            "agent.definitions.HttpSession.get",
            side_effect=requests.exceptions.ConnectionError("Connection error"),
        ),
        mock.patch(
            "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
        ),
        mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger,
    ):
        with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert not result

            mock_logger.error.assert_any_call(
                "Connection error checking file %s: %s", "index.php", mock.ANY
            )


def testCVE202440725_whenTimeoutError_reportLoggedErrors() -> None:
    """Test the check method when requests.Get raises a Timeout."""
    with (
        mock.patch(
            "agent.definitions.HttpSession.get",
            side_effect=requests.exceptions.Timeout("Timeout error"),
        ),
        mock.patch(
            "agent.exploits.cve_2024_40725._contains_code_content", return_value=True
        ),
        mock.patch("agent.exploits.cve_2024_40725.logger") as mock_logger,
    ):
        with mock.patch(
            "agent.exploits.cve_2024_40725._read_filenames", return_value=["index.php"]
        ):
            exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
            target = definitions.Target("http", "example.com", 80)

            result = exploit_instance.check(target)

            assert len(result) == 0

            mock_logger.error.assert_any_call(
                "Timeout error checking file %s: %s", "index.php", mock.ANY
            )


def test_contains_code_content_whenContainsCode_returnsTrue(
    caplog: pytest.LogCaptureFixture, requests_mock: req_mock.mocker.Mocker
) -> None:
    """Test contains_code_content method when content contains actual code."""
    requests_mock.get(
        "http://examfwfwple.com:80/default.php", text="<?php echo 'Hello, World!'; ?>"
    )

    exploit_instance = cve_2024_40725.ApacheSourceCodeDisclosureExploit()
    target = definitions.Target("http", "examfwfwple.com", 80)

    result = exploit_instance.check(target)

    assert len(result) == 1
