"""Unit tests for Agent Asteroid: CVE-2024-33544"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_33544


def testCVE202433544_whenVersionBetween1and13XX_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-33544 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/wzone/readme.txt",
        text="""=== WZone ===\n\nStable tag: 4.0\n\nRequires PHP: 7.4\n\n""",
        status_code=200,
    )
    exploit_instance = cve_2024_33544.CVE202433544Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Unauthenticated SQL Injection Vulnerability in WZone Plugin"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-33544, "
        "Unauthenticated SQL Injection Vulnerability in WZone Plugin"
    )


def testCVE202433544_whenVersionBetween1400and14010_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-33544 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/wzone/readme.txt",
        text="""=== WZone ===\n\nStable tag: 14.0.10\n\nRequires PHP: 7.4\n\n""",
        status_code=200,
    )
    exploit_instance = cve_2024_33544.CVE202433544Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Unauthenticated SQL Injection Vulnerability in WZone Plugin"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-33544, "
        "Unauthenticated SQL Injection Vulnerability in WZone Plugin"
    )


def testCVE202433544_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-33544 unit test: case when target is safe."""
    exploit_instance = cve_2024_33544.CVE202433544Exploit()
    requests_mock.get(
        "http://localhost:80/wp-content/plugins/wzone/readme.txt",
        text="""=== WZone ===\n\nStable tag: 14.0.11\n\nRequires PHP: 7.4\n\n""",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
