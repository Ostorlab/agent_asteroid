"""Unit tests for CVE-2024-51378"""

import re
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_51378


def testCVE202451378_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-51378, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8090)
    exploit_instance = cve_2024_51378.CVE202451378Exploit()

    # Mock CSRF token request
    requests_mock.get(
        re.compile("http://127.0.0.1:8090"),
        cookies={"csrftoken": "mocked_csrf_token"},
        text="<h4>Web Hosting Control Panel</h4>",
    )

    # Mock RCE attempt
    requests_mock.options(
        re.compile("http://127.0.0.1:8090/(ftp|dns)/getresetstatus"),
        json={"requestStatus": "uid=1000(mocked_user)"},
        status_code=200,
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert accept is True
    assert vulnerability.entry.title == "CYBERPANEL RCE"
    assert vulnerability.risk_rating.name == "CRITICAL"
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:8090 is vulnerable to CVE-2024-51378, CYBERPANEL RCE"
    )


def testCVE202451378_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-51378, case when target is safe."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8090)
    exploit_instance = cve_2024_51378.CVE202451378Exploit()

    # Mock CSRF token request with no vulnerabilities
    requests_mock.get(
        re.compile("http://127.0.0.1:8090"),
        cookies={"csrftoken": "mocked_csrf_token"},
        text="<h4>Web Hosting Control Panel</h4>",
    )

    # Mock RCE attempt with no vulnerabilities
    requests_mock.options(
        re.compile("http://127.0.0.1:8090/(ftp|dns)/getresetstatus"),
        text="""<!doctype html>
<html lang="en">
<head>
  <title>Not Found</title>
</head>
<body>
  <h1>Not Found</h1><p>The requested resource was not found on this server.</p>
</body>
</html>""",
        status_code=200,
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
