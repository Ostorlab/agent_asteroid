"""Unit tests for Agent Asteroid: CVE-2024-11667"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_11667


def create_mock_response(device_type: str, version: str) -> str:
    """Create a mock HTML response with the given device type and version."""
    return f"""
    <!DOCTYPE html>
    <html>
    <head>
        <title>{device_type}</title>
        <link rel="icon" href="/favicon.ico?v={version}" type="image/x-icon">
    </head>
    <body>
        <!-- Page content -->
    </body>
    </html>
    """


def testCVE202411667_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11667 unit test: case when target is vulnerable."""
    device_type = "USG FLEX 100"
    vulnerable_version = "210513"  # A version within the vulnerable range
    mock_response = create_mock_response(device_type, vulnerable_version)
    requests_mock.get(
        "http://localhost:80/",
        text=mock_response,
        status_code=200,
    )

    exploit_instance = cve_2024_11667.CVE202411667Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == (
        "Zyxel ATP/USG FLEX/USG FLEX 50(W)/USG20(W)-VPN UP TO 5.38 URL PATH TRAVERSAL"
    )
    assert (
        vulnerability.technical_detail
        == "http://localhost:80/ is vulnerable to CVE-2024-11667, Zyxel ATP/USG FLEX/USG FLEX 50(W)/USG20(W)-VPN UP TO 5.38 URL PATH TRAVERSAL"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202411667_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11667 unit test: case when target is safe."""
    device_type = "USG FLEX 100"
    safe_version = "241116"  # A version outside the vulnerable range
    mock_response = create_mock_response(device_type, safe_version)
    requests_mock.get(
        "http://localhost:80/",
        text=mock_response,
        status_code=200,
    )

    exploit_instance = cve_2024_11667.CVE202411667Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202411667_whenConnectionError_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11667 unit test: case when a connection error occurs."""
    requests_mock.get(
        "http://localhost:80/",
        exc=requests.exceptions.ConnectionError,
    )

    exploit_instance = cve_2024_11667.CVE202411667Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    assert accept is False

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202411667_whenTimeout_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-11667 unit test: case when a timeout occurs."""
    requests_mock.get(
        "http://localhost:80/",
        exc=requests.exceptions.Timeout,
    )

    exploit_instance = cve_2024_11667.CVE202411667Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    assert accept is False

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
