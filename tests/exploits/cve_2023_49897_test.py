"""Unit tests for Agent Asteroid: CVE-2023_49897."""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_49897

STATUS = """
system.general.uptime=6day:10h:31m:47s
model_number=XC
oemcode=XC
fw_information=WAP7011A-FLF-XC-2.0.10 (Beta, Build 10128.183-s7887)
version_runtime=s7887)
system.general.hardware.version=R01
bootcode_info=U-Boot_1.1.4_1.2
version_bootcode=1.2
firmware_version=2.0.9
system.general.model_name=AE1021PE
system.general.mode=bridge
wifi.general.CountryCode=JP
system.memory.total=62052
system.memory.free=23968
system.cpu.free=10
"""


def testCVE2023_49897_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that the exploit reports findings when the application is vulnerable."""
    exploit_instance = cve_2023_49897.CVE202349897Exploit()
    url = "http://8.8.8.8:9200"
    requests_mock.get(
        url + "/main_top.htm",
        status_code=200,
        text="logout",
    )
    requests_mock.post(
        url + "/cgi-bin/login.apply",
        status_code=200,
    )
    requests_mock.get(
        url + "/cgi-bin/runtime?system_status",
        status_code=200,
        text=STATUS,
    )
    target = definitions.Target("http", "8.8.8.8", 9200)

    vulnerabilities = exploit_instance.check(target)

    assert exploit_instance.accept(target) is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == 'FXC wireless LAN routers "AE1021PE" and "AE1021" vulnerable to OS command injection.'
    )
    assert (
        vulnerability.technical_detail
        == "http://8.8.8.8:9200/ is vulnerable to CVE-2023-49897, "
        'FXC wireless LAN routers "AE1021PE" and "AE1021" vulnerable to OS command injection.'
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202349897_whenNotVulnerable_noFindingsReported(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that there is no findings when the application is not vulnerable."""
    exploit_instance = cve_2023_49897.CVE202349897Exploit()
    url = "http://8.8.8.8:9200"
    requests_mock.get(
        url + "/main_top.htm",
        status_code=302,
        text="access",
    )
    requests_mock.post(
        url + "/cgi-bin/login.apply",
        status_code=302,
    )
    requests_mock.get(
        url + "/cgi-bin/runtime?system_status",
        status_code=401,
        text="",
    )
    target = definitions.Target("http", "8.8.8.8", 9200)

    vulnerabilities = exploit_instance.check(target)

    assert exploit_instance.accept(target) is False
    assert len(vulnerabilities) == 0
