"""Unit tests for CVE-2024-24938 exploit"""

import socket

import pytest

from agent import definitions
from agent.exploits import cve_2024_24938


class DummySocket:
    def __init__(self, *args, **kwargs) -> None:
        self.sent_data: list[bytes] = []
        self.to_receive: list[bytes | Exception] = []
        self.timeout: float | None = None
        self.connected: bool = False

    def settimeout(self, timeout: float) -> None:
        self.timeout = timeout

    def connect(self, addr: tuple[str, int]) -> None:
        if addr[0] == "bad":
            raise socket.error("Connection refused")
        self.connected = True

    def sendall(self, data: bytes) -> None:
        self.sent_data.append(data)

    def recv(self, bufsize: int) -> bytes:
        if not self.to_receive:
            return b""
        resp = self.to_receive.pop(0)
        if isinstance(resp, Exception):
            raise resp
        return resp  # type: ignore

    def close(self) -> None:
        self.connected = False


@pytest.fixture(autouse=True)
def patch_socket(monkeypatch: pytest.MonkeyPatch) -> DummySocket:
    """Patch socket.socket to always return the same DummySocket instance."""
    dummy = DummySocket()
    monkeypatch.setattr(socket, "socket", lambda *args, **kwargs: dummy)
    return dummy


def testCVE202424938_whenTargetIsErlangSSH_accepts(patch_socket: DummySocket) -> None:
    """accept() should return True when banner contains Erlang signature."""
    target = definitions.Target(scheme="ssh", host="127.0.0.1", port=2222)
    patch_socket.to_receive = [b"SSH-2.0-Erlang-OTP\r\n"]
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.accept(target) is True


def testCVE202424938_whenTargetIsNotErlangSSH_rejects(
        patch_socket: DummySocket,
) -> None:
    """accept() should return False when banner does not match."""
    target = definitions.Target(scheme="ssh", host="127.0.0.1", port=2222)
    patch_socket.to_receive = [b"SSH-2.0-OpenSSH_8.9\r\n"]
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.accept(target) is False


def testCVE202424938_whenConnectErrorInAccept_returnsFalse(
        patch_socket: DummySocket,
) -> None:
    """accept() should return False when connect() raises an error."""
    target = definitions.Target(scheme="ssh", host="bad", port=2222)
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.accept(target) is False


def testCVE202424938_whenResponseReceived_reportsVulnerability(
        patch_socket: DummySocket,
) -> None:
    """check() should report one vulnerability when server responds after exploit."""
    target = definitions.Target(scheme="ssh", host="127.0.0.1", port=2222)
    patch_socket.to_receive = [b"SSH-2.0-Erlang-OTP\r\n", b"\x00RESP"]
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    vulns = exploit.check(target)
    assert len(vulns) == 1
    assert vulns[0].entry.title == cve_2024_24938.VULNERABILITY_TITLE
    assert vulns[0].risk_rating.name == cve_2024_24938.RISK_RATING


def testCVE202424938_whenEmptyResponse_reportsNothing(
        patch_socket: DummySocket,
) -> None:
    """check() should return empty list when no response payload is received."""
    target = definitions.Target(scheme="ssh", host="127.0.0.1", port=2222)
    patch_socket.to_receive = [b"SSH-2.0-Erlang-OTP\r\n", b""]
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.check(target) == []


def testCVE202424938_whenRecvTimeout_reportsNothing(patch_socket: DummySocket) -> None:
    """check() should handle socket.timeout on recv() gracefully."""
    target = definitions.Target(scheme="ssh", host="127.0.0.1", port=2222)

    def raise_timeout(bufsize: int) -> bytes:
        raise socket.timeout()

    patch_socket.recv = raise_timeout  # type: ignore
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.check(target) == []


def testCVE202424938_whenConnectErrorInCheck_reportsNothing(
        patch_socket: DummySocket,
) -> None:
    """check() should return empty list when connect() fails."""
    target = definitions.Target(scheme="ssh", host="bad", port=2222)
    exploit = cve_2024_24938.ErlangSSHPreAuthExploit()

    assert exploit.check(target) == []
