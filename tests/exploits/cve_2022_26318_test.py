"""Unit tests for Agent Asteriod: CVE-2022-26318"""

from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2022_26318


def testCVE202226318_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """Ensure that the exploit reports findings when the application is vulnerable."""

    exploit_instance = cve_2022_26318.CVE202226318Exploit()
    target = definitions.Target("https", "80.147.121.242", 8080)
    mock_ssl_socket = mocker.Mock()
    mocker.patch("ssl.wrap_socket", return_value=mock_ssl_socket)
    mocker.patch("ssl.SSLSocket.connect")
    mocker.patch("ssl.SSLSocket.send")
    mocker.patch("ssl.SSLSocket.recv", return_value=b"YouAreVulner")

    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "WatchGuard Firebox and XTM Appliances Arbitrary Code Execution"
    )
    assert (
        vulnerability.technical_detail
        == "https://80.147.121.242:8080 is vulnerable to CVE-2022-26318, "
        "WatchGuard Firebox and XTM Appliances Arbitrary Code Execution"
    )


def testCVE202226318_whenNotVulnerable_noFindingsReported(
    mocker: plugin.MockerFixture,
) -> None:
    """Ensure that there is no findings when the application is not vulnerable."""
    exploit_instance = cve_2022_26318.CVE202226318Exploit()
    target = definitions.Target("https", "80.147.121.242", 8080)
    mock_ssl_socket = mocker.Mock()
    mocker.patch("ssl.wrap_socket", return_value=mock_ssl_socket)
    mocker.patch("ssl.SSLSocket.connect")
    mocker.patch("ssl.SSLSocket.send")
    mocker.patch("ssl.SSLSocket.recv", return_value=b"")

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
