"""Unit tests for Agent Asteroid: CVE-2022-26318"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2022_26318


def testCVE202226318_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that the exploit reports findings when the application is vulnerable."""

    requests_mock.post("https://example.com:8080/agent/login", content=b"YouAreVulner")
    exploit_instance = cve_2022_26318.CVE202226318Exploit()
    target = definitions.Target("https", "example.com", 8080)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "WatchGuard Firebox and XTM Appliances Arbitrary Code Execution"
    )
    assert (
        vulnerability.technical_detail
        == "https://example.com:8080 is vulnerable to CVE-2022-26318, "
        "WatchGuard Firebox and XTM Appliances Arbitrary Code Execution"
    )


def testCVE202226318_whenNotVulnerable_noFindingsReported(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that there is no findings when the application is not vulnerable."""
    exploit_instance = cve_2022_26318.CVE202226318Exploit()
    target = definitions.Target("https", "example.com", 8080)
    requests_mock.post("https://example.com:8080/agent/login", content=b"")
    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
