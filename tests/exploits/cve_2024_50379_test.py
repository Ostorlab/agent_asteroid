"""Unit tests for Agent Asteroid: CVE-2024-50379"""

import requests
import requests_mock as req_mock
from agent import definitions
from agent.exploits import cve_2024_50379


def testCVE202450379_whenVulnerable_reportFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when target is vulnerable."""
    exploit_instance = cve_2024_50379.CVE202450379Exploit()

    # Mock the initial Tomcat version check
    requests_mock.get(
        "http://localhost:80/",
        text="<h3>Apache Tomcat/9.0.63</h3>",
        status_code=200,
    )

    # Mock the PUT request test
    requests_mock.put(
        "http://localhost:80/test.Jsp",
        status_code=201,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Apache Tomcat Race Condition Remote Code Execution"
    )
    assert (
        vulnerability.technical_detail
        == "http://localhost:80 is vulnerable to CVE-2024-50379, Apache Tomcat Race Condition Remote Code Execution"
    )


def testCVE202450379_whenSafeVersion_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when target has safe version."""
    exploit_instance = cve_2024_50379.CVE202450379Exploit()

    requests_mock.get(
        "http://localhost:80/",
        text="<h3>Apache Tomcat/9.0.99</h3>",
        status_code=200,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202450379_whenNoTomcat_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when target is not Tomcat."""
    requests_mock.get(
        "http://localhost:80/",
        text="<html><body>Not a Tomcat server</body></html>",
        status_code=200,
    )

    exploit_instance = cve_2024_50379.CVE202450379Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False


def testCVE202450379_whenPutNotAllowed_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when PUT requests are not allowed."""
    exploit_instance = cve_2024_50379.CVE202450379Exploit()

    requests_mock.get(
        "http://localhost:80/",
        status_code=200,
    )

    requests_mock.put(
        "http://localhost:80/test.Jsp",
        status_code=403,
    )

    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202450379_whenConnectionError_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when connection fails."""
    exploit_instance = cve_2024_50379.CVE202450379Exploit()

    requests_mock.get(
        "http://localhost:80/",
        exc=requests.exceptions.ConnectionError,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202450379_whenInvalidVersion_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-50379 unit test: case when version string is invalid."""
    exploit_instance = cve_2024_50379.CVE202450379Exploit()

    requests_mock.get(
        "http://localhost:80/",
        text="<h3>Apache Tomcat/Invalid.Version</h3>",
        status_code=200,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
