"""Unit tests for CVE-2018-19140"""

import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2018_19410


def testPRTGAuthBypassExploit_whenTargetIsPRTG_accepts(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for PRTG exploit, case when the target is a PRTG instance."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2018_19410.PRTGAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/public/login.htm", text="PRTG Network Monitor"
    )

    accept = exploit_instance.accept(target)
    assert accept is True


def testPRTGAuthBypassExploit_whenTargetIsNotPRTG_rejects(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for PRTG exploit, case when the target is not a PRTG instance."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2018_19410.PRTGAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/public/login.htm", text="Generic Monitoring Service"
    )

    accept = exploit_instance.accept(target)
    assert accept is False


def testPRTGAuthBypassExploit_whenUserCreationSucceeds_reportsVulnerability(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for PRTG exploit, case when authentication bypass is successful."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2018_19410.PRTGAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/public/login.htm", text="PRTG Network Monitor"
    )
    requests_mock.post(
        "https://127.0.0.1:4433/public/login.htm?file=/api/addusers.htm",
        text="success",
        status_code=200,
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) > 0
    assert (
        vulnerabilities[0].entry.title
        == "PRTG Network Monitor Authentication Bypass & Local File Inclusion"
    )
    assert vulnerabilities[0].risk_rating.name == "HIGH"


def testPRTGAuthBypassExploit_whenUserCreationFails_reportsNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for PRTG exploit, case when authentication bypass fails."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2018_19410.PRTGAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/public/login.htm", text="PRTG Network Monitor"
    )
    requests_mock.post(
        "https://127.0.0.1:4433/public/login.htm?file=/api/addusers.htm",
        text="error",
        status_code=200,
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testPRTGAuthBypassExploit_whenRequestExceptionOccurs_doesNotRaise(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for PRTG exploit, ensuring request exceptions are handled gracefully."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2018_19410.PRTGAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/public/login.htm",
        exc=requests_exceptions.RequestException,
    )
    requests_mock.post(
        "https://127.0.0.1:4433/public/login.htm?file=/api/addusers.htm",
        exc=requests_exceptions.RequestException,
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
