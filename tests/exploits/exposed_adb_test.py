"""Unit tests for exposed adb"""

from pytest_mock import plugin

from agent import definitions
from agent.exploits import exposed_adb
from adb_shell import exceptions as adb_exceptions


def testExposedAdb_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for exposed adb, case when target is vulnerable (exposed without authentication)"""
    target = definitions.Target(scheme="tcp", host="127.0.0.1", port=5555)
    exploit_instance = exposed_adb.ExposedAdbExploit()
    mocker.patch("adb_shell.adb_device.AdbDeviceTcp.connect", return_value=True)
    mocker.patch(
        "adb_shell.adb_device.AdbDeviceTcp.shell", return_value="__VULNERABLE__"
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]

    assert (
        vulnerability.entry.title
        == "Unauthenticated exposed Android Debug Bridge (ADB)"
    )
    assert vulnerability.technical_detail == (
        "tcp://127.0.0.1:5555/ is vulnerable to Unauthenticated exposed Android Debug "
        "Bridge (ADB)."
    )


def testExposedAdb_whenAuthenticationEnabled_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for exposed adb, case when target is safe (has authentication)"""
    target = definitions.Target(scheme="tcp", host="127.0.0.1", port=5555)
    exploit_instance = exposed_adb.ExposedAdbExploit()
    mocker.patch(
        "adb_shell.adb_device.AdbDeviceTcp.connect",
        side_effect=adb_exceptions.DeviceAuthError("Failed to authenticate"),
    )

    accept = exploit_instance.accept(target)

    assert accept is False


def testExposedAdb_whenAdbDisabled_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for exposed adb, case when target is safe (has remote adb disabled)"""
    target = definitions.Target(scheme="tcp", host="127.0.0.1", port=5555)
    exploit_instance = exposed_adb.ExposedAdbExploit()
    mocker.patch(
        "adb_shell.adb_device.AdbDeviceTcp.connect",
        side_effect=adb_exceptions.TcpTimeoutException(),
    )

    accept = exploit_instance.accept(target)

    assert accept is False


def testExposedAdb_whenAdbConnectRaiseInvalidCommandError_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for exposed adb, case when target is safe (has remote adb disabled)"""
    target = definitions.Target(scheme="tcp", host="127.0.0.1", port=5555)
    exploit_instance = exposed_adb.ExposedAdbExploit()
    mocker.patch(
        "adb_shell.adb_device.AdbDeviceTcp.connect",
        side_effect=adb_exceptions.InvalidCommandError(),
    )

    accept = exploit_instance.accept(target)

    assert accept is False
