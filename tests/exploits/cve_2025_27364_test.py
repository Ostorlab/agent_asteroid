"""Unit tests for CVE-2025-27364"""

import logging

import pytest
import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2025_27364


def testCVE202527364_whenTargetIsVulnerable_reportsVulnerability(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for File Download Header Injection exploit, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.get("http://127.0.0.1:80", text="Login | CALDERA")
    requests_mock.post("http://127.0.0.1:80/file/download", status_code=200)

    vulnerabilities = exploit_instance.check(target)
    accept = exploit_instance.accept(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    assert (
        vulnerabilities[0].entry.title == "MITRE Caldera Agent Dynamic Compilation RCE"
    )
    assert vulnerabilities[0].risk_rating.name == "CRITICAL"
    assert vulnerabilities[0].vulnerability_location is not None
    assert vulnerabilities[0].dna is not None


def testCVE202527364_whenTargetIsNotCaldera_shouldReturnFalse(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for the accept method when the target does not appear to be a Caldera server."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # Simulate a response that does not contain the Caldera indicator
    requests_mock.get(
        "http://127.0.0.1:80", text="Generic server response without indicator"
    )

    accept = exploit_instance.accept(target)

    assert accept is False


def testCVE202527364_whenTargetRaisesException_shouldReturnFalse(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for the accept method to ensure request exceptions are handled gracefully."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # Simulate a request exception (e.g., connection error)
    requests_mock.get("http://127.0.0.1:80", exc=requests_exceptions.RequestException)

    accept = exploit_instance.accept(target)

    assert accept is False


def testCVE202527364_whenTargetIsNotVulnerable_reportsNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for File Download Header Injection exploit, case when target is not vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.post("http://127.0.0.1:80/file/download", status_code=404)

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202527364_whenRequestExceptionOccurs_doesNotRaise(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for File Download Header Injection exploit, ensuring request exceptions are handled gracefully."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.post(
        "http://127.0.0.1:80/file/download", exc=requests_exceptions.RequestException
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202527364_whenHeadersAreInjected_logsCorrectly(
    requests_mock: req_mock.mocker.Mocker,
    caplog: pytest.LogCaptureFixture,
) -> None:
    """Unit test to verify logging when headers are injected."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=80)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # Set up the mocked POST request for a successful exploit attempt
    requests_mock.post("http://127.0.0.1:80/file/download", status_code=200)

    with caplog.at_level(logging.INFO):
        exploit_instance.check(target)

    # Check that the expected log message is present in the captured logs
    assert "Target URL is vulnerable" in caplog.text
