"""Unit tests for CVE-2025-27364"""

import time
from typing import Callable

import requests_mock as req_mock
from _pytest import monkeypatch
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2025_27364


def make_fake_time(times: list[float]) -> Callable[[], float]:
    """Return a fake time function that pops values from the list,
    and returns the last value when exhausted."""
    times = list(times)
    last = times[-1] if len(times) > 0 else 0

    def fake_time() -> float:
        if times:
            return times.pop(0)
        return last

    return fake_time


def testCVE202527364_whenTargetIsCaldera_accepts(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test when the target appears to be a Caldera server."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.get(
        "http://127.0.0.1:8000", text="Welcome! Login | CALDERA dashboard"
    )

    accept = exploit_instance.accept(target)
    assert accept is True


def testCVE202527364_whenTargetIsNotCaldera_rejects(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test when the target is not a Caldera server."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.get("http://127.0.0.1:8000", text="Generic Web Service")

    accept = exploit_instance.accept(target)
    assert accept is False


def testCVE202527364_whenGetRequestExceptionInAccept_returnsFalse(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that exceptions during GET in accept are handled gracefully."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.get("http://127.0.0.1:8000", exc=requests_exceptions.RequestException)

    accept = exploit_instance.accept(target)
    assert accept is False


def testCVE202527364_whenVulnerabilityDetected_reportsVulnerability(
    requests_mock: req_mock.mocker.Mocker, monkeypatch: monkeypatch.MonkeyPatch
) -> None:
    """Test case when the sleep command causes a noticeable delay, indicating vulnerability."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # Override the POST method to a simple lambda that returns a fake response.
    exploit_instance.session.post = lambda url, headers, **kwargs: type(
        "FakeResponse", (), {"text": "response"}
    )

    # Fake time values:
    # Baseline: start=100.0, end=100.5 (duration = 0.5 sec)
    # Sleep command: start=200.0, end=204.0 (duration = 4.0 sec)
    fake_times = [100.0, 100.5, 200.0, 204.0]
    monkeypatch.setattr(time, "time", make_fake_time(fake_times))

    vulnerabilities = exploit_instance.check(target)
    vuln = vulnerabilities[0]

    assert len(vulnerabilities) > 0
    assert vuln.entry.title == "MITRE Caldera Agent Dynamic Compilation RCE"
    assert vuln.risk_rating.name == "CRITICAL"
    assert vuln.vulnerability_location is not None
    assert vuln.dna is not None


def testCVE202527364_whenVulnerabilityNotDetected_reportsNothing(
    requests_mock: req_mock.mocker.Mocker, monkeypatch: monkeypatch.MonkeyPatch
) -> None:
    """Test case when the sleep command delay is insufficient to indicate vulnerability."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # Override the POST method to a simple lambda that returns a fake response.
    exploit_instance.session.post = lambda url, headers, **kwargs: type(
        "FakeResponse", (), {"text": "response"}
    )

    # Fake time values:
    # Baseline: start=100.0, end=100.5 (duration = 0.5 sec)
    # Sleep command: start=200.0, end=201.0 (duration = 1.0 sec, below threshold)
    fake_times = [100.0, 100.5, 200.0, 201.0]
    monkeypatch.setattr(time, "time", make_fake_time(fake_times))

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202527364_whenRequestExceptionOccurs_doesNotRaise(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that exceptions during POST in check are handled gracefully."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8000)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    requests_mock.post(
        "http://127.0.0.1:8000/file/download", exc=requests_exceptions.RequestException
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def test() -> None:
    """Test when the target appears to be a Caldera server."""
    target = definitions.Target(scheme="http", host="localhost", port=8888)
    exploit_instance = cve_2025_27364.CalderaAgentCompilationRCEExploit()

    # accept = exploit_instance.accept(target)
    # assert accept is True

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) > 0
