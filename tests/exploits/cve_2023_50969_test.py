"""Unit tests for Agent Asteroid: CVE-2023-50969"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_50969


def testCVE202350969_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-50969 unit test: case when target is vulnerable."""
    requests_mock.post(
        "https://localhost:443/a",
        text="<td>This page can't be displayed. Contact support for additional information.<br/>"
        "The event ID is: 7333413345535601321. The incident ID is: N/A</td></tr></table></td>",
        status_code=209,
    )
    requests_mock.post(
        "https://localhost:443/b",
        text="<html><head><title>Object moved</title></head><body>",
        status_code=302,
    )
    exploit_instance = cve_2023_50969.CVE202350969Exploit()
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Imperva SecureSphere WAF Bypass for POST Data Inspection Rules"
    )
    assert vulnerability.technical_detail == (
        "https://localhost:443/ is vulnerable to CVE-2023-50969, Imperva SecureSphere "
        "WAF Bypass for POST Data Inspection Rules"
    )


def testCVE202350969_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-50969 unit test: case when target is safe."""
    exploit_instance = cve_2023_50969.CVE202350969Exploit()
    requests_mock.post(
        re.compile("https://localhost:443/"),
        text="<td>This page can't be displayed. Contact support for additional information.<br/>"
        "The event ID is: 7333413345535601321. The incident ID is: N/A</td></tr></table></td>",
        status_code=404,
    )
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
