"""Unit tests for CVE-2018-14667"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2018_14667


def testCVE201814667_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2018-14667, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8081)
    exploit_instance = cve_2018_14667.CVE201814667Exploit()
    requests_mock.get(
        "http://127.0.0.1:8081/",
        headers={"X-Powered-By": "JSF/1.2"},
        content=b"""<script src="/a4j/g/3_3_3.Final/org/ajax4jsf/framework.pack.js" '
        'type="text/javascript"></script><script src="/a4j/g/3_3_3.Final/'
        'org/richfaces/ui.pack.js" type="text/javascript"></script><link '
        'class="component" href="/a4j/s/3_3_3.Final/org/richfaces/skin.xcss'
        '/DATB/eAELXT5DOhSIAQ!sA18_" rel="stylesheet" type="text/css" />'
        '<link class="user" href="/stylesheet/theme.css" rel="stylesheet" '
        'type="text/css" /><script src="/js/remoteLogin.js" type="text/javascript">'
        '</script><link rel="shortcut icon" href="/favicon.ico" />""",
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Red Hat JBoss RichFaces Framework Expression Language Injection Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:8081/ is vulnerable to CVE-2018-14667, Red Hat JBoss "
        "RichFaces Framework Expression Language Injection Vulnerability"
    )
    assert vulnerability.risk_rating.name == "CRITICAL"


def testCVE201814667_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2018-14667, case when target is safe."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8081)
    exploit_instance = cve_2018_14667.CVE201814667Exploit()
    requests_mock.get("http://127.0.0.1:8081/")

    accept = exploit_instance.accept(target)

    assert accept is False
