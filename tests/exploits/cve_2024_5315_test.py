"""Unit tests for Agent Asteroid: CVE-2024-5315"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_5315


def testCVE20245315_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-5315 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Identifiant @ 9.0.1</title>",
        status_code=200,
    )
    exploit_instance = cve_2024_5315.CVE20245315Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Dolibarr ERP-CRM 9.0.1 - SQL Injection"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-5315, Dolibarr ERP-CRM 9.0.1 - SQL Injection"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20245315_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-5315 unit test: case when target is safe."""
    exploit_instance = cve_2024_5315.CVE20245315Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Login @ 11.0.0</title>",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
