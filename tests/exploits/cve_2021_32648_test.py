"""Unit tests for Agent Asteroid: CVE_2021_32648."""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2021_32648


def testCVE202132648_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that the exploit reports findings when the application is vulnerable."""
    exploit_instance = cve_2021_32648.CVE202132648Exploit()
    url = "https://68.183.191.108:443"
    requests_mock.get(
        f"{url}/backend/backend/auth/restore",
        status_code=200,
        content=b'<meta name="csrf-token" content="token">',
    )
    requests_mock.post(f"{url}/backend/backend/auth/restore", status_code=200)
    requests_mock.post(f"{url}/backend/backend/auth/signin", status_code=200)
    reset_post_regex = re.compile(rf"{url}/backend/backend/auth/reset/1/\w+")
    requests_mock.post(reset_post_regex, status_code=200)
    target = definitions.Target("https", "68.183.191.108", 443)

    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "October CMS password recovery vulnerability: CVE-2021-32648"
    )
    assert (
        vulnerability.technical_detail
        == "https://68.183.191.108:443 is vulnerable to CVE-2021-32648: the admin user's "
        "password being changed to `ChangePassword`."
    )


def testCVE202132648_whenNotVulnerable_noFindingsReported(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Ensure that there is no findings when the application is not vulnerable."""
    exploit_instance = cve_2021_32648.CVE202132648Exploit()
    url = "https://68.183.191.108:443"
    requests_mock.get(
        f"{url}/backend/backend/auth/restore", status_code=200, content=b""
    )
    target = definitions.Target("https", "68.183.191.108", 443)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
