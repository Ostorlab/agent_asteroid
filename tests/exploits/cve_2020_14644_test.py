"""Unit tests for Agent Asteroid: CVE-2020-14644"""

import requests_mock as req_mock
import requests

from agent import definitions
from agent.exploits import cve_2020_14644


def testCVE202014644_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "WebLogic Server 12.2.1.4.0"},
        status_code=200,
    )
    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title == "WebLogic Remote Command Execution Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:7001 is vulnerable to CVE-2020-14644, WebLogic Remote Command Execution "
        "Vulnerability"
    )


def testCVE202014644_whenSafeVersion_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when target is safe."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "WebLogic Server 12.2.1.5.0"},
        status_code=200,
    )
    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202014644_whenRequestException_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when a request exception occurs."""
    requests_mock.get(
        "http://localhost:7001/",
        exc=requests.RequestException("Mocked network error"),
    )

    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202014644_whenNoVersion_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when no version is found in the server header."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "WebLogic Server"},
        status_code=200,
    )

    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def test_CVE202014644_whenNoWeblogic_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when the server is not WebLogic."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "Apache/2.4.41 (Ubuntu)"},
        status_code=200,
    )

    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def test_CVE202014644_whenInvalidVersion_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-14644 unit test: case when an invalid version is encountered."""
    requests_mock.get(
        "http://localhost:7001/",
        headers={"Server": "WebLogic Server Invalid.Version"},
        status_code=200,
    )

    exploit_instance = cve_2020_14644.CVE202014644Exploit()
    target = definitions.Target("http", "localhost", 7001)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
