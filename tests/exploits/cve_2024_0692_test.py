"""Unit tests for Agent Asteroid: CVE-2024-0692"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_0692


def testCVE20240692_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-0692 unit test: case when target is vulnerable."""
    requests_mock.get(
        "https://localhost:443/webui/",
        text="<title>SolarWinds Security Event Manager</title>",
        status_code=200,
    )
    requests_mock.post(
        "https://localhost:443/services/messagebroker/streamingamf",
        content=b"\x00\x03\x00\x00\x00\x01\x00\t/onStatus\x00\x00\x00\x00\x00\x01\x11\n\x81SIflex.messaging.messages.ErrorMessage"
        b"\x0fheaders\x11clientId\x17destination\x13messageId\x17faultDetail\tbody\x15timeToLive\x13faultCode\x17faultString"
        b"\x13rootCause\x1bcorrelationId\x13timestamp\x19extendedData\n\x03\x01\x01\x01\x06IEA598C3A-800C-9232-5F82-20753B420335"
        b"\x01\x01\x05\x00\x00\x00\x00\x00\x00\x00\x00\x06\x1fVersionMismatch\x06?Unsupported AMF version 24,930.\x01\x01\x05Bx"
        b"\xe1\x8b\x82(\x00\x00\x01",
        status_code=200,
    )
    exploit_instance = cve_2024_0692.CVE20240692Exploit()
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "SolarWinds Security Event Manager unauthenticated remote code execution"
    )
    assert vulnerability.technical_detail == (
        "https://localhost:443/ is vulnerable to CVE-2024-0692, SolarWinds Security "
        "Event Manager unauthenticated remote code execution"
    )


def testCVE20240692_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-0692 unit test: case when target is safe."""
    exploit_instance = cve_2024_0692.CVE20240692Exploit()
    requests_mock.get(
        "https://localhost:443/webui/",
        text="<title>SolarWinds Security Event Manager</title>",
        status_code=200,
    )
    requests_mock.post(
        "https://localhost:443/services/messagebroker/streamingamf",
        content=b"Go to LEM UI",
        status_code=503,
    )
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
