"""Unit tests for Agent Asteroid: CVE-2024-4040"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_4040


def testCVE20244040_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-4040 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/WebInterface/",
        status_code=302,
        headers={
            "Set-Cookie": "CrushAuth=1714751147976_Dj7NZXa7qUKuLXNXEAWWQfFmztVKyr"
        },
    )
    requests_mock.post(
        "http://localhost:80/WebInterface/function/",
        status_code=200,
        text="<groups",
    )

    exploit_instance = cve_2024_4040.CVE20244040Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Unauthenticated arbitrary file read and remote code execution in CrushFTP"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-4040, Unauthenticated "
        "arbitrary file read and remote code execution in CrushFTP"
    )


def testCVE20244040_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-4040 unit test: case when target is safe."""
    requests_mock.get(
        "http://localhost:80/WebInterface/",
        status_code=302,
        headers={
            "Set-Cookie": "CrushAuth=1714751147976_Dj7NZXa7qUKuLXNXEAWWQfFmztVKyr"
        },
    )
    requests_mock.post(
        "http://localhost:80/WebInterface/function/",
        status_code=200,
        text="<commandResult><response><INCLUDE>",
    )

    exploit_instance = cve_2024_4040.CVE20244040Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
