"""Unit tests for Agent Asteroid: CVE-2023-28461"""

import requests_mock as req_mock
from agent import definitions
from agent.exploits import cve_2023_28461
from unittest import mock

VULNERABLE_RESPONSE = """
    </script>
    <script>document.title=_AN_str_title_login;</script>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="/prx/000/http/localh/portal.css?v=Rel_AG_9_4_0_233">
    <meta id="viewport" name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" />
    <script language="JavaScript" src="/prx/000/http/localh/an_util.js?v=Rel_AG_9_4_0_233" charset="UTF-8"></script>
"""

SAFE_RESPONSE = """
    </script>
    <script>document.title=_AN_str_title_login;</script>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="/prx/000/http/localh/portal.css?v=Rel_AG_9_4_0_482">
    <meta id="viewport" name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" />
    <script language="JavaScript" src="/prx/000/http/localh/an_util.js?v=Rel_AG_9_4_0_482" charset="UTF-8"></script>
"""

NO_VERSION_RESPONSE = """
    </script>
    <script>document.title=_AN_str_title_login;</script>
    <title>Login</title>
    <link rel="stylesheet" type="text/css" href="/prx/000/http/localh/portal.css">
    <meta id="viewport" name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=0" />
    <script language="JavaScript" src="/prx/000/http/localh/an_util.js" charset="UTF-8"></script>
"""


def testCVE202328461_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-28461 unit test: case when the target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/prx/000/http/localhost/login",
        text=VULNERABLE_RESPONSE,
        status_code=200,
    )

    with mock.patch(
        "agent.exploits.cve_2023_28461._send_ssl_request",
        return_value=VULNERABLE_RESPONSE,
    ):
        exploit_instance = cve_2023_28461.CVE202328461Exploit()
        target = definitions.Target("http", "localhost", 80)

        accept = exploit_instance.accept(target)
        vulnerabilities = exploit_instance.check(target)

        assert accept is True
        assert len(vulnerabilities) > 0
        vulnerability = vulnerabilities[0]
        assert (
            vulnerability.entry.title
            == "Array Networks Array AG Series and vxAG Remote Code Execution Vulnerability"
        )
        assert (
            vulnerability.technical_detail
            == "http://localhost:80/ is vulnerable to CVE-2023-28461, Array Networks Array AG Series and vxAG Remote Code Execution Vulnerability"
        )


def testCVE202328461_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-28461 unit test: case when the target is safe."""
    requests_mock.get(
        "http://localhost:80/prx/000/http/localhost/login",
        text=SAFE_RESPONSE,
        status_code=200,
    )

    with mock.patch(
        "agent.exploits.cve_2023_28461._send_ssl_request", return_value=SAFE_RESPONSE
    ):
        exploit_instance = cve_2023_28461.CVE202328461Exploit()
        target = definitions.Target("http", "localhost", 80)

        accept = exploit_instance.accept(target)
        vulnerabilities = exploit_instance.check(target)

        assert accept is True
        assert len(vulnerabilities) == 0


def testCVE202328461_whenNoVersionFound_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-28461 unit test: case when the server does not include a version."""
    requests_mock.get(
        "http://localhost:80/prx/000/http/localhost/login",
        text=NO_VERSION_RESPONSE,
        status_code=200,
    )

    with mock.patch(
        "agent.exploits.cve_2023_28461._send_ssl_request",
        return_value=NO_VERSION_RESPONSE,
    ):
        exploit_instance = cve_2023_28461.CVE202328461Exploit()
        target = definitions.Target("http", "localhost", 80)

        accept = exploit_instance.accept(target)
        vulnerabilities = exploit_instance.check(target)

        assert accept is False
        assert len(vulnerabilities) == 0
