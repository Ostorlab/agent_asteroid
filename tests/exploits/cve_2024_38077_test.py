"""Unit tests for Agent Asteroid: CVE-2024-38077"""

from unittest import mock
from unittest.mock import patch

from impacket.dcerpc.v5.rpcrt import DCERPCException  # type: ignore

from agent import definitions
from agent.exploits import cve_2024_38077


@patch("agent.exploits.cve_2024_38077._connect_to_license_server")
def testAcceptExploit_whenVulnerable_shouldReturnTrue(
    mock_connect_to_license_server: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method against a known vulnerable target."""
    exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
    mock_connect_to_license_server.return_value = "0x1234"

    target = definitions.Target("tcp", "localhost", 135)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert (
        len(vulnerabilities) > 0
    ), f"Expected vulnerabilities for target {target.origin}, but found none"


@patch("agent.exploits.cve_2024_38077._connect_to_license_server")
def testAcceptExploit_whenSafe_shouldReturnFalse(
    mock_connect_to_license_server: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method against a known safe target."""
    exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
    mock_connect_to_license_server.return_value = None

    target = definitions.Target("tcp", "localhost", 135)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert (
        len(vulnerabilities) == 0
    ), f"Expected no vulnerabilities for target {target.origin}, but found {len(vulnerabilities)}"


@patch(
    "agent.exploits.cve_2024_38077._connect_to_license_server",
    side_effect=Exception("Connection failed"),
)
def testAccept_whenConnectionFails_shouldReturnFalse(
    mock_connect_to_license_server: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method when connection to the license server fails."""

    exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
    target = definitions.Target("tcp", "localhost", 1350)

    accept = exploit_instance.accept(target)

    assert accept is False


@mock.patch(
    "agent.exploits.cve_2024_38077._connect_to_license_server",
    side_effect=DCERPCException("DCERPC Exception occurred"),
)
def testAccept_whenDCERPCExceptionIsRaised_shouldHandleException(
    mock_connect_to_license_server: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method when a DCERPCException is raised."""

    exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
    target = definitions.Target("tcp", "localhost", 1350)

    accept = exploit_instance.accept(target)

    assert accept is False


@mock.patch(
    "agent.exploits.cve_2024_38077._connect_to_license_server",
    side_effect=Exception("Generic Exception occurred"),
)
def testAccept_whenGenericExceptionIsRaised_shouldHandleException(
    mock_connect_to_license_server: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method when a generic Exception is raised."""

    exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
    target = definitions.Target("tcp", "localhost", 1350)

    accept = exploit_instance.accept(target)

    assert accept is False
