"""Unit tests for Agent Asteroid: CVE-2024-38077"""

from unittest import mock
from impacket.dcerpc.v5.rpcrt import DCERPCException  # type: ignore

from agent import definitions
from agent.exploits import cve_2024_38077


def testAccept_whenConnectionSuccessful_reportTrue() -> None:
    """Test the accept method when connection is successful."""
    with mock.patch(
        "agent.exploits.cve_2024_38077._connect_to_license_server",
        return_value="0x1234",
    ):
        exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
        target = definitions.Target("tcp", "192.168.1.1", 135)

        assert exploit_instance.accept(target) is True


def testAccept_whenConnectionFails_reportFalse() -> None:
    """Test the accept method when connection fails."""
    with mock.patch(
        "agent.exploits.cve_2024_38077._connect_to_license_server", return_value=None
    ):
        exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
        target = definitions.Target("tcp", "192.168.1.1", 135)

        assert exploit_instance.accept(target) is False


def testCVE202438077_whenVulnerable_reportFinding() -> None:
    """Test the check method when a vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_38077._connect_to_license_server",
        return_value="0x1234",
    ):
        exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
        target = definitions.Target("tcp", "192.168.1.1", 135)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 1
        assert (
            vulnerabilities[0].entry.title
            == "Windows Remote Desktop Licensing Service RCE"
        )


def testCVE202438077_whenNotVulnerable_reportNothing() -> None:
    """Test the check method when no vulnerability is found."""
    with mock.patch(
        "agent.exploits.cve_2024_38077._connect_to_license_server", return_value=None
    ):
        exploit_instance = cve_2024_38077.WindowsRDLServiceExploit()
        target = definitions.Target("tcp", "192.168.1.1", 135)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0


@mock.patch("agent.exploits.cve_2024_38077.transport.DCERPCTransportFactory")
@mock.patch("agent.exploits.cve_2024_38077.epm.hept_map")
def testConnectToLicenseServer_whenSuccessful_returnVersion(
    mock_hept_map: mock.MagicMock, mock_transport_factory: mock.MagicMock
) -> None:
    """Test _connect_to_license_server when connection is successful."""
    mock_hept_map.return_value = "ncacn_ip_tcp:192.168.1.1[135]"
    mock_dce = mock.MagicMock()
    mock_dce.request.return_value = {"ctx_handle": mock.MagicMock(), "version": 0x1234}
    mock_transport = mock.MagicMock()
    mock_transport.get_dce_rpc.return_value = mock_dce
    mock_transport_factory.return_value = mock_transport

    result = cve_2024_38077._connect_to_license_server("192.168.1.1")

    assert result == "0x1234"


@mock.patch("agent.exploits.cve_2024_38077.transport.DCERPCTransportFactory")
@mock.patch("agent.exploits.cve_2024_38077.epm.hept_map")
def testConnectToLicenseServer_whenDCERPCException_returnNone(
    mock_hept_map: mock.MagicMock, mock_transport_factory: mock.MagicMock
) -> None:
    """Test _connect_to_license_server when a DCERPCException occurs."""
    mock_hept_map.return_value = "ncacn_ip_tcp:192.168.1.1[135]"
    mock_dce = mock.MagicMock()
    mock_dce.request.side_effect = DCERPCException("Test exception")
    mock_transport = mock.MagicMock()
    mock_transport.get_dce_rpc.return_value = mock_dce
    mock_transport_factory.return_value = mock_transport

    result = cve_2024_38077._connect_to_license_server("192.168.1.1")

    assert result is None
