"""Unit tests for Agent Asteroid: CVE-2024-3273"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_3273


def testCVE20243273_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-3273 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text='document.location.href="/web/relogin.html";',
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/cgi-bin/nas_sharing.cgi",
        text="account_mgr.cgi"
        "addon_center.cgi"
        '<?xml version="1.0" encoding="UTF-8"?> '
        "<config><nas_sharing><auth_state>1</auth_state></nas_sharing></config>",
        status_code=200,
    )
    exploit_instance = cve_2024_3273.CVE20243273Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "D-Link Multiple NAS Devices Command Injection Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-3273, D-Link Multiple NAS "
        "Devices Command Injection Vulnerability"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE20243273_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-3273 unit test: case when target is safe."""
    exploit_instance = cve_2024_3273.CVE20243273Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text='document.location.href="/web/relogin.html";',
        status_code=200,
    )
    requests_mock.get(
        "http://localhost:80/cgi-bin/nas_sharing.cgi",
        text='<?xml version="1.0" encoding="UTF-8"?> <config><nas_sharing>'
        "<auth_state>1</auth_state></nas_sharing></config>",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
