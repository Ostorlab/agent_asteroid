"""Unit tests for Agent Asteroid: CVE-2024-47533"""

import xmlrpc.client
from unittest import mock

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_47533


MOCK_VULNERABLE_RESPONSE = """
    <?xml version='1.0'?>
    <methodResponse>
        <params>
            <param>
                <value>
                    <string>token123</string>
                </value>
            </param>
        </params>
    </methodResponse>
    """

MOCK_SECURE_RESPONSE = """<?xml version='1.0'?>
    <methodCall>
    <methodName>login</methodName>
    <params>
    <param>
    <value><string></string></value>
    </param>
    <param>
    <value><int>-1</int></value>
    </param>
    </params>
    </methodCall>"""


def testCVE202447533_whenVulnerable_reportFinding(
    mocker: req_mock.mocker.Mocker, requests_mock: req_mock.mocker.Mocker
) -> None:
    """Unit test for CVE-2024-47533: case when target is vulnerable."""

    mock_server_proxy = mock.MagicMock()
    mock_server_proxy.login.return_value = "token123"
    mocker.patch("xmlrpc.client.ServerProxy", return_value=mock_server_proxy)

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        text=MOCK_VULNERABLE_RESPONSE,
        status_code=200,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Cobbler XMLRPC Interface Authentication Bypass"
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-47533, Cobbler XMLRPC Interface Authentication Bypass"
    )


def testCVE202447533_whenSecure_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: case when target is secure."""

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        text=MOCK_SECURE_RESPONSE,
        status_code=200,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202447533_whenConnectionError_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: case when a connection error occurs."""
    requests_mock.get(
        "http://localhost:80/cobbler_api",
        exc=requests.exceptions.ConnectionError,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202447533_when404_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: case when the endpoint returns 404."""

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        status_code=404,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202447533_whenAcceptRespondsWithJsonPattern_shouldProcessNormally(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: accept method matches JSON indicators."""

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        text='{"cobbler_api": "active", "settings": {}}',
        status_code=200,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    result = exploit_instance.accept(target)

    assert result is True


def testCVE202447533_whenAcceptRespondsWithXmlPattern_shouldProcessNormally(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: accept method matches XML indicators."""

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        text=MOCK_SECURE_RESPONSE,
        status_code=200,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    result = exploit_instance.accept(target)

    assert result is True


def testCVE202447533_whenAcceptIsFalse_shouldNotProcessed(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2024-47533: accept method fails when no pattern matches."""

    requests_mock.get(
        "http://localhost:80/cobbler_api",
        text="Unrelated content without JSON or XML indicators.",
        status_code=200,
    )

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    result = exploit_instance.accept(target)

    assert result is False


def testCVE202447533_whenFaultErrorOccurs_authBypassShouldFail(
    mocker: req_mock.mocker.Mocker,
) -> None:
    """Unit test for _attempt_auth_bypass: handles xmlrpc Fault error."""

    mock_server_proxy = mock.MagicMock()
    mock_server_proxy.login.side_effect = xmlrpc.client.Fault(
        faultCode=1, faultString="Authentication failed"
    )
    mocker.patch("xmlrpc.client.ServerProxy", return_value=mock_server_proxy)

    exploit_instance = cve_2024_47533.CVE202447533CobblerExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
