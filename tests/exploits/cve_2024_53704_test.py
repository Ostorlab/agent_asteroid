"""Unit tests for CVE-2024-53704"""

import requests_mock as req_mock
from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2024_53704


def testCVE202453704_whenTargetIsSonicWall_accepts(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for SonicWall SSLVPN exploit, case when the target is SonicWall."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2024_53704.SonicWallSSLVPNAuthBypassExploit()

    requests_mock.get("https://127.0.0.1:4433", text="SonicWALL NetExtender SSL-VPN")

    accept = exploit_instance.accept(target)
    assert accept is True


def testCVE202453704_whenTargetIsNotSonicWall_rejects(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for SonicWall SSLVPN exploit, case when the target is not SonicWall."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2024_53704.SonicWallSSLVPNAuthBypassExploit()

    requests_mock.get("https://127.0.0.1:4433", text="Generic VPN Service")

    accept = exploit_instance.accept(target)
    assert accept is False


def testCVE202453704_whenSessionCookieBypassIsSuccessful_reportsVulnerability(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for SonicWall SSLVPN exploit, case when session cookie brute-force is successful."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2024_53704.SonicWallSSLVPNAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/__api__/v1/client/sessionstatus",
        json={"status": "active"},
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) > 0
    assert vulnerabilities[0].entry.title == "SonicWall SSLVPN Authentication Bypass"
    assert vulnerabilities[0].risk_rating.name == "CRITICAL"


def testCVE202453704_whenSessionCookieBypassFails_reportsNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for SonicWall SSLVPN exploit, case when brute-force does not find a valid session cookie."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2024_53704.SonicWallSSLVPNAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/__api__/v1/client/sessionstatus",
        json={"status": "notfound"},
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0


def testCVE202453704_whenRequestExceptionOccurs_doesNotRaise(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for SonicWall SSLVPN exploit, ensuring request exceptions are handled gracefully."""
    target = definitions.Target(scheme="https", host="127.0.0.1", port=4433)
    exploit_instance = cve_2024_53704.SonicWallSSLVPNAuthBypassExploit()

    requests_mock.get(
        "https://127.0.0.1:4433/__api__/v1/client/sessionstatus",
        exc=requests_exceptions.RequestException,
    )

    vulnerabilities = exploit_instance.check(target)
    assert len(vulnerabilities) == 0
