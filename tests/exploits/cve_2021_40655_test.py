"""Unit tests for Agent Asteroid: CVE-2021-40655"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2021_40655


def testCVE202140655E_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2021-40655 unit test: case when target is vulnerable."""
    exploit_instance = cve_2021_40655.CVE202140655Exploit()
    requests_mock.get(
        re.compile("http://localhost:8000/"),
        text="D-Link",
        status_code=200,
        headers={"Content-Type": "application/x-www-form-urlencoded"},
    )
    requests_mock.post(
        "http://localhost:8000/getcfg.php",
        text="DEVICE.ACCOUNT",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 8000)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Information disclosure issue exists in D-LINK-DIR-605 B2"
    )
    assert (
        vulnerability.technical_detail
        == "http://localhost:8000 is vulnerable to CVE-2021-40655, Information disclosure issue exists in "
        "D-LINK-DIR-605 B2"
    )


def testCVE202140655_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2021-40655 unit test: case when target is safe."""
    exploit_instance = cve_2021_40655.CVE202140655Exploit()
    requests_mock.get(
        re.compile("http://localhost:8000/"),
        text="D-Link",
        status_code=200,
        headers={"Content-Type": "application/x-www-form-urlencoded"},
    )
    requests_mock.post(
        "http://localhost:8000/getcfg.php",
        text="D-Link",
        status_code=200,
        headers={"Content-Type": "application/x-www-form-urlencoded"},
    )
    target = definitions.Target("http", "localhost", 8000)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
