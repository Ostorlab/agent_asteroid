"""Unit tests for CVE-2014-7169"""
import datetime
import random

import requests
from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2014_7169


def testCVE20147169_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """Unit test for CVE-2014-7169, case when target is vulnerable"""
    delays = [60, 50, 40, 30]

    def side_effect(*args, **kwargs):  # type: ignore[no-untyped-def]
        mock_response = mocker.Mock(spec=requests.Response)
        elapsed = datetime.timedelta(seconds=delays.pop())

        mock_response.elapsed = elapsed
        return mock_response

    mocker.patch("requests.sessions.Session.get", side_effect=side_effect)

    target = definitions.Target(
        scheme="http", host="127.0.0.1", port=8081, path="/cgi-bin/vulnerable.cgi"
    )
    exploit_instance = cve_2014_7169.CVE20147169Exploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]

    assert (
        vulnerability.entry.title
        == "GNU Bourne-Again Shell (Bash) Arbitrary Code Execution Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:8081/cgi-bin/vulnerable.cgi is vulnerable to CVE-2014-7169, "
        "GNU Bourne-Again Shell (Bash) Arbitrary Code Execution Vulnerability."
    )


def testCVE20147169_whenSafe_reportNothing(mocker: plugin.MockerFixture) -> None:
    """Unit test for CVE-2014-7169, case when target is safe."""

    def side_effect(*args, **kwargs):  # type: ignore[no-untyped-def]
        mock_response = mocker.Mock(spec=requests.Response)
        elapsed = datetime.timedelta(seconds=random.randint(30, 90))
        mock_response.elapsed = elapsed
        return mock_response

    mocker.patch("requests.sessions.Session.get", side_effect=side_effect)
    target = definitions.Target(scheme="https", host="127.0.0.1", port=8081)
    exploit_instance = cve_2014_7169.CVE20147169Exploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
    assert exploit_instance.session.max_redirects == 2
