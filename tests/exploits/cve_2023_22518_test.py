"""Unit tests for CVE-2023-22518"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_22518


def testCVE202322518_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2023-22518, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8090)
    exploit_instance = cve_2023_22518.CVE202322518Exploit()
    requests_mock.get(
        re.compile("http://127.0.0.1:8090"),
        content=b'<meta name="ajs-version-number" content="8.5.1">',
    )
    requests_mock.post(re.compile("http://127.0.0.1:8090"), status_code=200)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert accept is True
    assert (
        vulnerability.entry.title
        == "Improper Authorization Vulnerability In Confluence Data Center and Server"
    )
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:8090/ is vulnerable to CVE-2023-22518, Improper "
        "Authorization Vulnerability In Confluence Data Center and Server"
    )
    assert vulnerability.risk_rating.name == "CRITICAL"
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202322518_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2023-22518, case when target is safe."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8090)
    exploit_instance = cve_2023_22518.CVE202322518Exploit()
    requests_mock.get(
        re.compile("http://127.0.0.1:8090"),
        content=b'<meta name="ajs-version-number" content="8.6.1">',
    )

    accept = exploit_instance.accept(target)

    assert accept is False
