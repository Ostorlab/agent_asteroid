"""Unit tests for CVE-2023-45727"""

import re

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_45727


def testCVE202345727_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2023-45727, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8080)
    exploit_instance = cve_2023_45727.CVE202345727Exploit()
    requests_mock.get(
        re.compile("http://127.0.0.1:8080/proself/login/login.go\\?AD=init"),
        content=b"<title>Proself Login</title>",
    )
    requests_mock.post(
        re.compile("http://127.0.0.1:8080/proself/login/login.go\\?AD=init"),
        content=b"Proself Ver.3",
        status_code=200,
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert accept is True
    assert vulnerability.entry.title == "Proself Enterprise/Standard XXE Vulnerability"
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:8080/ is vulnerable to CVE-2023-45727, "
        "Proself Enterprise/Standard XXE Vulnerability"
    )
    assert vulnerability.risk_rating.name == "CRITICAL"


def testCVE202345727_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2023-45727, case when target is safe."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=8080)
    exploit_instance = cve_2023_45727.CVE202345727Exploit()
    requests_mock.get(
        re.compile("http://127.0.0.1:8080/proself/login/login.go\\?AD=init"),
        content=b"<title>Safe Page</title>",
    )

    accept = exploit_instance.accept(target)

    assert accept is False
