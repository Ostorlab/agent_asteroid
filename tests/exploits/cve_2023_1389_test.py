"""Unit tests for Agent Asteriod: CVE-2023-1389"""

import requests_mock as req_mock


from agent import definitions
from agent.exploits import cve_2023_1389


def testCVE20231389_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit report finding when 500 error is triggered."""
    target = definitions.Target("https", "109.239.246.106", 10443)
    requests_mock.get(
        target.url + "cgi-bin/luci/",
        status_code=200,
    )
    requests_mock.get(
        target.url
        + "cgi-bin/luci/;stok=/locale?form=country&operation=write&country=$(notfound)",
        status_code=500,
    )

    exploit_instance = cve_2023_1389.CVE20231389Exploit()
    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]

    assert vulnerability.entry.title == "Remote Code Execution in TP-Link AX21"
    assert (
        vulnerability.technical_detail
        == "https://109.239.246.106:10443 is vulnerable to CVE-2023-1389, Remote Code Execution in TP-Link AX21."
    )
    assert vulnerability.entry.risk_rating == "CRITICAL"


def testCVE20231389_whenNotVulnerable_reportNoFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test exploit don't report finding on 404 pages."""
    target = definitions.Target("https", "109.239.246.106", 10443)
    requests_mock.get(
        target.url + "cgi-bin/luci/",
        status_code=404,
    )
    requests_mock.get(
        target.url
        + "cgi-bin/luci/;stok=/locale?form=country&operation=write&country=$(notfound)",
        status_code=404,
    )

    exploit_instance = cve_2023_1389.CVE20231389Exploit()
    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0
