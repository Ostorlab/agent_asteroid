"""Unit tests for Agent Asteroid: CVE-2024-27497"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_27497


def testCVE202427497_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-27497 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/position.js",
        text='var session_key = "8f70c9c1728c57cf144c039e6a778356";'
        'new Array("Basic Setup", "index.asp", "HSetup.asp");',
        status_code=200,
    )
    exploit_instance = cve_2024_27497.CVE202427497Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Linksys E2000 1.0.06 authentication bypass"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-27497, Linksys E2000 1.0.06 "
        "authentication bypass"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202427497_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-27497 unit test: case when target is safe."""
    exploit_instance = cve_2024_27497.CVE202427497Exploit()
    requests_mock.get(
        "http://localhost:80/position.js",
        text='new Array("Basic Setup", "index.asp", "HSetup.asp");',
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
