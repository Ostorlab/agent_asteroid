"""Unit tests for Agent Asteroid: CVE-2024-51479"""

import requests_mock as req_mock
from agent import definitions
from agent.exploits import cve_2024_51479


def testCVE202451479_whenVulnerable_reportFinding(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-51479 unit test: case when target is vulnerable."""
    exploit_instance = cve_2024_51479.CVE202451479Exploit()

    requests_mock.get(
        "http://localhost:80/",
        text='<script src="/_next/static/chunks/main-e9671ac36ff4266e.js" defer=""></script>',
        status_code=200,
    )

    requests_mock.get(
        "http://localhost:80/_next/static/chunks/main-e9671ac36ff4266e.js",
        text='t.version="14.2.14"',
        status_code=200,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Next.js Authorization Bypass via Middleware"
    assert (
        vulnerability.technical_detail
        == "http://localhost:80/ is vulnerable to CVE-2024-51479, Next.js Authorization Bypass via Middleware"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202451479_whenSafe_reportNothing(requests_mock: req_mock.Mocker) -> None:
    """CVE-2024-51479 unit test: case when target is safe."""
    exploit_instance = cve_2024_51479.CVE202451479Exploit()

    requests_mock.get(
        "http://localhost:80/",
        text='<script src="/_next/static/chunks/main-e9671ac36ff4266e.js" defer=""></script>',
        status_code=200,
    )

    requests_mock.get(
        "http://localhost:80/_next/static/chunks/main-e9671ac36ff4266e.js",
        text='t.version="14.2.15"',
        status_code=200,
    )

    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0


def testCVE202451479_whenChunkNotFound_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-51479 unit test: case when chunk file is not found."""
    requests_mock.get(
        "http://localhost:80/",
        text="<html><body>No chunk here</body></html>",
        status_code=200,
    )

    exploit_instance = cve_2024_51479.CVE202451479Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False


def testCVE202451479_whenChunkFileNotAccessible_reportNothing(
    requests_mock: req_mock.Mocker,
) -> None:
    """CVE-2024-51479 unit test: case when chunk file is inaccessible."""

    requests_mock.get(
        "http://localhost:80/",
        text='<script src="/_next/static/chunks/main-e9671ac36ff4266e.js" defer=""></script>',
        status_code=200,
    )

    requests_mock.get(
        "http://localhost:80/_next/static/chunks/main-e9671ac36ff4266e.js",
        status_code=404,
    )

    exploit_instance = cve_2024_51479.CVE202451479Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
