"""Unit tests for Agent Asteroid: CVE-2014-2120"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2014_2120


def create_mock_vulnerable_response() -> str:
    """Create a mock HTML response with the XSS vulnerability reflected."""
    return """
    <html>
        <body>
            <input type="hidden" name="auth_handle" value="test123"'">
            <input type="hidden" name="username" value="test123"'">
        </body>
    </html>
    """


def create_mock_secure_response() -> str:
    """Create a mock HTML response without the XSS vulnerability reflected."""
    return """
    <html>
        <body>
            <input type="hidden" name="auth_handle" value="test123&quot;">
            <input type="hidden" name="username" value="&quot;test123">
        </body>
    </html>
    """


def testCVE20142120_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2014-2120: case when target is vulnerable."""

    requests_mock.get(
        "http://localhost:80/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle=test123%22'&status=0&username=test123%22'&password_min=0&state=&tgroup=&serverType=0&password_days=0",
        text=create_mock_vulnerable_response(),
        status_code=200,
    )

    exploit_instance = cve_2014_2120.CVE20142120XSSExploit()
    target = definitions.Target("http", "localhost", 80, "/path/to/resource")

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Cisco ASA WebVPN Login Page XSS Vulnerability"
    assert vulnerability.technical_detail == (
        "http://localhost:80/path/to/resource is vulnerable to CVE-2014-2120, Cisco ASA WebVPN Login Page XSS Vulnerability"
    )


def testCVE20142120_whenSecure_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2014-2120: case when target is secure."""
    requests_mock.get(
        "http://localhost:80/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle=test123\"'&status=0&username=test123\"'&password_min=0&state=&tgroup=&serverType=0&password_days=0",
        text=create_mock_secure_response(),
        status_code=200,
    )

    exploit_instance = cve_2014_2120.CVE20142120XSSExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE20142120_whenConnectionError_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2014-2120: case when a connection error occurs."""
    requests_mock.get(
        "http://localhost:80/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle=test123\"'&status=0&username=test123\"'&password_min=0&state=&tgroup=&serverType=0&password_days=0",
        exc=requests.exceptions.ConnectionError,
    )

    exploit_instance = cve_2014_2120.CVE20142120XSSExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE20142120_whenTimeout_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2014-2120: case when a timeout occurs."""
    requests_mock.get(
        "http://localhost:80/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle=test123\"'&status=0&username=test123\"'&password_min=0&state=&tgroup=&serverType=0&password_days=0",
        exc=requests.exceptions.Timeout,
    )

    exploit_instance = cve_2014_2120.CVE20142120XSSExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
