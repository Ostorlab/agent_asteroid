"""Unit tests for CVE-2016-2386"""

import re

import requests_mock as req_mock
from agent.exploits import cve_2016_2386
from agent import definitions


def testCVE20162386_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2016-2386, case when target is vulnerable."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=50000)
    exploit_instance = cve_2016_2386.CVE20162386Exploit()
    requests_mock.get(
        "http://127.0.0.1:50000",
        headers={"server": "SAP NetWeaver Application Server 7.11 / AS Java 7.11"},
    )
    requests_mock.post(
        re.compile("http://127.0.0.1:50000"),
        content=b"<ns2:deletePermissionByIdResponse></<ns2:deletePermissionByIdResponse>",
    )

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    vulnerability = vulnerabilities[0]
    assert accept is True
    assert vulnerability.entry.title == "SAP NetWeaver SQL Injection Vulnerability"
    assert vulnerability.technical_detail == (
        "http://127.0.0.1:50000/ is vulnerable to CVE-2016-2386, SAP NetWeaver "
        "SQL Injection Vulnerability"
    )
    assert vulnerability.risk_rating.name == "CRITICAL"


def testCVE20162386_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Unit test for CVE-2016-2386, case when target is safe."""
    target = definitions.Target(scheme="http", host="127.0.0.1", port=5000)
    exploit_instance = cve_2016_2386.CVE20162386Exploit()
    requests_mock.get(
        "http://127.0.0.1:5000",
        headers={"server": "SAP NetWeaver Application Server 7.55 / AS Java 7.55"},
    )

    accept = exploit_instance.accept(target)

    assert accept is False
