"""Unit tests for Agent Asteroid: CVE_2024_40711"""

import requests_mock as req_mock
import requests

from agent import definitions
from agent.exploits import cve_2024_40711


def testCVE202440711_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_40711 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/api/v1/serverInfo",
        json={"name": "Veeam Backup and Replication", "buildVersion": "12.1.2.172"},
        status_code=200,
    )
    exploit_instance = cve_2024_40711.CVE202440711Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Veeam Backup & Replication Remote Code Execution Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-40711, Veeam Backup & Replication Remote Code Execution "
        "Vulnerability"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202443044_whenSafeVersion_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_40711 unit test: case when target is safe."""

    requests_mock.get(
        "http://localhost:80/api/v1/serverInfo",
        json={
            "type": "https://httpstatuses.com/404",
            "title": "Not Found",
            "status": 404,
            "extensions": {},
        },
        status_code=404,
    )
    exploit_instance = cve_2024_40711.CVE202440711Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE202440711_whenRequestException_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE_2024_40711 unit test: case when a request exception occurs."""

    requests_mock.get(
        "http://localhost:80/api/v1/serverInfo",
        exc=requests.RequestException("Mocked network error"),
    )

    exploit_instance = cve_2024_40711.CVE202440711Exploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0
