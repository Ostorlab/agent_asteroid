"""Unit tests for Agent Asteroid: CVE-2024-34470"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_34470


def testCVE202434470_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-34470 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/mailinspector/login.php",
        text='''       <div class="footer">
            <div onclick="location.href='https://hscbrasil.com.br';">
                <p>Powered by</p>
                <p>
                    Licensed to TENDA
                    <br>
                    v5.2.17-3
                </p>
            </div>
        </div>''',
        status_code=200,
    )
    exploit_instance = cve_2024_34470.CVE202434470Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "HSC MAILINSPECTOR PATH TRAVERSAL"
    #TODO (youssef) check if there is a more optimazed way for this and continue the test
    assert vulnerability.technical_detail == (
        "http://localhost:80 is vulnerable to CVE-2024-34470, HSC MAILINSPECTOR PATH TRAVERSAL"
    )


def testCVE202428890_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-28890 unit test: case when target is safe."""
    exploit_instance = cve_2024_34470.CVE202434470Exploit()
    requests_mock.get(
        "http://localhost:80/mailinspector/login.php",
        text='''
               <div class="footer">
            <div onclick="location.href='https://hscbrasil.com.br';">
                <p>Powered by</p>
                <p>
                    Licensed to TENDA
                    <br>
                    v5.2.19-3
                </p>
            </div>
        </div>
        ''',
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0