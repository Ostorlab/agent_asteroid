"""Unit tests for Agent Asteroid: CVE-2020-15415"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2020_15415


def testCVE202015415_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-15415 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text="<html><title>Vigor Login Page</title></html>",
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/mainfunction.cgi/cvmcfgupload?1=2",
        text="34ec96cf-d6f1-428a-b955-95080d0536e5",
        status_code=200,
    )
    exploit_instance = cve_2020_15415.DrayTekVigorCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)
    accept = exploit_instance.accept(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title == "Remote Command Execution in DrayTek Vigor Routers"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2020-15415, "
        "Remote Command Execution in DrayTek Vigor Routers"
    )


def testCVE202015415_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-15415 unit test: case when target is safe."""
    requests_mock.post(
        "http://localhost:80/cgi-bin/mainfunction.cgi/cvmcfgupload?1=2",
        text="whatever",
        status_code=200,
    )
    exploit_instance = cve_2020_15415.DrayTekVigorCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202015415_whenRequestException_doesNotCrash(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-15415 unit test: case when a request exception occurs."""
    requests_mock.post(
        "http://localhost:80/cgi-bin/mainfunction.cgi/cvmcfgupload?1=2",
        exc=requests.RequestException("Connection error"),
    )
    exploit_instance = cve_2020_15415.DrayTekVigorCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202015415_whenNotDrayTekVigor_doesNotAccept(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2020-15415 unit test: case when target is not a DrayTek Vigor device."""
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Apache</title>",
        status_code=200,
    )
    exploit_instance = cve_2020_15415.DrayTekVigorCommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False
