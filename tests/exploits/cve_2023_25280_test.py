"""Unit tests for Agent Asteroid: CVE-2023-25280"""

import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2023_25280


def testCVE202325280_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-25280 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text='<td width="100%">&nbsp;&nbsp;<script>show_words(\'TA2\')</script>: <a href="http://www.dlink.com/us/en/support"><script>document.write(model);</script></a></td>',
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/ping.ccp",
        text="44253432",
        status_code=200,
    )
    exploit_instance = cve_2023_25280.DLinkDIR820LA1CommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)
    accept = exploit_instance.accept(target)

    assert accept is True
    assert len(vulnerabilities) == 1
    vulnerability = vulnerabilities[0]
    assert vulnerability.entry.title == "Command Injection in D-Link DIR820LA1"
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2023-25280, "
        "Command Injection in D-Link DIR820LA1"
    )
    assert vulnerability.vulnerability_location is not None
    assert vulnerability.dna is not None


def testCVE202325280_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-25280 unit test: case when target is safe."""
    requests_mock.post(
        "http://localhost:80/ping.ccp",
        text="whatever",
        status_code=200,
    )
    exploit_instance = cve_2023_25280.DLinkDIR820LA1CommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202325280_whenRequestException_doesNotCrash(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-25280 unit test: case when a request exception occurs."""
    requests_mock.post(
        "http://localhost:80/ping.ccp",
        exc=requests.RequestException("Connection error"),
    )
    exploit_instance = cve_2023_25280.DLinkDIR820LA1CommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCVE202325280_whenNotDLinkDIR820LA1_doesNotAccept(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2023-25280 unit test: case when target is not D-Link DIR820LA1."""
    requests_mock.get(
        "http://localhost:80/",
        text="<title>Apache</title>",
        status_code=200,
    )
    exploit_instance = cve_2023_25280.DLinkDIR820LA1CommandInjectionExploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)

    assert accept is False
