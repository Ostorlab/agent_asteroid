"""Unit tests for CVE-2025-0674"""

import socket
from unittest import mock

from agent import definitions
from agent.exploits import cve_2025_0674


@mock.patch("socket.create_connection")
def testElberAuthBypassExploit_whenTargetIsElber_accepts(
    mock_create: mock.MagicMock,
) -> None:
    """Unit test for Elber exploit, case when the target is an Elber ESE DVB-S/S2 device."""
    mock_sock = mock.MagicMock()
    mock_create.return_value = mock_sock
    mock_sock.recv.return_value = b"Manage system Password"

    target = definitions.Target(scheme="http", host="127.0.0.1", port=4433)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    accept = exploit_instance.accept(target)
    assert accept is True


@mock.patch("socket.create_connection")
def testElberAuthBypassExploit_whenTargetIsNotElber_rejects(
    mock_socket: mock.MagicMock,
) -> None:
    """Unit test for Elber exploit, case when the target is not an Elber device."""
    mock_conn = mock.MagicMock()
    mock_socket.return_value = mock_conn
    mock_conn.recv.return_value = b"Some other content"

    target = definitions.Target(scheme="http", host="127.0.0.1", port=4433)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    accept = exploit_instance.accept(target)

    assert accept is False


@mock.patch("socket.create_connection")
def testElberAuthBypassExploit_whenPasswordResetSucceeds_reportsVulnerability(
    mock_socket: mock.MagicMock,
) -> None:
    """Unit test for Elber exploit, case when authentication bypass is successful."""
    mock_conn = mock.MagicMock()
    mock_socket.return_value = mock_conn
    mock_conn.recv.return_value = cve_2025_0674.SUCCESSFUL_RESPONSE.encode()

    target = definitions.Target(scheme="http", host="127.0.0.1", port=4433)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) > 0
    assert vulnerabilities[0].entry.title == cve_2025_0674.VULNERABILITY_TITLE
    assert vulnerabilities[0].risk_rating.name == cve_2025_0674.RISK_RATING


@mock.patch("socket.create_connection")
def testElberAuthBypassExploit_whenPasswordResetFails_reportsNothing(
    mock_socket: mock.MagicMock,
) -> None:
    """Unit test for Elber exploit, case when authentication bypass fails."""
    mock_conn = mock.MagicMock()
    mock_socket.return_value = mock_conn
    mock_conn.recv.return_value = b"error"

    target = definitions.Target(scheme="http", host="127.0.0.1", port=4433)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


@mock.patch("socket.create_connection")
def testElberAuthBypassExploit_whenRequestExceptionOccurs_doesNotRaise(
    mock_socket: mock.MagicMock,
) -> None:
    """Unit test for Elber exploit, ensuring socket errors are handled gracefully."""
    mock_socket.side_effect = socket.error("Connection refused")

    target = definitions.Target(scheme="http", host="127.0.0.1", port=4433)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def test() -> None:
    """Unit test for Elber exploit, ensuring socket errors are handled gracefully."""
    target = definitions.Target(scheme="http", host="79.62.145.179", port=8086)
    exploit_instance = cve_2025_0674.ElberAuthBypassExploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 1
