from unittest import mock
from unittest.mock import patch

from agent import definitions
from agent.exploits import cve_2024_7589


@patch("agent.exploits.cve_2024_7589.get_ssh_banner")
def testAcceptExploit_whenVulnerableBanner_shouldReturnTrue(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method against a known vulnerable target.

    Setup of the unit test.
    """
    exploit_instance = cve_2024_7589.OpenSSHExploit()
    mock_get_banner.return_value = "OpenSSH_9.7 FreeBSD-openssh-portable-9.7.p1,1"

    target = definitions.Target(scheme="ssh", host="dummy_vulnerable_ip", port=22)

    accept = exploit_instance.accept(target)

    assert accept is True


@patch("agent.exploits.cve_2024_7589.get_ssh_banner")
def testAcceptExploit_whenSafeBanner_shouldReturnFalse(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit's accept method against a known safe target.

    Setup of the unit test.
    """
    exploit_instance = cve_2024_7589.OpenSSHExploit()
    mock_get_banner.return_value = "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p1,1"

    target = definitions.Target(scheme="ssh", host="dummy_safe_ip", port=2220)

    accept = exploit_instance.accept(target)

    assert accept is False, (
        f"Expected no vulnerability detection for IP address {target.origin}, but accept returned "
        f"True"
    )


@patch("agent.exploits.cve_2024_7589.get_ssh_banner")
def testCheckExploit_whenVulnerable_shouldReportFinding(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit's check method against a known vulnerable target.

    Setup of the unit test.
    """
    exploit_instance = cve_2024_7589.OpenSSHExploit()
    mock_get_banner.return_value = "OpenSSH_9.7 FreeBSD-openssh-portable-9.7.p1,1"

    target = definitions.Target(scheme="ssh", host="dummy_vulnerable_ip", port=22)

    vulnerabilities = exploit_instance.check(target)

    assert (
        len(vulnerabilities) > 0
    ), f"Expected vulnerabilities for IP address {target.origin}, but found none"


@patch("agent.exploits.cve_2024_7589.get_ssh_banner")
def testCheckExploit_whenSafe_shouldReportNothing(
    mock_get_banner: mock.MagicMock,
) -> None:
    """Tests the exploit's check method against a known safe target.

    Setup of the unit test.
    """
    exploit_instance = cve_2024_7589.OpenSSHExploit()
    mock_get_banner.return_value = "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p1,1"

    target = definitions.Target(scheme="ssh", host="dummy_safe_ip", port=2220)

    vulnerabilities = exploit_instance.check(target)

    assert (
        len(vulnerabilities) == 0
    ), f"Expected no vulnerabilities for IP address {target.origin}, but found {len(vulnerabilities)}"
