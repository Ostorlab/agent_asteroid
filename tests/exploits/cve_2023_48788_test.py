"""Unit tests for Agent Asteroid: CVE-2023-48788"""

import re
from unittest import mock

from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2023_48788
import requests_mock as req_mock


def testCVE202348788_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture, requests_mock: req_mock.mocker.Mocker
) -> None:
    """CVE-2023-48788 unit test: case when target is vulnerable."""
    mock_socket = mock.MagicMock()
    mock_socket.recv.return_value = b"KA_INTERVAL"
    mocker.patch("socket.socket", mock_socket)
    mocker.patch("ssl.SSLContext.wrap_socket", return_value=mock_socket)
    requests_mock.get(
        re.compile("https://localhost"),
        text="FortiClient Endpoint Management Server",
    )

    target = definitions.Target("https", "localhost", 443)
    exploit_instance = cve_2023_48788.CVE202348788Exploit()

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Fortinet FortiClient EMS SQL Injection Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "https://localhost:443 is vulnerable to CVE-2023-48788, Fortinet "
        "FortiClient EMS SQL Injection Vulnerability"
    )


def testCVE202348788_whenSafe_reportFinding(
    mocker: plugin.MockerFixture, requests_mock: req_mock.mocker.Mocker
) -> None:
    """CVE-2023-48788 unit test: case when target is vulnerable."""
    mock_socket = mock.MagicMock()
    mock_socket.recv.return_value = (
        b"Your browser sent a request that this server could not understand."
    )
    mocker.patch("socket.socket", mock_socket)
    mocker.patch("ssl.SSLContext.wrap_socket", return_value=mock_socket)
    requests_mock.get(
        re.compile("https://localhost"),
        text="FortiClient Endpoint Management Server",
    )

    exploit_instance = cve_2023_48788.CVE202348788Exploit()
    target = definitions.Target("https", "localhost", 443)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
