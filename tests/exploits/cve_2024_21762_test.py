"""Unit tests for Agent Asteroid: CVE-2024-21762"""

from unittest import mock

from pytest_mock import plugin

from agent import definitions
from agent.exploits import cve_2024_21762


def testCVE202421762_whenVulnerable_reportFinding(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-21762 unit test: case when target is vulnerable."""

    def side_effect(*args):  # type: ignore[no-untyped-def]
        if args[0] == 2047:
            return b"/remote/login"
        elif args[0] == 2048:
            raise TimeoutError

    mock_socket = mock.MagicMock()
    mock_socket.read.side_effect = side_effect
    mocker.patch("socket.socket", mock_socket)
    mocker.patch("ssl.SSLContext.wrap_socket", return_value=mock_socket)

    exploit_instance = cve_2024_21762.CVE202421762Exploit()

    target = definitions.Target("http", "localhost", 10443)

    accept = exploit_instance.accept(target)
    mocker.patch("ssl.SSLSocket.read", side_effect=TimeoutError)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "Fortinet FortiOS Out-of-Bound Write SSL VPN Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:10443 is vulnerable to CVE-2024-21762, Fortinet "
        "FortiOS Out-of-Bound Write SSL VPN Vulnerability"
    )


def testCVE202421762_whenSafe_reportNothing(
    mocker: plugin.MockerFixture,
) -> None:
    """CVE-2024-21762 unit test: case when target is vulnerable."""

    def side_effect(*args):  # type: ignore[no-untyped-def]
        if args[0] == 2047:
            return b"/remote/login"
        elif args[0] == 2048:
            return b""

    mock_socket = mock.MagicMock()
    mock_socket.read.side_effect = side_effect
    mocker.patch("socket.socket", mock_socket)
    mocker.patch("ssl.SSLContext.wrap_socket", return_value=mock_socket)

    exploit_instance = cve_2024_21762.CVE202421762Exploit()

    target = definitions.Target("http", "localhost", 10443)

    accept = exploit_instance.accept(target)
    mocker.patch("ssl.SSLSocket.read", side_effect=TimeoutError)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
