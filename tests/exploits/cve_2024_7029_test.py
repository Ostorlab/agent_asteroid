"""Unit tests for Agent Asteroid: CVE-2024-7029"""

import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_7029


def testCVE20247029_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-7029 unit test: case when target is vulnerable."""
    requests_mock.get(
        "http://localhost:80/",
        text='<script>function getUserLevel() {/* ... */ if(confirm("This machine is not supported, please visit '
        "'www.avtech.com.tw' for more details.\")) {location.href = "
        "'http://www.eagleeyescctv.com/jump/dvr.htm';}}</script>",
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/supervisor/Factory.cgi",
        text="test_injection",
        status_code=200,
    )
    exploit_instance = cve_2024_7029.CVE20247029Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    vulnerability = vulnerabilities[0]
    assert (
        vulnerability.entry.title
        == "AVTECH IP camera Devices Command Injection Vulnerability"
    )
    assert vulnerability.technical_detail == (
        "http://localhost:80/ is vulnerable to CVE-2024-7029, AVTECH IP camera Devices Command Injection Vulnerability"
    )


def testCVE20247029_whenSafe_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-7029 unit test: case when target is safe."""
    exploit_instance = cve_2024_7029.CVE20247029Exploit()
    requests_mock.get(
        "http://localhost:80/",
        text="<title>AVTECH DVR</title>",
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/supervisor/Factory.cgi",
        text="",
        status_code=200,
    )
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is False
    assert len(vulnerabilities) == 0


def testCVE20247029_whenNotSupported_reportNothing(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """CVE-2024-7029 unit test: case when target device is not supported."""
    requests_mock.get(
        "http://localhost:80/",
        text='<script>function getUserLevel() {/* ... */ if(confirm("This machine is not supported, please visit '
        "'www.avtech.com.tw' for more details.\")) {location.href = "
        "'http://www.eagleeyescctv.com/jump/dvr.htm';}}</script>",
        status_code=200,
    )
    requests_mock.post(
        "http://localhost:80/cgi-bin/supervisor/Factory.cgi",
        text="",
        status_code=200,
    )
    exploit_instance = cve_2024_7029.CVE20247029Exploit()
    target = definitions.Target("http", "localhost", 80)

    accept = exploit_instance.accept(target)
    vulnerabilities = exploit_instance.check(target)

    assert accept is True
    assert len(vulnerabilities) == 0
