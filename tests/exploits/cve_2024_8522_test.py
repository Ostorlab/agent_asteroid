"""Unit tests for LearnPress SQL Injection: CVE-2024-8522"""

from unittest import mock
import pytest
import requests
import requests_mock as req_mock

from agent import definitions
from agent.exploits import cve_2024_8522


def testAccept_whenVersionVulnerable_reportTrue(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the accept method with a vulnerable version of LearnPress."""
    requests_mock.get(
        "http://example.com:80/wp-content/plugins/learnpress/readme.txt",
        text="Stable tag: 4.2.1.1",
        status_code=200,
    )
    exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is True


def testAccept_whenVersionNotVulnerable_reportFalse(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the accept method with a non-vulnerable version of LearnPress."""
    requests_mock.get(
        "http://example.com:80/wp-content/plugins/learnpress/readme.txt",
        text="Stable tag: 4.2.8",
        status_code=200,
    )
    exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testAccept_whenNoVersion_reportFalse(requests_mock: req_mock.mocker.Mocker) -> None:
    """Test the accept method when no version is returned in the readme.txt."""
    requests_mock.get(
        "http://example.com:80/wp-content/plugins/learnpress/readme.txt",
        text="",
        status_code=200,
    )
    exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    assert exploit_instance.accept(target) is False


def testAccept_whenRequestException_reportFalse(
    caplog: pytest.LogCaptureFixture,
) -> None:
    """Test the accept method when an exception occurs during the request."""
    exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
    target = definitions.Target("http", "nonexistent.com", 80)

    result = exploit_instance.accept(target)

    assert result is False
    assert "Error fetching LearnPress version" in caplog.text


def testCheck_whenVulnerable_reportFinding(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the check method when the target is vulnerable to SQL Injection."""
    # Create a mock response with a delay of 7 seconds
    mock_response = mock.Mock()
    mock_response.elapsed.total_seconds.return_value = 11
    requests_mock.get(
        "http://example.com:80/wp-json/learnpress/v1/courses", text="", status_code=200
    )

    # Patch the 'get' request to return the mocked response
    with mock.patch(
        "agent.exploits.cve_2024_8522.requests.get", return_value=mock_response
    ):
        exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        # Assert that the exploit finds the vulnerability
        assert len(vulnerabilities) == 1
        assert (
            vulnerabilities[0].entry.title
            == "Unauthenticated SQL Injection Vulnerability in LearnPress Plugin"
        )


def testCheck_whenSafe_reportNoVulnerabilities(
    requests_mock: req_mock.mocker.Mocker,
) -> None:
    """Test the check method when no vulnerability is found."""
    mock_response = mock.Mock()
    mock_response.elapsed.total_seconds.return_value = 1
    requests_mock.get(
        "http://example.com:80/wp-json/learnpress/v1/courses",
        text="",
        status_code=200,
        additional_matcher=lambda r: mock_response.elapsed.total_seconds() == 1,
    )
    exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
    target = definitions.Target("http", "example.com", 80)

    vulnerabilities = exploit_instance.check(target)

    assert len(vulnerabilities) == 0


def testCheck_whenRequestException_reportNoVulnerabilities(
    caplog: pytest.LogCaptureFixture,
) -> None:
    """Test the check method when a RequestException occurs."""
    with mock.patch(
        "agent.exploits.cve_2024_8522.requests.get",
        side_effect=requests.RequestException("Request error"),
    ):
        exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0
        assert "Request error" in caplog.text


def testCheck_whenTimeoutError_reportLoggedErrors(
    requests_mock: req_mock.mocker.Mocker, caplog: pytest.LogCaptureFixture
) -> None:
    """Test the check method when a Timeout error occurs."""
    with mock.patch(
        "agent.exploits.cve_2024_8522.requests.get",
        side_effect=requests.Timeout("Timeout error"),
    ):
        exploit_instance = cve_2024_8522.LearnPressSQLInjectionExploit()
        target = definitions.Target("http", "example.com", 80)

        vulnerabilities = exploit_instance.check(target)

        assert len(vulnerabilities) == 0
        assert "Timeout error" in caplog.text
