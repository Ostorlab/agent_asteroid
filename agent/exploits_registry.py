"""Register for exploits."""
from collections import defaultdict
from typing import Type, Any

from agent import definitions


class ExploitsRegistry:
    """Registry class, This class provides a way to store and retrieve callables that generate lists of
    `definitions.Exploit` objects from a given file name and bytes object.
    """

    registry: dict[Any, Any] = defaultdict(dict)

    @classmethod
    def register_ref(
        cls,
        obj: definitions.Exploit,
        key: str = "__key__",
    ) -> definitions.Exploit:
        cls.registry[cls.__name__][getattr(obj, key)] = obj
        return obj

    @classmethod
    def unregister_ref(
        cls,
        obj: definitions.Exploit,
        key: str = "__key__",
    ) -> None:
        cls.registry[cls.__name__].pop(getattr(obj, key))

    @classmethod
    def values(
        cls,
    ) -> list[Any]:
        return list(cls.registry[cls.__name__].values())


def register(
    f: Type[definitions.Exploit],
) -> Type[definitions.Exploit]:
    """
    To be used as a decorator on the exploit class

    Args:
        f: The class which its object will be registered.

    Returns:
        The input callable.
    """
    ExploitsRegistry.register_ref(obj=f())
    return f


def unregister(
    f: Type[definitions.Exploit],
) -> None:
    """
    To be used for unregistering an exploit class.

    Args:
        f: The class which its object will be unregistered.

    Returns:
       None.
    """
    ExploitsRegistry.unregister_ref(obj=f())
