"""Agent Asteroid implementation for CVE-2024-42509"""

import logging
import re
import datetime

from pysnmp import hlapi
from packaging import version as ver

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Unauthenticated Command Injection Vulnerability in HPE Aruba Networking Access Points"
VULNERABILITY_REFERENCE = "CVE-2024-42509"
VULNERABILITY_DESCRIPTION = (
    "Command injection vulnerability in the underlying CLI service could lead to unauthenticated "
    "remote code execution by sending specially crafted packets destined to the PAPI (Aruba's Access Point management protocol) "
    "UDP port (8211). Successful exploitation of this vulnerability results in the ability to execute arbitrary code as a privileged user "
    "on the underlying operating system."
)
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)
RISK_RATING = "CRITICAL"
RECOMMENDATION = "- Update HPE Aruba Networking Access Points to the latest version "

VULNERABLE_VERSION_FAMILIES = [
    "10.4",
    "8.12",
    "8.10",
    "10.6",
    "10.5",
    "10.3",
    "8.11",
    "8.9",
    "8.8",
    "8.7",
    "8.6",
    "8.5",
    "8.4",
    "6.5",
    "6.4",
]
VULNERABLE_VERSIONS = {
    "10.4": "10.4.1.4",  # Vulnerable version for family 10.4 and below
    "8.12": "8.12.0.2",  # Vulnerable version for family 8.12 and below
    "8.10": "8.10.0.13",  # Vulnerable version for family 8.10 and below
}

OID = "1.3.6.1.2.1.1.1.0"
SNMP_DESCRIPTION_PATTERN = (
    r"ArubaOS \(MODEL: \S+\), Version (\d+\.\d+\.\d+\.\d+|\d+\.\d+\.\d+)"
)


def _is_version_vulnerable(version: str) -> bool:
    """Checks whether a given software version is vulnerable based on predefined version families and thresholds."""
    # Split version into family and specific version
    family = ".".join(
        version.split(".")[:2]
    )  # Take first two parts as family, e.g., 8.9 or 10.4

    # Check if version family is in vulnerable families
    if family in VULNERABLE_VERSION_FAMILIES:
        if family in VULNERABLE_VERSIONS:
            # If specific version is less than or equal to the threshold, it's vulnerable
            threshold_version = VULNERABLE_VERSIONS[family]
            return ver.parse(version) <= ver.parse(threshold_version)
        else:
            # If no specific version threshold exists, assume it's vulnerable for this family
            return True

    return False


def _get_aruba_version(host: str) -> str | None:
    """Send SNMP request to retrieve the system description."""
    version = None
    iterator = hlapi.getCmd(
        hlapi.SnmpEngine(),
        hlapi.CommunityData("public", mpModel=1),
        hlapi.UdpTransportTarget((host, 161), timeout=DEFAULT_TIMEOUT.seconds),
        hlapi.ContextData(),
        hlapi.ObjectType(hlapi.ObjectIdentity(OID)),  # sysDescr OID
    )
    error_indication, error_status, error_index, var_binds = next(iterator)

    if error_indication is True:
        logging.error("SNMP error_indication: %s", error_indication)
    elif error_status is True:
        logging.error("SNMP error_status: %s at %s", error_status, error_index)
    else:
        for var_bind in var_binds:
            description = var_bind[1].prettyPrint()
            logging.info("ArubaOS description found: %s", description)
            match = re.search(SNMP_DESCRIPTION_PATTERN, description)
            if match is not None:
                version = match.group(1)
                logging.info("ArubaOS version extracted: %s", version)

    return version


@exploits_registry.register
class CVE202442509Exploit(definitions.Exploit):
    """
    CVE-2024-42509: Unauthenticated Command Injection Vulnerability
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        recommendation=RECOMMENDATION,
        has_public_exploit=False,
    )

    def accept(self, target: definitions.Target) -> bool:
        version = _get_aruba_version(target.host)
        return bool(version)

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []
        version = _get_aruba_version(target.host)

        if version is not None and _is_version_vulnerable(version) is True:
            self.metadata.description += f" Detected version: {version}"
            vulnerability = self.create_vulnerability(target)
            vulnerability.technical_detail = (
                f"HPE Aruba Networking Access Points device at {target.url} is running a vulnerable version: {version}. "
                f"Immediate action is required."
            )
            vulnerabilities.append(vulnerability)

        return vulnerabilities
