"""Agent Asteroid implementation for CVE-2024-6387."""

import re
import logging

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions, exploits_registry
from agent.common.get_ssh_banner import get_ssh_banner
from agent.exploits import common

VULNERABILITY_TITLE = "OpenSSH Remote Code Execution Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2024-6387"
VULNERABILITY_DESCRIPTION = (
    "A remote code execution vulnerability in multiple versions of OpenSSH allows remote attackers to execute "
    "arbitrary code, granting full root access. The vulnerability affects the default configuration and does not "
    "require user interaction."
)
DEFAULT_TIMEOUT = 90
VULNERABLE_VERSIONS = [
    "OpenSSH_1.2.2p1",
    "OpenSSH_1.2.3p1",
    "OpenSSH_2.1.1p2",
    "OpenSSH_2.1.1p3",
    "OpenSSH_2.0.0p1",
    "OpenSSH_2.3.0p1",
    "OpenSSH_2.5.1p1",
    "OpenSSH_2.5.1p2",
    "OpenSSH_2.5.2p2",
    "OpenSSH_2.9",
    "OpenSSH_2.9p1",
    "OpenSSH_2.9.9",
    "OpenSSH_2.9.9p1",
    "OpenSSH_2.9p2",
    "OpenSSH_3.0",
    "OpenSSH_3.0p1",
    "OpenSSH_3.0.1",
    "OpenSSH_3.0.1p1",
    "OpenSSH_3.0.2p1",
    "OpenSSH_3.1",
    "OpenSSH_3.1p1",
    "OpenSSH_3.2.2",
    "OpenSSH_3.2.2p1",
    "OpenSSH_3.2.3",
    "OpenSSH_3.2.3p1",
    "OpenSSH_3.3",
    "OpenSSH_3.3p1",
    "OpenSSH_3.4",
    "OpenSSH_3.4p1",
    "OpenSSH_3.5",
    "OpenSSH_3.5p1",
    "OpenSSH_3.6",
    "OpenSSH_3.6p1",
    "OpenSSH_3.6.1",
    "OpenSSH_3.6.1p1",
    "OpenSSH_3.6.1p2",
    "OpenSSH_3.7",
    "OpenSSH_3.7p1",
    "OpenSSH_3.7.1",
    "OpenSSH_3.7.1p1",
    "OpenSSH_3.7.1p2",
    "OpenSSH_3.8",
    "OpenSSH_3.8p1",
    "OpenSSH_3.8.1",
    "OpenSSH_3.8.1p1",
    "OpenSSH_3.9",
    "OpenSSH_3.9p1",
    "OpenSSH_4.0",
    "OpenSSH_4.1",
    "OpenSSH_4.2",
    "OpenSSH_4.2p1",
    "OpenSSH_4.3",
    "OpenSSH_4.3p1",
    "OpenSSH_4.3p2",
    "OpenSSH_4.4",
    "OpenSSH_4.4p1",
    "OpenSSH_8.5",
    "OpenSSH_8.5p1",
    "OpenSSH_8.6",
    "OpenSSH_8.6p1",
    "OpenSSH_8.7",
    "OpenSSH_8.7p1",
    "OpenSSH_8.8",
    "OpenSSH_8.8p1",
    "OpenSSH_8.9",
    "OpenSSH_8.91",
    "OpenSSH_9.0",
    "OpenSSH_9.0p1",
    "OpenSSH_9.1",
    "OpenSSH_9.1p1",
    "OpenSSH_9.2",
    "OpenSSH_9.2p1",
    "OpenSSH_9.3",
    "OpenSSH_9.3p1",
    "OpenSSH_9.4",
    "OpenSSH_9.4p1",
    "OpenSSH_9.5",
    "OpenSSH_9.5p1",
    "OpenSSH_9.6",
    "OpenSSH_9.6p1",
    "OpenSSH_9.7",
    "OpenSSH_9.7p1",
]

PATCHED_VERSIONS = [
    "OpenSSH_8.9p1 Ubuntu-3ubuntu0.10",
    "OpenSSH_9.3p1 Ubuntu-3ubuntu3.6",
    "OpenSSH_9.6p1 Ubuntu-3ubuntu13.3",
    "OpenSSH_9.3p1 Ubuntu-1ubuntu3.6",
    "OpenSSH_9.2p1 Debian-2+deb12u3",
    "OpenSSH_8.4p1 Debian-5+deb11u3",
    "OpenSSH_9.7p1 Debian-7",
]

logger = logging.getLogger(__name__)


def _create_vulnerability(
    target: definitions.Target, details: str
) -> definitions.Vulnerability:
    """Creates a vulnerability instance with the given details."""
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="CRITICAL",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
        },
        recommendation="Ensure OpenSSH is updated to the latest version.",
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=True,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = f"Target: {target.url}\nDetails: {details}"
    vulnerability_location = common.build_vuln_location(target.url)
    dna = common.compute_dna(
        vulnerability_title=VULNERABILITY_TITLE,
        vuln_location=vulnerability_location,
    )
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        vulnerability_location=vulnerability_location,
        dna=dna,
    )
    return vulnerability


@exploits_registry.register
class OpenSSHExploit(definitions.Exploit):
    """Exploit class for detecting the OpenSSH Remote Code Execution Vulnerability."""

    def accept(self, target: definitions.Target) -> bool:
        """Checks if the target is potentially vulnerable based on its SSH banner."""
        ip_address = target.host
        port = target.port
        banner = get_ssh_banner(ip_address, port)
        logger.debug("Retrieved banner for %s:%d - %s", ip_address, port, banner)

        if "OpenSSH" in banner:
            version_match = re.search(r"OpenSSH_(\d+\.\d+)(p\d+)?", banner)
            distro_match = re.search(r"OpenSSH_(\d+\.\d+(p\d+)?)\s*(\S*)", banner)

            if version_match is not None:
                full_version = version_match.group(0)
                distro_version = distro_match.group(0) if distro_match else None

                if full_version in VULNERABLE_VERSIONS:
                    if (
                        distro_version is not None
                        and distro_version in PATCHED_VERSIONS
                    ):
                        return False
                    return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Checks the target for the specific vulnerability."""
        vulnerabilities = []
        if self.accept(target):
            details = f"{target.url} is vulnerable to {VULNERABILITY_REFERENCE}: {VULNERABILITY_TITLE}"
            vulnerability = _create_vulnerability(target, details)
            vulnerabilities.append(vulnerability)
        return vulnerabilities
