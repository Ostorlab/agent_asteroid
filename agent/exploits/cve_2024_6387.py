"""Agent Asteroid implementation for CVE-2024-6387."""

from threading import Lock
import nmap

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "OpenSSH Remote Code Execution Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2024-6387"
VULNERABILITY_DESCRIPTION = (
    "A remote code execution vulnerability in multiple versions of OpenSSH allows remote attackers to execute "
    "arbitrary code, granting full root access. The vulnerability affects the default configuration and does not "
    "require user interaction."
)
DEFAULT_TIMEOUT = 90

lock = Lock()


def _create_vulnerability(
    target: definitions.Target, details: str
) -> definitions.Vulnerability:
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="CRITICAL",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
        },
        recommendation="Ensure OpenSSH is updated to the latest version.",
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=True,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = f"Target: {target.origin}:{target.port}\nDetails: {details}"
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
    )
    return vulnerability


@exploits_registry.register
class OpenSSHExploit(definitions.Exploit):
    def accept(self, target: definitions.Target) -> bool:
        ip_address = target.origin.replace("ssh://", "").split(":")[0]
        nm = nmap.PortScanner()
        ports = "22, 2222, 2220"
        nm.scan(
            ip_address,
            ports,
            arguments="-sV --script ssh2-enum-algos,ssh-auth-methods,ssh-hostkey,ssh-run,sshv1",
        )

        if ip_address in nm.all_hosts():
            for port in nm[ip_address]["tcp"]:
                service = nm[ip_address]["tcp"][port]
                if service["name"] == "ssh" and service["product"] == "OpenSSH":
                    version = service["version"].split()
                    vulnerable_versions = [
                        "8.5p1",
                        "8.6p1",
                        "8.7p1",
                        "8.8p1",
                        "8.9p1",
                        "9.0p1",
                        "9.1p1",
                        "9.2p1",
                        "9.3p1",
                        "9.4p1",
                        "9.5p1",
                        "9.6p1",
                        "9.7p1",
                    ]
                    if version[0] in vulnerable_versions:
                        return True
        else:
            print(
                f"IP address {ip_address} not found in scanned hosts."
            )  # Debugging line

        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities = []
        if self.accept(target):
            details = f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}, {VULNERABILITY_TITLE}"
            vulnerability = _create_vulnerability(target, details)
            vulnerabilities.append(vulnerability)
        return vulnerabilities
