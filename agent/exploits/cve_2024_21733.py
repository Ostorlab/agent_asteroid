"""Agent Asteroid implementation for CVE-2024-21733"""
import re
from urllib import parse as urlparse

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from packaging import version
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Apache Tomcat HTTP Request Smuggling (Client- Side Desync)"
VULNERABILITY_REFERENCE = "CVE-2024-21733"
VULNERABILITY_DESCRIPTION = (
    "Apache Tomcat from 8.5.7 through 8.5.63, from 9.0.0-M11 through 9.0.43 are vulnerable to client-side de-sync "
    "attacks. Client-side de-sync (CSD) vulnerabilities occur when a web server fails to correctly process the "
    "Content-Length of POST requests. By exploiting this behavior, an attacker can force a victim's browser to "
    "de-synchronize its connection with the website, causing sensitive data to be smuggled from the server and/or "
    "client connections."
)

DEFAULT_TIMEOUT = 30
ACCEPT_ENDPOINTS = [
    "/docs/RELEASE-NOTES.txt",
    "/manager/status",
    "/manager/html",
    "/docs/introduction.html",
]
CHECK_ENDPOINTS = ["/docs/RELEASE-NOTES.txt", "/404", "/"]
VERSION_PATTERN = re.compile(r"(?i)Apache Tomcat.*([0-9]\.[0-9]+\.[0-9]+)")
VULNERABLE_RANGES = [
    (version.parse("8.5.7"), version.parse("8.5.63")),
    (version.parse("9.0.0"), version.parse("9.0.43")),
]
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE202421733Exploit(definitions.Exploit):
    """
    CVE-2024-21733: Apache Tomcat HTTP Request Smuggling (Client- Side Desync)
    """

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        for endpoint in ACCEPT_ENDPOINTS:
            try:
                resp = session.get(
                    urlparse.urljoin(target.origin, endpoint),
                    timeout=DEFAULT_TIMEOUT,
                )
            except requests_exceptions.RequestException:
                return False
            if resp.status_code != 404:
                return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        for endpoint in CHECK_ENDPOINTS:
            try:
                resp = session.get(
                    urlparse.urljoin(target.origin, endpoint),
                    timeout=DEFAULT_TIMEOUT,
                )
            except requests_exceptions.RequestException:
                return []

            target_version_match = VERSION_PATTERN.search(resp.text)
            if target_version_match is None:
                continue

            target_version = version.parse(target_version_match.group(1))
            for version_range in VULNERABLE_RANGES:
                if version_range[0] <= target_version <= version_range[1]:
                    vulnerability = self._create_vulnerability(target)
                    return [vulnerability]

        return []

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "hackerone.com": "https://hackerone.com/reports/2327341",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
