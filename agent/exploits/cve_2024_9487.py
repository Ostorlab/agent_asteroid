"""Agent Asteroid implementation for CVE-2024-9487"""

import datetime
import re
from urllib import parse as urlparse

import requests
from packaging import version
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

MAX_REDIRECTS = 2
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)
VULNERABILITY_TITLE = "GITHUB ENTERPRISE SERVER AUTHENTICATION BYPASS"
VULNERABILITY_REFERENCE = "CVE-2024-9487"
VULNERABILITY_DESCRIPTION = """A cryptographic signature verification flaw in GitHub Enterprise Server allowed bypassing SAML SSO authentication,
leading to unauthorized user access. Exploitation required encrypted assertions, direct network access, and a signed SAML response or metadata.
It affected versions before 3.15 and was fixed in 3.11.16, 3.12.10, 3.13.5, and 3.14.2. The vulnerability was reported through GitHub's Bug Bounty program."""
RISK_RATING = "CRITICAL"
FIXED_VERSIONS = {
    "3.11": "3.11.6",
    "3.12": "3.12.10",
    "3.13": "3.13.5",
    "3.14": "3.14.2",
}

MAX_FIXED_VERSION = "3.15"
MAX_NONFIXED_VERSION = "3.10"


@exploits_registry.register
class CVE20249487Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(method="GET", path="/")
    accept_pattern = [re.compile("GitHub\sEnterprise\sServer\s\d+\.\d+\.\d+")]
    version_pattern = re.compile("GitHub\sEnterprise\sServer\s(\d+\.\d+\.\d+)")

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect specific vulnerability on a specific target.

        Args:
            target: Target to scan

        Returns:
            List of identified vulnerabilities.
        """
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        vulnerabilities: list[definitions.Vulnerability] = []

        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        try:
            req = requests.Request(
                method=self.check_request.method,
                url=target_endpoint,
                data=self.check_request.data,
            ).prepare()
            resp = session.send(req, timeout=DEFAULT_TIMEOUT.seconds)
        except requests_exceptions.RequestException:
            return vulnerabilities

        if (matched := self.version_pattern.findall(resp.text)) != []:
            extracted_version = matched[0]
            if version.parse(extracted_version) < version.parse(MAX_FIXED_VERSION):
                version_prefix = ".".join(extracted_version.split(".")[:2])
                if version.parse(extracted_version) < version.parse(
                    MAX_NONFIXED_VERSION
                ):
                    vulnerability = self._create_vulnerability(target)
                    vulnerabilities.append(vulnerability)
                elif version.parse(extracted_version) < version.parse(
                    FIXED_VERSIONS[version_prefix]
                ):
                    vulnerability = self._create_vulnerability(target)
                    vulnerabilities.append(vulnerability)
        return vulnerabilities
