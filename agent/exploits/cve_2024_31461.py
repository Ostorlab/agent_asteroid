"""Agent Asteroid implementation for CVE-2024-31461"""

import requests
from requests import exceptions as requests_exceptions
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from ostorlab.agent.kb import kb


from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "SSRF flaw in Plane Project Management Software"
VULNERABILITY_REFERENCE = "CVE-2024-31461"
VULNERABILITY_DESCRIPTION = (
    "Plane, an open-source project management tool, has a Server-Side Request Forgery (SSRF) vulnerability in versions prior to 0.17-dev. This "
    "issue may allow an attacker to send arbitrary requests from the server hosting the application, potentially leading to unauthorized access to internal systems. "
)

DEFAULT_TIMEOUT = 30
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE202431461Exploit(definitions.Exploit):
    """
    CVE-2024_31461: SSRF flaw in Plane Project Management Software.
    """

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        try:
            resp = session.get(target.url, timeout=DEFAULT_TIMEOUT)
            if resp.status_code == 200 and ("Plane" in resp.text) is True:
                return True

        except requests_exceptions.RequestException:
            return False

        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        vulnerabilities: list[definitions.Vulnerability] = []

        try:
            resp = session.get(target.url, timeout=DEFAULT_TIMEOUT)
            if resp.status_code == 200 and ("EmojiPickerReact" in resp.text) is False:
                vulnerability = self._create_vulnerability(target)
                vulnerabilities.append(vulnerability)

                return vulnerabilities

        except requests_exceptions.RequestException:
            return vulnerabilities

        return vulnerabilities

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=False,
            targeted_by_ransomware=False,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
