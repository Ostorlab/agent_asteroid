"""Agent Asteroid implementation for CVE-2014-2120"""

import re
from urllib import parse as urlparse
import datetime

from requests import exceptions as requests_exceptions

from agent import definitions
from agent.exploits import webexploit
from agent import exploits_registry

VULNERABILITY_TITLE = "Cisco ASA WebVPN Login Page XSS Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2014-2120"
VULNERABILITY_DESCRIPTION = (
    "Cisco Cisco Adaptive Security Appliance (ASA) SSL VPN is prone to a cross-site scripting (XSS) vulnerability."
    "The flaw is due to an error in password recovery form which fails to filter properly the hidden inputs."
)
RISK_RATING = "HIGH"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)

REFLECTED_XSS_TEST_STRING = "test123\"'"
SAFE_STRING = "test123&quot;"
VULNERABLE_STRINGS = ["test123\"'", "test123\\\"'"]


@exploits_registry.register
class CVE20142120XSSExploit(webexploit.WebExploit):
    accept_request = definitions.Request(
        method="GET",
        path="/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle=&status=0&username=test&password_min=0&state=&tgroup=&serverType=0&password_",
    )
    accept_pattern = [
        re.compile("Password expired, you must enter a new password to continue.")
    ]

    check_request = definitions.Request(
        method="GET",
        path="/+CSCOE+/logon.html?reason=2&a0=63&a1=&a2=&a3=0&next=&auth_handle={}&status=0&username={}&password_min=0&state=&tgroup=&serverType=0&password_days=0".format(
            REFLECTED_XSS_TEST_STRING, REFLECTED_XSS_TEST_STRING
        ),
    )
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Check if the target reflects unsanitized input in the response."""
        vulnerabilities: list[definitions.Vulnerability] = []
        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        try:
            response = self.session.get(
                target_endpoint, timeout=DEFAULT_TIMEOUT.seconds
            )
            response.raise_for_status()

        except requests_exceptions.RequestException:
            return vulnerabilities

        for vuln_str in VULNERABLE_STRINGS:
            if vuln_str in response.text and SAFE_STRING not in response.text:
                vulnerability = self.create_vulnerability(target)
                vulnerabilities.append(vulnerability)
                break

        return vulnerabilities
