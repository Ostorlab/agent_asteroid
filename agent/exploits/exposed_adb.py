"""Agent Asteroid implementation to detect unauthenticated exposed adb"""

import socket

from adb_shell import adb_device
from adb_shell import exceptions as adb_exceptions
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions
from agent import exploits_registry
from agent.exploits import common

VULNERABILITY_TITLE = "Unauthenticated exposed Android Debug Bridge (ADB)"
VULNERABILITY_DESCRIPTION = (
    "Android Debug Bridge (ADB) remove debugging is a feature helping app developers communicate "
    "with Android devices remotely to execute commands and, if necessary, completely control a "
    "device. If left enabled, unauthorized remote attackers can leverage it to remotely and "
    "silently install malware on user devices."
)
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 5
KEYWORD = "__VULNERABLE__"

ADB_TCP_EXCEPTIONS = (
    socket.error,
    adb_exceptions.DeviceAuthError,
    adb_exceptions.TcpTimeoutException,
    adb_exceptions.AdbTimeoutError,
    adb_exceptions.InvalidCommandError,
)
ADB_COMMAND_EXCEPTIONS = (
    adb_exceptions.AdbCommandFailureException,
    adb_exceptions.InvalidCommandError,
)


@exploits_registry.register
class ExposedAdbExploit(definitions.Exploit):
    """Unauthenticated Exposed ADB Access."""

    def accept(self, target: definitions.Target) -> bool:
        device = adb_device.AdbDeviceTcp(
            target.host, target.port, default_transport_timeout_s=DEFAULT_TIMEOUT
        )
        try:
            connection_status = device.connect(auth_timeout_s=DEFAULT_TIMEOUT)
        except ADB_TCP_EXCEPTIONS:
            return False
        return connection_status is True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        device = adb_device.AdbDeviceTcp(
            target.host, target.port, default_transport_timeout_s=DEFAULT_TIMEOUT
        )
        try:
            device.connect(auth_timeout_s=DEFAULT_TIMEOUT)
        except ADB_TCP_EXCEPTIONS:
            return []

        try:
            command_output = device.shell(
                f"echo {KEYWORD}", timeout_s=DEFAULT_TIMEOUT
            ).strip()
        except ADB_TCP_EXCEPTIONS:
            return []
        except ADB_COMMAND_EXCEPTIONS:
            return []

        if command_output != KEYWORD:
            return []

        vulnerability = self._create_vulnerability(target)
        return [vulnerability]

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating=RISK_RATING,
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "Android Debug Bridge (adb)": "https://developer.android.com/tools/adb",
                "ADB.Miner, A Silent Outbreak of Mining": "https://westoahu.hawaii.edu/cyber/vulnerability-research/"
                "vulnerabilities-weekly-summaries/adb-miner-a-silent-outbreak-of-mining/",
                "Tens of Thousands of Android Devices Are Exposing Their Debug Port": "https://www.bleepingcomputer.com"
                "/news/security/tens-of-thousands-of-android-devices-are-exposing-their-debug-port/",
            },
            recommendation=(
                "Consider disabling remote adb or enable authentication to prevent unauthorized access."
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = f"{target.url} is vulnerable to {VULNERABILITY_TITLE}."
        vulnerability_location = common.build_vuln_location(target.url)
        dna = common.compute_dna(
            vulnerability_title=VULNERABILITY_TITLE,
            vuln_location=vulnerability_location,
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
            vulnerability_location=vulnerability_location,
            dna=dna,
        )
        return vulnerability
