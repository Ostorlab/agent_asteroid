"""Agent Asteroid implementation for CVE-2020-14644"""

import logging
import re

from packaging import version
from requests import exceptions as requests_exceptions
import requests

from agent.exploits import webexploit
from agent import exploits_registry
from agent import definitions

VULNERABILITY_TITLE = "WebLogic Remote Command Execution Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2020-14644"
VULNERABILITY_DESCRIPTION = """A remote code execution vulnerability in Oracle WebLogic Server 
allows an unauthenticated attacker to execute arbitrary commands via the T3 protocol.
"""
RISK_RATING = "CRITICAL"
VULNERABLE_VERSIONS = [
    version.parse("12.2.1.3.0"),
    version.parse("12.2.1.4.0"),
    version.parse("14.1.1.0.0"),
]

MAX_REDIRECTS = 2
DEFAULT_TIMEOUT = 90


@exploits_registry.register
class CVE202014644Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(method="GET", path="/")
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """Override the accept method to check for WebLogic in the Server header."""
        try:
            response = requests.get(target.url, timeout=DEFAULT_TIMEOUT, verify=False)
            return "WebLogic" in response.headers.get("Server", "")
        except requests_exceptions.RequestException as e:
            logging.warning("Request exception in accept method: %s", e)
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect specific vulnerability on a specific target.

        Args:
            target: Target to scan

        Returns:
            List of identified vulnerabilities.
        """
        vulnerabilities = []
        try:
            response = requests.get(target.url, timeout=10, verify=False)
            server_header = response.headers.get("Server", "")
            match = re.search(r"WebLogic Server (\d+\.\d+\.\d+\.\d+)", server_header)

            if match is not None:
                extracted_version = version.parse(match.group(1))
                if extracted_version in VULNERABLE_VERSIONS:
                    vulnerabilities.append(self._create_vulnerability(target))
        except requests.RequestException as e:
            logging.warning("Request exception in check method: %s", e)
        except version.InvalidVersion as e:
            logging.warning("Invalid version encountered: %s", e)

        return vulnerabilities
