"""Agent Asteroid implementation for CVE-2024-7589."""

import logging

from agent import definitions, exploits_registry
from agent.common.get_ssh_banner import get_ssh_banner

VULNERABILITY_TITLE = "OpenSSH Pre-Authentication Async Signal Safety Issue"
VULNERABILITY_REFERENCE = "CVE-2024-7589"
VULNERABILITY_DESCRIPTION = (
    "A signal handler in OpenSSH's sshd(8) may call a logging function that is not async-signal-safe. This issue "
    "can result in a race condition that could allow unauthenticated remote code execution as root. The problem is "
    "specific to certain versions of OpenSSH integrated with blacklistd in FreeBSD."
)
RISK_RATING = "CRITICAL"
REFERENCES = {
    "FreeBSD Security Advisory": "https://security.FreeBSD.org/advisories/FreeBSD-SA-24:08.openssh.asc",
}
RECOMMENDATION = (
    "Upgrade OpenSSH to a version that has been patched as described in the advisory."
)

VULNERABLE_VERSIONS = [
    "OpenSSH_9.7 FreeBSD-openssh-portable-9.7.p1,1",
    "OpenSSH_9.6 FreeBSD-openssh-portable-9.6.p1,1",
    "OpenSSH_9.5 FreeBSD-openssh-portable-9.5.p1,1",
    "OpenSSH_9.4 FreeBSD-openssh-portable-9.4.p1,1",
    "OpenSSH_9.3 FreeBSD-openssh-portable-9.3.p1,1",
    "OpenSSH_9.2 FreeBSD-openssh-portable-9.2.p1,1",
    "OpenSSH_9.1 FreeBSD-openssh-portable-9.1.p1,1",
    "OpenSSH_9.0 FreeBSD-openssh-portable-9.0.p1,1",
    "OpenSSH_8.9 FreeBSD-openssh-portable-8.9.p1,1",
    "OpenSSH_8.8 FreeBSD-openssh-portable-8.8.p1,1",
    "OpenSSH_8.7 FreeBSD-openssh-portable-8.7.p1,1",
]

PATCHED_VERSIONS = [
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p1,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p2,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p3,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p4,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p5,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p6,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p7,1",
]

logger = logging.getLogger(__name__)


def _is_vulnerable_version(version_string: str) -> bool:
    """Checks if the version is vulnerable by looking for vulnerable versions in VULNERABLE_VERSIONS."""
    if version_string is not None:
        for vulnerable_version in VULNERABLE_VERSIONS:
            if vulnerable_version in version_string:
                return True
        for patched_version in PATCHED_VERSIONS:
            if patched_version in version_string:
                return False
    return False


@exploits_registry.register
class OpenSSHExploit(definitions.Exploit):
    """Exploit class for detecting the OpenSSH Pre-Authentication Async Signal Safety Issue."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        references=REFERENCES,
        recommendation=RECOMMENDATION,
        targeted_by_nation_state=True,
    )

    def accept(self, target: definitions.Target) -> bool:
        """Checks if the target is potentially vulnerable based on its SSH banner."""
        ip_address = target.host
        port = target.port
        banner = get_ssh_banner(ip_address, port)
        logger.debug("Retrieved banner for %s:%d - %s", ip_address, port, banner)

        if "OpenSSH" in banner:
            if _is_vulnerable_version(banner) is True:
                return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Checks the target for the specific vulnerability."""
        vulnerabilities = []
        if self.accept(target) is True:
            details = f"{target.url} is vulnerable to {VULNERABILITY_REFERENCE}: {VULNERABILITY_TITLE}"
            vulnerability = self.create_vulnerability(target)
            vulnerability.technical_detail = (
                f"Target: {target.origin}:{target.port}\nDetails: {details}"
            )
            vulnerabilities.append(vulnerability)
        return vulnerabilities
