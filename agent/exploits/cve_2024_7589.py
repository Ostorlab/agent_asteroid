"""Agent Asteroid implementation for CVE-2024-7589."""

import re
import logging

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions, exploits_registry
from agent.common.get_ssh_banner import get_ssh_banner

VULNERABILITY_TITLE = "OpenSSH Pre-Authentication Async Signal Safety Issue"
VULNERABILITY_REFERENCE = "CVE-2024-7589"
VULNERABILITY_DESCRIPTION = (
    "A signal handler in OpenSSH's sshd(8) may call a logging function that is not async-signal-safe. This issue "
    "can result in a race condition that could allow unauthenticated remote code execution as root. The problem is "
    "specific to certain versions of OpenSSH integrated with blacklistd in FreeBSD."
)
DEFAULT_TIMEOUT = 90

VULNERABLE_VERSIONS = [
    "OpenSSH_9.7 FreeBSD-openssh-portable-9.7.p1,1",
    "OpenSSH_9.6 FreeBSD-openssh-portable-9.6.p1,1",
    "OpenSSH_9.5 FreeBSD-openssh-portable-9.5.p1,1",
    "OpenSSH_9.4 FreeBSD-openssh-portable-9.4.p1,1",
    "OpenSSH_9.3 FreeBSD-openssh-portable-9.3.p1,1",
    "OpenSSH_9.2 FreeBSD-openssh-portable-9.2.p1,1",
    "OpenSSH_9.1 FreeBSD-openssh-portable-9.1.p1,1",
    "OpenSSH_9.0 FreeBSD-openssh-portable-9.0.p1,1",
    "OpenSSH_8.9 FreeBSD-openssh-portable-8.9.p1,1",
    "OpenSSH_8.8 FreeBSD-openssh-portable-8.8.p1,1",
    "OpenSSH_8.7 FreeBSD-openssh-portable-8.7.p1,1",
]

PATCHED_VERSIONS = [
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p1,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p2,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p3,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p4,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p5,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p6,1",
    "OpenSSH_9.8 FreeBSD-openssh-portable-9.8.p7,1",
]

logger = logging.getLogger(__name__)


def _create_vulnerability(
    target: definitions.Target, details: str
) -> definitions.Vulnerability:
    """Creates a vulnerability instance with the given details."""
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="CRITICAL",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
            "FreeBSD Security Advisory": "https://security.FreeBSD.org/advisories/FreeBSD-SA-24:08.openssh.asc",
        },
        recommendation="Upgrade OpenSSH to a version that has been patched as described in the advisory.",
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=True,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = f"Target: {target.origin}:{target.port}\nDetails: {details}"
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
    )
    return vulnerability


def _parse_version(version_string: str) -> str:
    """Extracts the version part from the banner."""
    match = re.search(r"OpenSSH_(\d+\.\d+(p\d+)?)", version_string)
    return match.group(1) if match is not None else ""


def _is_vulnerable_version(version_string: str) -> bool:
    """Checks if the version is vulnerable."""
    version = _parse_version(version_string)
    if version is not None:
        if version in VULNERABLE_VERSIONS:
            return True
        for patched_version in PATCHED_VERSIONS:
            if version >= _parse_version(patched_version):
                return False
        return True
    return False


@exploits_registry.register
class OpenSSHExploit(definitions.Exploit):
    """Exploit class for detecting the OpenSSH Pre-Authentication Async Signal Safety Issue."""

    def accept(self, target: definitions.Target) -> bool:
        """Checks if the target is potentially vulnerable based on its SSH banner."""
        ip_address = target.host
        port = target.port
        banner = get_ssh_banner(ip_address, port)
        logger.debug("Retrieved banner for %s:%d - %s", ip_address, port, banner)

        if "OpenSSH" in banner:
            if _is_vulnerable_version(banner) is True:
                return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Checks the target for the specific vulnerability."""
        vulnerabilities = []
        if self.accept(target) is True:
            details = f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}: {VULNERABILITY_TITLE}"
            vulnerability = _create_vulnerability(target, details)
            vulnerabilities.append(vulnerability)
        return vulnerabilities
