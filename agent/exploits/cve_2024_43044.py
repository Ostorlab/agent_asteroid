"""Agent Asteroid implementation for CVE-2024-43044"""

import re
from urllib import parse as urlparse

import requests
from requests import exceptions as requests_exceptions
from packaging import version

from agent.exploits import webexploit
from agent import exploits_registry
from agent import definitions


VULNERABILITY_TITLE = "JENKINS ARBITRARY FILE READ TO RCE"
VULNERABILITY_REFERENCE = "CVE-2024-43044"
VULNERABILITY_DESCRIPTION = """Arbitrary file read vulnerability through agent connections can lead to RCE.
"""
RISK_RATING = "CRITICAL"
MAX_VULNERABLE_LTS_VERSION = version.parse("2.452.3")
MAX_VULNERABLE_VERSION = version.parse("2.470")

DEFAULT_TIMEOUT = 90


@exploits_registry.register
class CVE202443044Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(method="GET", path="/")
    accept_pattern = [re.compile("Sign in \[Jenkins\]")]
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        cve_ids=["CVE-2024-43044"],
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect specific vulnerability on a specific target.

        Args:
            target: Target to scan

        Returns:
            List of identified vulnerabilities.
        """
        vulnerabilities: list[definitions.Vulnerability] = []

        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        try:
            req = requests.Request(
                method=self.check_request.method,
                url=target_endpoint,
                data=self.check_request.data,
            ).prepare()
            if self.check_request.headers is not None:
                self.check_request.headers.update(req.headers)
                req.headers = self.check_request.headers  # type: ignore
            resp = self.session.send(req, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return vulnerabilities

        try:
            extracted_version = version.parse(resp.headers["X-Jenkins"])
        except Exception:
            return vulnerabilities

        if resp.headers["X-Jenkins"].count(".") == 1:
            max_vulnerable_version = MAX_VULNERABLE_VERSION
        else:
            max_vulnerable_version = MAX_VULNERABLE_LTS_VERSION

        if extracted_version <= max_vulnerable_version:
            vulnerability = self.create_vulnerability(target)
            vulnerabilities.append(vulnerability)
            return vulnerabilities

        return vulnerabilities
