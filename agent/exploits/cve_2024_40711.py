"""Agent Asteroid implementation for CVE-2024-40711"""

import logging
import re

from packaging import version
import requests
from requests import exceptions as requests_exceptions
from urllib import parse as urlparse

from agent.exploits import webexploit
from agent import exploits_registry
from agent import definitions

VULNERABILITY_TITLE = "Veeam Backup & Replication Remote Code Execution Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2024-40711"
VULNERABILITY_DESCRIPTION = """A critical remote code execution (RCE) vulnerability in Veeam Backup & Replication (VBR)
that can be exploited without authentication. This vulnerability affects VBR version 12.1.2.172
and all earlier versions of the 12 branch."""
RISK_RATING = "CRITICAL"
MAX_VULNERABLE_VERSION = version.parse("12.1.2.172")

DEFAULT_TIMEOUT = 90


@exploits_registry.register
class CVE202440711Exploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/api/v1/serverInfo")
    check_request = definitions.Request(
        method="GET", path="/api/v1/serverInfo", headers={"X-Api-Version": "1.1-rev1"}
    )
    accept_pattern = [re.compile(r'"name"\s*:\s*"Veeam Backup and Replication"')]
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect specific vulnerability on a specific target.

        Args:
            target: Target to scan

        Returns:
            List of identified vulnerabilities.
        """
        vulnerabilities: list[definitions.Vulnerability] = []

        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        try:
            req = requests.Request(
                method=self.check_request.method,
                url=target_endpoint,
                headers=self.check_request.headers,
                data=self.check_request.data,
            ).prepare()
            resp = self.session.send(req, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException as e:
            logging.info("Request Exception Occurred: %s", e)
            return vulnerabilities

        try:
            response_json = resp.json()
            extracted_version = version.parse(response_json.get("buildVersion", ""))
        except version.InvalidVersion as e:
            logging.info("No version was extracted: %s", e)
            return vulnerabilities

        if (
            extracted_version <= MAX_VULNERABLE_VERSION
            and response_json.get("name") == "Veeam Backup and Replication"
            and extracted_version.major == 12
        ):
            vulnerability = self.create_vulnerability(target)
            vulnerabilities.append(vulnerability)

        return vulnerabilities
