"""Agent Asteroid implementation for CVE-2023-49897."""

import re

from requests import exceptions as requests_exceptions
from packaging import version

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = 'FXC wireless LAN routers "AE1021PE" and "AE1021" vulnerable to OS command injection.'
VULNERABILITY_REFERENCE = "CVE-2023-49897"
VULNERABILITY_DESCRIPTION = (
    "An OS command injection vulnerability exists in AE1021PE firmware version 2.0.9 and earlier "
    "and AE1021 firmware version 2.0.9 and earlier. If this vulnerability is exploited, "
    "an arbitrary OS command may be executed by an attacker who can log in to the product."
)
RISK_RATING = "CRITICAL"
REFERENCES = {
    "akamai.com": "https://www.akamai.com/blog/security-research/zero-day-vulnerability-spreading-mirai-patched",
    "cisa.gov": "https://www.cisa.gov/news-events/ics-advisories/icsa-23-355-01",
}

DEFAULT_TIMEOUT = 90
UPPER_VULNERABLE_VERSION = version.parse("2.0.9")
HEADERS = {
    "Content-Type": "application/x-www-form-urlencoded",
    "Cookie": "cookieno=489646; username=admin; password=admin",
}


@exploits_registry.register
class CVE202349897Exploit(definitions.Exploit):
    """CVE-2023-49897: FXC wireless LAN routers \"AE1021PE\" and \"AE1021\" OS command injection."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
    )

    def accept(self, target: definitions.Target) -> bool:
        data = {
            "username_input": "admin",
            "password_input": "admin",
            "lang": "ja_JP",
            "hashstr": "202310281340",
            "username": "admin",
            "password": "admin",
        }
        try:
            self.session.post(
                target.origin + "/cgi-bin/login.apply",
                headers=HEADERS,
                data=data,
                timeout=DEFAULT_TIMEOUT,
            )
            response = self.session.get(
                target.origin + "/main_top.htm",
                headers=HEADERS,
                timeout=DEFAULT_TIMEOUT,
            )
            return response.status_code == 200 and "logout" in response.text
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        try:
            response = self.session.get(
                target.origin + "/cgi-bin/runtime?system_status",
                headers=HEADERS,
                timeout=DEFAULT_TIMEOUT,
            )
            if response.status_code == 200:
                pattern = re.compile(r"firmware_version=(\d+\.\d+\.\d+)")
                match = pattern.search(response.text)
                if match is not None:
                    firmware_version = version.parse(match.group(1))
                    if firmware_version <= UPPER_VULNERABLE_VERSION:
                        vulnerability = self._create_vulnerability(target)
                        return [vulnerability]
        except requests_exceptions.RequestException:
            return []
        return []
