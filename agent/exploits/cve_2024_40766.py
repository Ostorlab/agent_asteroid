"""Agent Asteroid implementation for CVE-2024-40766"""

import logging
import re

from pysnmp import hlapi
from pysnmp import error as pysnmp_errors
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "SonicWall SonicOS Improper Access Control Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2024-40766"
VULNERABILITY_DESCRIPTION = (
    "An improper access control vulnerability in SonicWall SonicOS management access, "
    "potentially leading to unauthorized resource access and in specific conditions, "
    "causing the firewall to crash. Affects SonicWall Firewall Gen 5, 6, and 7 devices."
)
DEFAULT_TIMEOUT = 30

VULNERABLE_VERSIONS = [
    "5.9.2.14-12o",
    "6.5.4.14-109n",
    "7.0.1-5035",
]


def _get_sonicwall_version(host: str) -> str | None:
    version = None
    try:
        iterator = hlapi.getCmd(
            hlapi.SnmpEngine(),
            hlapi.CommunityData("public", mpModel=1),
            hlapi.UdpTransportTarget((host, 161), timeout=DEFAULT_TIMEOUT),
            hlapi.ContextData(),
            hlapi.ObjectType(hlapi.ObjectIdentity("1.3.6.1.2.1.1.1.0")),  # sysDescr OID
        )
    except pysnmp_errors.PySnmpError:
        return None
    error_indication, error_status, error_index, var_binds = next(iterator)

    if error_indication is True:
        logging.error("error_indication: %s", error_indication)
    elif error_status is True:
        logging.error("error_status: %s at %s", error_status, error_index)
    else:
        for var_bind in var_binds:
            description = var_bind[1].prettyPrint()
            logging.info("SonicOS description found: %s", description)
            match = re.search(
                r"SonicOS Enhanced (\d+\.\d+\.\d+\.\d*-+\d+\w*)", description
            )
            if match is not None:
                version = match.group(1)
                logging.info("SonicOS version extracted: %s", version)

    return version if version is not None else None


def _create_vulnerability(
    target: definitions.Target, version: str
) -> definitions.Vulnerability:
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="CRITICAL",
        short_description=VULNERABILITY_DESCRIPTION,
        description=f"{VULNERABILITY_DESCRIPTION} Detected version: {version}",
        references={
            "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
        },
        recommendation=(
            "- Update SonicOS to the latest version "
            "- Apply the latest security patches provided by SonicWall"
        ),
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=False,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = (
        f"SonicWall device at {target.url} is running a vulnerable version: {version}. "
        f"Immediate action is required."
    )
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
    )
    return vulnerability


@exploits_registry.register
class CVE202440766Exploit(definitions.Exploit):
    """
    CVE-2024-40766: SonicWall SonicOS Improper Access Control Vulnerability
    """

    def accept(self, target: definitions.Target) -> bool:
        version = _get_sonicwall_version(target.host)
        return version in VULNERABLE_VERSIONS

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []
        version = _get_sonicwall_version(target.host)

        if version in VULNERABLE_VERSIONS:
            vulnerability = _create_vulnerability(target, version)
            vulnerabilities.append(vulnerability)

        return vulnerabilities
