"""Agent Asteroid implementation for CVE-2018-15133"""

import re
from urllib import parse as urlparse

import requests
from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from packaging import version
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "PHP Laravel Framework 5.5.40 / 5.6.x < 5.6.30 - token Unserialize Remote Command Execution"
VULNERABILITY_REFERENCE = "CVE-2018-15133"
VULNERABILITY_DESCRIPTION = (
    "In Laravel Framework through 5.5.40 and 5.6.x through 5.6.29, remote code execution "
    "might occur as a result of an unserialize call on a potentially untrusted X-XSRF-TOKEN "
    "value. This involves the decrypt method in Illuminate/Encryption/Encrypter.php and "
    "PendingBroadcast in gadgetchains/Laravel/RCE/3/chain.php in phpggc. The attacker must "
    "know the application key, which normally would never occur, but could happen if the "
    "attacker previously had privileged access or successfully accomplished a previous "
    "attack."
)

DEFAULT_TIMEOUT = 30
TARGET_ENDPOINT = "/_ignition/execute-solution"
VERSION_PATTERN = re.compile(r"\"framework_version\":\"(.*?)\"")
LOWER_VULNERABLE_VERSION = version.parse("5.6.0")
UPPER_VULNERABLE_VERSION = version.parse("5.6.29")
STRICT_VULNERABLE_VERSION = version.parse("5.5.40")
MAX_REDIRECTS = 2


@exploits_registry.register
class CVE201815133Exploit(definitions.Exploit):
    """
    CVE-2018-15133: PHP Laravel Framework 5.5.40 / 5.6.x < 5.6.30 RCE
    """

    def accept(self, target: definitions.Target) -> bool:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        try:
            session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return True

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        session = requests.Session()
        session.max_redirects = MAX_REDIRECTS
        session.verify = False
        try:
            resp = session.get(
                urlparse.urljoin(target.origin, TARGET_ENDPOINT),
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []

        target_version_match = VERSION_PATTERN.search(resp.text)
        if target_version_match is None:
            return []

        target_version = version.parse(target_version_match.group(1))
        if (
            target_version == STRICT_VULNERABLE_VERSION
            or LOWER_VULNERABLE_VERSION <= target_version <= UPPER_VULNERABLE_VERSION
        ):
            vulnerability = self._create_vulnerability(target)
            return [vulnerability]

        return []

    def _create_vulnerability(
        self, target: definitions.Target
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}",
                "exploit-db.com": "https://www.exploit-db.com/exploits/47129",
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target.origin} is vulnerable to {VULNERABILITY_REFERENCE}, "
            f"{VULNERABILITY_TITLE}"
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
