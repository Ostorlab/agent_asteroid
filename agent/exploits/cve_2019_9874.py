"""Agent Asteroid implementation for CVE-2019-9874"""

import datetime
import logging
import re

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry
from agent.exploits import webexploit

VULNERABILITY_TITLE = "Sitecore Anti-CSRF Unauthenticated Deserialization"
VULNERABILITY_REFERENCE = "CVE-2019-9874"
VULNERABILITY_DESCRIPTION = """
Deserialization of untrusted data in Sitecore CMS and XP allows unauthenticated attackers
to execute arbitrary code via a crafted __CSRFTOKEN POST parameter.
"""
RISK_RATING = "CRITICAL"
DEFAULT_TIMEOUT = datetime.timedelta(seconds=10)

SITECORE_PATTERN = r"<title>\s*Welcome to Sitecore\s*<\/title>"
TEST_ENDPOINT = "/sitecore/shell/Applications/Security/CreateNewUser/CreateNewUser.aspx"

# Minimal harmless payload to trigger deserialization error
STATIC_PAYLOAD = "/wEAAAAAAAEAAAAAA"  # Small dummy ObjectStateFormatter Base64 payload


@exploits_registry.register
class SitecoreAntiCSRFDeserializationExploit(webexploit.WebExploit):
    """
    CVE-2019-9874: Sitecore Anti-CSRF Deserialization
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        risk_rating=RISK_RATING,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Check if the target appears to be a Sitecore instance.
        """
        try:
            response = self.session.get(
                f"{target.origin}",
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
            )
            return re.search(SITECORE_PATTERN, response.text, re.IGNORECASE) is not None

        except requests_exceptions.RequestException:
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Send a serialized payload in __CSRFTOKEN and check if the server reacts abnormally.
        """
        vulnerabilities: list[definitions.Vulnerability] = []

        try:
            url = f"{target.origin}{TEST_ENDPOINT}"

            cookies = {"__CSRFCOOKIE": "test"}

            data = {"__CSRFTOKEN": STATIC_PAYLOAD}

            response = self.session.post(
                url,
                cookies=cookies,
                data=data,
                verify=False,
                timeout=DEFAULT_TIMEOUT.seconds,
                allow_redirects=True,
            )

            # We expect 500 Internal Server Error or CSRF validation errors if vulnerable
            if (
                response.status_code == 500
                and "PotentialCsrfException" in response.text
            ):
                vuln = self.create_vulnerability(target)
                vulnerabilities.append(vuln)

        except requests_exceptions.RequestException as e:
            logging.error("Check: Error sending payload: %s", e)

        return vulnerabilities
