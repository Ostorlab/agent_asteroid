"""Agent Asteroid implementation for Exposed Docker Registry API Vulnerability"""

import logging
import json

from requests import exceptions as requests_exceptions

from agent import definitions
from agent import exploits_registry

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

VULNERABILITY_TITLE = "Exposed Docker Registry API Vulnerability"
VULNERABILITY_DESCRIPTION = (
    "The Docker Registry API may be exposed to the internet without sufficient protection, "
    "allowing attackers to download, inspect, and potentially poison Docker images."
)
RISK_RATING = "HIGH"
REFERENCES = {
    "reference": "https://dreamlab.net/en/blog/post/abusing-exposed-docker-registry-apis/"
}
RECOMMENDATION = (
    "Ensure the Docker Registry API is not exposed to the internet or insecure environments. "
    "Implement proper authentication and access controls."
)


def _get_repositories_info(
    session: definitions.HttpSession, target: definitions.Target, repo_list: list[str]
) -> dict[str, list[str]]:
    """
    Retrieves repository information from the Docker Registry API.

    Args:
        target : The target to retrieve repository info from.
        repo_list : List of repositories to get tags for.

    Returns:
        A dictionary of repositories and their tags.
    """
    repositories = {}

    for repo in repo_list:
        try:
            tags_response = session.get(
                f"{target.origin}/v2/{repo}/tags/list", timeout=30
            )
            if tags_response.status_code == 200 and "tags" in tags_response.json():
                repositories[repo] = tags_response.json()["tags"]
                logger.info(f"Tags for repository {repo}: {repositories[repo]}")
            else:
                logger.warning(
                    f"Failed to get tags for repository {repo}: {tags_response.status_code}"
                )
        except requests_exceptions.RequestException as e:
            logger.error(f"Failed to get tags for repository {repo}: {e}")
            continue

    return repositories


@exploits_registry.register
class ExposedDockerRegistryAPIExploit(definitions.Exploit):
    """
    Exposed Docker Registry API Vulnerability.
    """

    metadata = definitions.VulnerabilityMetadata(
        title=VULNERABILITY_TITLE,
        description=VULNERABILITY_DESCRIPTION,
        risk_rating=RISK_RATING,
        references=REFERENCES,
        recommendation=RECOMMENDATION,
        has_public_exploit=False,
    )

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the Docker Registry API is exposed.
        """
        try:
            response = self.session.get(f"{target.origin}/v2/_catalog", timeout=30)
            if response.status_code == 200 and "repositories" in response.json():
                return True
            return False
        except (
            requests_exceptions.RequestException,
            json.decoder.JSONDecodeError,
        ) as e:
            logger.error(
                f"Failed to access Docker Registry API at {target.origin}: {e}"
            )
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Checks for the exposed Docker Registry API vulnerability.
        """
        vulnerabilities = []
        try:
            response = self.session.get(f"{target.origin}/v2/_catalog", timeout=30)
            if response.status_code == 200 and "repositories" in response.json():
                repo_list = response.json()["repositories"]
                logger.info(f"Found repositories: {repo_list}")

                repositories = _get_repositories_info(self.session, target, repo_list)
                vulnerability = self.create_vulnerability(target)
                vulnerability.technical_detail = (
                    f"{target.origin}/v2/_catalog is vulnerable to {VULNERABILITY_TITLE}. "
                    f"Exposed repositories and tags: {repositories}"
                )
                vulnerabilities.append(vulnerability)
                logger.info(f"Vulnerability found: {vulnerability.entry.title}")
        except requests_exceptions.RequestException as e:
            logger.error(
                f"Failed to access Docker Registry API at {target.origin}: {e}"
            )

        return vulnerabilities
