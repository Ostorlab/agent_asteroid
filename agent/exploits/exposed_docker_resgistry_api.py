"""Agent Asteroid implementation for Exposed Docker Registry API Vulnerability"""

import logging
import requests
from typing import Dict, List

from ostorlab.agent.kb import kb
from ostorlab.agent.mixins import agent_report_vulnerability_mixin

from agent import definitions
from agent import exploits_registry

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

VULNERABILITY_TITLE = "Exposed Docker Registry API Vulnerability"
VULNERABILITY_DESCRIPTION = (
    "The Docker Registry API may be exposed to the internet without sufficient protection, "
    "allowing attackers to download, inspect, and potentially poison Docker images."
)


def _create_vulnerability(
    target: definitions.Target, repositories: Dict[str, List[str]]
) -> definitions.Vulnerability:
    """
    Creates and returns a vulnerability object for Exposed Docker Registry API.

    Args:
        target (definitions.Target): The target to create the vulnerability for.
        repositories (dict): A dictionary of repositories and their tags.

    Returns:
        definitions.Vulnerability: The created vulnerability object.
    """
    entry = kb.Entry(
        title=VULNERABILITY_TITLE,
        risk_rating="HIGH",
        short_description=VULNERABILITY_DESCRIPTION,
        description=VULNERABILITY_DESCRIPTION,
        references={
            "reference": "https://dreamlab.net/en/blog/post/abusing-exposed-docker-registry-apis/"
        },
        recommendation=(
            "Ensure the Docker Registry API is not exposed to the internet or insecure environments. "
            "Implement proper authentication and access controls."
        ),
        security_issue=True,
        privacy_issue=False,
        has_public_exploit=False,
        targeted_by_malware=False,
        targeted_by_ransomware=False,
        targeted_by_nation_state=False,
    )
    technical_detail = (
        f"{target.origin}/v2/_catalog is vulnerable to {VULNERABILITY_TITLE}. "
        f"Exposed repositories and tags: {repositories}"
    )
    vulnerability = definitions.Vulnerability(
        entry=entry,
        technical_detail=technical_detail,
        risk_rating=agent_report_vulnerability_mixin.RiskRating.HIGH,
    )
    return vulnerability


def _get_repositories_info(
    target: definitions.Target, repo_list: List[str]
) -> Dict[str, List[str]]:
    """
    Retrieves repository information from the Docker Registry API.

    Args:
        target (definitions.Target): The target to retrieve repository info from.
        repo_list (List[str]): List of repositories to get tags for.

    Returns:
        Dict[str, List[str]]: A dictionary of repositories and their tags.
    """
    repositories = {}

    for repo in repo_list:
        try:
            tags_response = requests.get(
                f"{target.origin}/v2/{repo}/tags/list", timeout=30
            )
            if tags_response.status_code == 200 and "tags" in tags_response.json():
                repositories[repo] = tags_response.json()["tags"]
                logger.info(f"Tags for repository {repo}: {repositories[repo]}")
            else:
                logger.warning(
                    f"Failed to get tags for repository {repo}: {tags_response.status_code}"
                )
        except requests.RequestException as e:
            logger.error(f"Failed to get tags for repository {repo}: {e}")
            continue

    return repositories


@exploits_registry.register
class ExposedDockerRegistryAPIExploit(definitions.Exploit):
    """
    Exposed Docker Registry API Vulnerability.
    """

    def accept(self, target: definitions.Target) -> bool:
        """
        Checks if the Docker Registry API is exposed.
        """
        try:
            response = requests.get(f"{target.origin}/v2/_catalog", timeout=30)
            if response.status_code == 200 and "repositories" in response.json():
                return True
            return False
        except requests.RequestException as e:
            logger.error(
                f"Failed to access Docker Registry API at {target.origin}: {e}"
            )
            return False

    def check(self, target: definitions.Target) -> list[definitions.Vulnerability]:
        """
        Checks for the exposed Docker Registry API vulnerability.
        """
        vulnerabilities = []
        try:
            response = requests.get(f"{target.origin}/v2/_catalog", timeout=30)
            if response.status_code == 200 and "repositories" in response.json():
                repo_list = response.json()["repositories"]
                logger.info(f"Found repositories: {repo_list}")

                repositories = _get_repositories_info(target, repo_list)

                if len(repositories) > 0 or not repo_list:
                    vulnerability = _create_vulnerability(target, repositories)
                    vulnerabilities.append(vulnerability)
                    logger.info(f"Vulnerability found: {vulnerability.entry.title}")
                else:
                    logger.info("No repositories found, but vulnerability still exists")

        except requests.RequestException as e:
            logger.error(
                f"Failed to access Docker Registry API at {target.origin}: {e}"
            )

        return vulnerabilities
